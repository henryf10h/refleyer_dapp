"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/starknet";
exports.ids = ["vendor-chunks/starknet"];
exports.modules = {

/***/ "(ssr)/./node_modules/starknet/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/starknet/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountInterface: () => (/* binding */ AccountInterface),\n/* harmony export */   BlockStatus: () => (/* binding */ BlockStatus),\n/* harmony export */   BlockTag: () => (/* binding */ BlockTag),\n/* harmony export */   CairoCustomEnum: () => (/* binding */ CairoCustomEnum),\n/* harmony export */   CairoOption: () => (/* binding */ CairoOption),\n/* harmony export */   CairoOptionVariant: () => (/* binding */ CairoOptionVariant),\n/* harmony export */   CairoResult: () => (/* binding */ CairoResult),\n/* harmony export */   CairoResultVariant: () => (/* binding */ CairoResultVariant),\n/* harmony export */   CallData: () => (/* binding */ CallData),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   ContractInterface: () => (/* binding */ ContractInterface),\n/* harmony export */   CustomError: () => (/* binding */ CustomError),\n/* harmony export */   EntryPointType: () => (/* binding */ EntryPointType),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   LibraryError: () => (/* binding */ LibraryError),\n/* harmony export */   Litteral: () => (/* binding */ Litteral),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   ProviderInterface: () => (/* binding */ ProviderInterface),\n/* harmony export */   RPC: () => (/* binding */ rpc_exports),\n/* harmony export */   RpcProvider: () => (/* binding */ RpcProvider),\n/* harmony export */   SIMULATION_FLAG: () => (/* binding */ SIMULATION_FLAG),\n/* harmony export */   Sequencer: () => (/* binding */ sequencer_exports),\n/* harmony export */   SequencerProvider: () => (/* binding */ SequencerProvider),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   SignerInterface: () => (/* binding */ SignerInterface),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionFinalityStatus: () => (/* binding */ TransactionFinalityStatus),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   Uint: () => (/* binding */ Uint),\n/* harmony export */   ValidateType: () => (/* binding */ ValidateType),\n/* harmony export */   addAddressPadding: () => (/* binding */ addAddressPadding),\n/* harmony export */   buildUrl: () => (/* binding */ buildUrl),\n/* harmony export */   cairo: () => (/* binding */ cairo_exports),\n/* harmony export */   constants: () => (/* binding */ constants_exports),\n/* harmony export */   contractClassResponseToLegacyCompiledContract: () => (/* binding */ contractClassResponseToLegacyCompiledContract),\n/* harmony export */   defaultProvider: () => (/* binding */ defaultProvider),\n/* harmony export */   ec: () => (/* binding */ ec_exports),\n/* harmony export */   encode: () => (/* binding */ encode_exports),\n/* harmony export */   events: () => (/* binding */ events_exports),\n/* harmony export */   extractContractHashes: () => (/* binding */ extractContractHashes),\n/* harmony export */   fixProto: () => (/* binding */ fixProto),\n/* harmony export */   fixStack: () => (/* binding */ fixStack),\n/* harmony export */   getCalldata: () => (/* binding */ getCalldata),\n/* harmony export */   getChecksumAddress: () => (/* binding */ getChecksumAddress),\n/* harmony export */   getDefaultNodeUrl: () => (/* binding */ getDefaultNodeUrl),\n/* harmony export */   hash: () => (/* binding */ hash_exports),\n/* harmony export */   isSierra: () => (/* binding */ isSierra),\n/* harmony export */   isUrl: () => (/* binding */ isUrl),\n/* harmony export */   json: () => (/* binding */ json_exports),\n/* harmony export */   merkle: () => (/* binding */ merkle_exports),\n/* harmony export */   num: () => (/* binding */ num_exports),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   parseUDCEvent: () => (/* binding */ parseUDCEvent),\n/* harmony export */   provider: () => (/* binding */ provider_exports),\n/* harmony export */   selector: () => (/* binding */ selector_exports),\n/* harmony export */   shortString: () => (/* binding */ shortString_exports),\n/* harmony export */   splitArgsAndOptions: () => (/* binding */ splitArgsAndOptions),\n/* harmony export */   stark: () => (/* binding */ stark_exports),\n/* harmony export */   starknetId: () => (/* binding */ starknetId_exports),\n/* harmony export */   transaction: () => (/* binding */ transaction_exports),\n/* harmony export */   typedData: () => (/* binding */ typedData_exports),\n/* harmony export */   types: () => (/* binding */ types_exports),\n/* harmony export */   uint256: () => (/* binding */ uint256_exports),\n/* harmony export */   validateAndParseAddress: () => (/* binding */ validateAndParseAddress),\n/* harmony export */   validateChecksumAddress: () => (/* binding */ validateChecksumAddress)\n/* harmony export */ });\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _scure_starknet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scure/starknet */ \"(ssr)/./node_modules/@scure/starknet/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/abstract/weierstrass */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var lossless_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lossless-json */ \"(ssr)/./node_modules/lossless-json/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/abstract/poseidon */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/poseidon.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var url_join__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! url-join */ \"(ssr)/./node_modules/url-join/lib/url-join.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n    API_VERSION: ()=>API_VERSION,\n    BN_FEE_TRANSACTION_VERSION_1: ()=>BN_FEE_TRANSACTION_VERSION_1,\n    BN_FEE_TRANSACTION_VERSION_2: ()=>BN_FEE_TRANSACTION_VERSION_2,\n    BN_TRANSACTION_VERSION_1: ()=>BN_TRANSACTION_VERSION_1,\n    BN_TRANSACTION_VERSION_2: ()=>BN_TRANSACTION_VERSION_2,\n    BaseUrl: ()=>BaseUrl,\n    HEX_STR_TRANSACTION_VERSION_1: ()=>HEX_STR_TRANSACTION_VERSION_1,\n    HEX_STR_TRANSACTION_VERSION_2: ()=>HEX_STR_TRANSACTION_VERSION_2,\n    IS_BROWSER: ()=>IS_BROWSER,\n    MASK_250: ()=>MASK_250,\n    MASK_251: ()=>MASK_251,\n    NetworkName: ()=>NetworkName,\n    RPC_GOERLI_NODES: ()=>RPC_GOERLI_NODES,\n    RPC_MAINNET_NODES: ()=>RPC_MAINNET_NODES,\n    StarknetChainId: ()=>StarknetChainId,\n    TEXT_TO_FELT_MAX_LEN: ()=>TEXT_TO_FELT_MAX_LEN,\n    TransactionHashPrefix: ()=>TransactionHashPrefix,\n    UDC: ()=>UDC,\n    ZERO: ()=>ZERO\n});\n// src/utils/encode.ts\nvar encode_exports = {};\n__export(encode_exports, {\n    IS_BROWSER: ()=>IS_BROWSER,\n    addHexPrefix: ()=>addHexPrefix,\n    arrayBufferToString: ()=>arrayBufferToString,\n    atobUniversal: ()=>atobUniversal,\n    btoaUniversal: ()=>btoaUniversal,\n    buf2hex: ()=>buf2hex,\n    calcByteLength: ()=>calcByteLength,\n    padLeft: ()=>padLeft,\n    pascalToSnake: ()=>pascalToSnake,\n    removeHexPrefix: ()=>removeHexPrefix,\n    sanitizeBytes: ()=>sanitizeBytes,\n    sanitizeHex: ()=>sanitizeHex,\n    stringToArrayBuffer: ()=>stringToArrayBuffer,\n    utf8ToArray: ()=>utf8ToArray\n});\n\nvar IS_BROWSER = \"undefined\" !== \"undefined\";\nvar STRING_ZERO = \"0\";\nfunction arrayBufferToString(array) {\n    return new Uint8Array(array).reduce((data, byte)=>data + String.fromCharCode(byte), \"\");\n}\nfunction utf8ToArray(str) {\n    return new TextEncoder().encode(str);\n}\nfunction stringToArrayBuffer(str) {\n    return utf8ToArray(str);\n}\nfunction atobUniversal(a) {\n    return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.decode(a);\n}\nfunction btoaUniversal(b) {\n    return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.encode(new Uint8Array(b));\n}\nfunction buf2hex(buffer) {\n    return buffer.reduce((r, x)=>r + x.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction removeHexPrefix(hex) {\n    return hex.replace(/^0x/i, \"\");\n}\nfunction addHexPrefix(hex) {\n    return `0x${removeHexPrefix(hex)}`;\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n    const diff = length - str.length;\n    let result = str;\n    if (diff > 0) {\n        const pad = padding.repeat(diff);\n        result = left ? pad + str : str + pad;\n    }\n    return result;\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n    return padString(str, length, true, padding);\n}\nfunction calcByteLength(str, byteSize = 8) {\n    const { length } = str;\n    const remainder = length % byteSize;\n    return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n    return padLeft(str, calcByteLength(str, byteSize), padding);\n}\nfunction sanitizeHex(hex) {\n    hex = removeHexPrefix(hex);\n    hex = sanitizeBytes(hex, 2);\n    if (hex) {\n        hex = addHexPrefix(hex);\n    }\n    return hex;\n}\nvar pascalToSnake = (text)=>/[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join(\"_\").toUpperCase() : text;\n// src/constants.ts\nvar TEXT_TO_FELT_MAX_LEN = 31;\nvar HEX_STR_TRANSACTION_VERSION_1 = \"0x1\";\nvar HEX_STR_TRANSACTION_VERSION_2 = \"0x2\";\nvar BN_TRANSACTION_VERSION_1 = 1n;\nvar BN_TRANSACTION_VERSION_2 = 2n;\nvar BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nvar BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\nvar ZERO = 0n;\nvar MASK_250 = 2n ** 250n - 1n;\nvar MASK_251 = 2n ** 251n;\nvar API_VERSION = ZERO;\nvar BaseUrl = /* @__PURE__ */ ((BaseUrl2)=>{\n    BaseUrl2[\"SN_MAIN\"] = \"https://alpha-mainnet.starknet.io\";\n    BaseUrl2[\"SN_GOERLI\"] = \"https://alpha4.starknet.io\";\n    return BaseUrl2;\n})(BaseUrl || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2)=>{\n    NetworkName2[\"SN_MAIN\"] = \"SN_MAIN\";\n    NetworkName2[\"SN_GOERLI\"] = \"SN_GOERLI\";\n    return NetworkName2;\n})(NetworkName || {});\nvar StarknetChainId = /* @__PURE__ */ ((StarknetChainId4)=>{\n    StarknetChainId4[\"SN_MAIN\"] = \"0x534e5f4d41494e\";\n    StarknetChainId4[\"SN_GOERLI\"] = \"0x534e5f474f45524c49\";\n    return StarknetChainId4;\n})(StarknetChainId || {});\nvar TransactionHashPrefix = /* @__PURE__ */ ((TransactionHashPrefix2)=>{\n    TransactionHashPrefix2[\"DECLARE\"] = \"0x6465636c617265\";\n    TransactionHashPrefix2[\"DEPLOY\"] = \"0x6465706c6f79\";\n    TransactionHashPrefix2[\"DEPLOY_ACCOUNT\"] = \"0x6465706c6f795f6163636f756e74\";\n    TransactionHashPrefix2[\"INVOKE\"] = \"0x696e766f6b65\";\n    TransactionHashPrefix2[\"L1_HANDLER\"] = \"0x6c315f68616e646c6572\";\n    return TransactionHashPrefix2;\n})(TransactionHashPrefix || {});\nvar UDC = {\n    ADDRESS: \"0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\",\n    ENTRYPOINT: \"deployContract\"\n};\nvar RPC_GOERLI_NODES = [\n    \"https://starknet-testnet.public.blastapi.io/rpc/v0.5\",\n    \"https://limited-rpc.nethermind.io/goerli-juno/v0_5\"\n];\nvar RPC_MAINNET_NODES = [\n    \"https://starknet-mainnet.public.blastapi.io/rpc/v0.5\",\n    \"https://limited-rpc.nethermind.io/mainnet-juno/v0_5\"\n];\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n    BlockStatus: ()=>BlockStatus,\n    BlockTag: ()=>BlockTag,\n    EntryPointType: ()=>EntryPointType,\n    Litteral: ()=>Litteral,\n    RPC: ()=>rpc_exports,\n    SIMULATION_FLAG: ()=>SIMULATION_FLAG,\n    Sequencer: ()=>sequencer_exports,\n    TransactionExecutionStatus: ()=>TransactionExecutionStatus,\n    TransactionFinalityStatus: ()=>TransactionFinalityStatus,\n    TransactionStatus: ()=>TransactionStatus,\n    TransactionType: ()=>TransactionType,\n    Uint: ()=>Uint,\n    ValidateType: ()=>ValidateType\n});\n// src/types/account.ts\nvar SIMULATION_FLAG = /* @__PURE__ */ ((SIMULATION_FLAG2)=>{\n    SIMULATION_FLAG2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n    SIMULATION_FLAG2[\"SKIP_EXECUTE\"] = \"SKIP_EXECUTE\";\n    return SIMULATION_FLAG2;\n})(SIMULATION_FLAG || {});\n// src/types/calldata.ts\nvar ValidateType = /* @__PURE__ */ ((ValidateType2)=>{\n    ValidateType2[\"DEPLOY\"] = \"DEPLOY\";\n    ValidateType2[\"CALL\"] = \"CALL\";\n    ValidateType2[\"INVOKE\"] = \"INVOKE\";\n    return ValidateType2;\n})(ValidateType || {});\nvar Uint = /* @__PURE__ */ ((Uint2)=>{\n    Uint2[\"u8\"] = \"core::integer::u8\";\n    Uint2[\"u16\"] = \"core::integer::u16\";\n    Uint2[\"u32\"] = \"core::integer::u32\";\n    Uint2[\"u64\"] = \"core::integer::u64\";\n    Uint2[\"u128\"] = \"core::integer::u128\";\n    Uint2[\"u256\"] = \"core::integer::u256\";\n    return Uint2;\n})(Uint || {});\nvar Litteral = /* @__PURE__ */ ((Litteral2)=>{\n    Litteral2[\"ClassHash\"] = \"core::starknet::class_hash::ClassHash\";\n    Litteral2[\"ContractAddress\"] = \"core::starknet::contract_address::ContractAddress\";\n    return Litteral2;\n})(Litteral || {});\n// src/types/lib/contract/index.ts\nvar EntryPointType = /* @__PURE__ */ ((EntryPointType2)=>{\n    EntryPointType2[\"EXTERNAL\"] = \"EXTERNAL\";\n    EntryPointType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n    EntryPointType2[\"CONSTRUCTOR\"] = \"CONSTRUCTOR\";\n    return EntryPointType2;\n})(EntryPointType || {});\n// src/types/lib/index.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2)=>{\n    TransactionType2[\"DECLARE\"] = \"DECLARE\";\n    TransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n    TransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n    TransactionType2[\"INVOKE\"] = \"INVOKE_FUNCTION\";\n    return TransactionType2;\n})(TransactionType || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2)=>{\n    TransactionStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n    TransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n    TransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n    TransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n    TransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n    TransactionStatus2[\"REVERTED\"] = \"REVERTED\";\n    return TransactionStatus2;\n})(TransactionStatus || {});\nvar TransactionFinalityStatus = /* @__PURE__ */ ((TransactionFinalityStatus2)=>{\n    TransactionFinalityStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n    TransactionFinalityStatus2[\"RECEIVED\"] = \"RECEIVED\";\n    TransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n    TransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n    return TransactionFinalityStatus2;\n})(TransactionFinalityStatus || {});\nvar TransactionExecutionStatus = /* @__PURE__ */ ((TransactionExecutionStatus2)=>{\n    TransactionExecutionStatus2[\"REJECTED\"] = \"REJECTED\";\n    TransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n    TransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n    return TransactionExecutionStatus2;\n})(TransactionExecutionStatus || {});\nvar BlockStatus = /* @__PURE__ */ ((BlockStatus2)=>{\n    BlockStatus2[\"PENDING\"] = \"PENDING\";\n    BlockStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n    BlockStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n    BlockStatus2[\"REJECTED\"] = \"REJECTED\";\n    return BlockStatus2;\n})(BlockStatus || {});\nvar BlockTag = /* @__PURE__ */ ((BlockTag2)=>{\n    BlockTag2[\"pending\"] = \"pending\";\n    BlockTag2[\"latest\"] = \"latest\";\n    return BlockTag2;\n})(BlockTag || {});\n// src/types/api/rpc.ts\nvar rpc_exports = {};\n__export(rpc_exports, {\n    EBlockTag: ()=>EBlockTag,\n    EDataAvailabilityMode: ()=>EDataAvailabilityMode,\n    ESimulationFlag: ()=>ESimulationFlag,\n    ETransactionExecutionStatus: ()=>ETransactionExecutionStatus,\n    ETransactionFinalityStatus: ()=>ETransactionFinalityStatus,\n    ETransactionStatus: ()=>ETransactionStatus,\n    ETransactionType: ()=>ETransactionType,\n    Errors: ()=>errors_exports,\n    JRPC: ()=>jsonrpc_exports,\n    SPEC: ()=>components_exports\n});\n// src/types/api/jsonrpc/index.ts\nvar jsonrpc_exports = {};\n// src/types/api/rpcspec/errors.ts\nvar errors_exports = {};\n// src/types/api/rpcspec/components.ts\nvar components_exports = {};\n// src/types/api/rpcspec/nonspec.ts\nvar ETransactionType = /* @__PURE__ */ ((ETransactionType2)=>{\n    ETransactionType2[\"DECLARE\"] = \"DECLARE\";\n    ETransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n    ETransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n    ETransactionType2[\"INVOKE\"] = \"INVOKE\";\n    ETransactionType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n    return ETransactionType2;\n})(ETransactionType || {});\nvar ESimulationFlag = /* @__PURE__ */ ((ESimulationFlag2)=>{\n    ESimulationFlag2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n    ESimulationFlag2[\"SKIP_FEE_CHARGE\"] = \"SKIP_FEE_CHARGE\";\n    return ESimulationFlag2;\n})(ESimulationFlag || {});\nvar ETransactionStatus = /* @__PURE__ */ ((ETransactionStatus2)=>{\n    ETransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n    ETransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n    ETransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n    ETransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n    return ETransactionStatus2;\n})(ETransactionStatus || {});\nvar ETransactionFinalityStatus = /* @__PURE__ */ ((ETransactionFinalityStatus2)=>{\n    ETransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n    ETransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n    return ETransactionFinalityStatus2;\n})(ETransactionFinalityStatus || {});\nvar ETransactionExecutionStatus = /* @__PURE__ */ ((ETransactionExecutionStatus2)=>{\n    ETransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n    ETransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n    return ETransactionExecutionStatus2;\n})(ETransactionExecutionStatus || {});\nvar EBlockTag = /* @__PURE__ */ ((EBlockTag2)=>{\n    EBlockTag2[\"LATEST\"] = \"latest\";\n    EBlockTag2[\"PENDING\"] = \"pending\";\n    return EBlockTag2;\n})(EBlockTag || {});\nvar EDataAvailabilityMode = /* @__PURE__ */ ((EDataAvailabilityMode2)=>{\n    EDataAvailabilityMode2[\"L1\"] = \"L1\";\n    EDataAvailabilityMode2[\"L2\"] = \"L2\";\n    return EDataAvailabilityMode2;\n})(EDataAvailabilityMode || {});\n// src/types/api/sequencer.ts\nvar sequencer_exports = {};\n// src/utils/assert.ts\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assertion failure\");\n    }\n}\n// src/utils/num.ts\nvar num_exports = {};\n__export(num_exports, {\n    assertInRange: ()=>assertInRange,\n    bigNumberishArrayToDecimalStringArray: ()=>bigNumberishArrayToDecimalStringArray,\n    bigNumberishArrayToHexadecimalStringArray: ()=>bigNumberishArrayToHexadecimalStringArray,\n    cleanHex: ()=>cleanHex,\n    getDecimalString: ()=>getDecimalString,\n    getHexString: ()=>getHexString,\n    getHexStringArray: ()=>getHexStringArray,\n    hexToBytes: ()=>hexToBytes,\n    hexToDecimalString: ()=>hexToDecimalString,\n    isBigInt: ()=>isBigInt,\n    isHex: ()=>isHex,\n    isStringWholeNumber: ()=>isStringWholeNumber,\n    toBigInt: ()=>toBigInt,\n    toCairoBool: ()=>toCairoBool,\n    toHex: ()=>toHex,\n    toHexString: ()=>toHexString,\n    toStorageKey: ()=>toStorageKey\n});\n\nfunction isHex(hex) {\n    return /^0x[0-9a-f]*$/i.test(hex);\n}\nfunction toBigInt(value) {\n    return BigInt(value);\n}\nfunction isBigInt(value) {\n    return typeof value === \"bigint\";\n}\nfunction toHex(number2) {\n    return addHexPrefix(toBigInt(number2).toString(16));\n}\nvar toHexString = toHex;\nfunction toStorageKey(number2) {\n    const res = addHexPrefix(toBigInt(number2).toString(16).padStart(64, \"0\"));\n    return res;\n}\nfunction hexToDecimalString(hex) {\n    return BigInt(addHexPrefix(hex)).toString(10);\n}\nvar cleanHex = (hex)=>hex.toLowerCase().replace(/^(0x)0+/, \"$1\");\nfunction assertInRange(input, lowerBound, upperBound, inputName = \"\") {\n    const messageSuffix = inputName === \"\" ? \"invalid length\" : `invalid ${inputName} length`;\n    const inputBigInt = BigInt(input);\n    const lowerBoundBigInt = BigInt(lowerBound);\n    const upperBoundBigInt = BigInt(upperBound);\n    assert(inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt, `Message not signable, ${messageSuffix}.`);\n}\nfunction bigNumberishArrayToDecimalStringArray(rawCalldata) {\n    return rawCalldata.map((x)=>toBigInt(x).toString(10));\n}\nfunction bigNumberishArrayToHexadecimalStringArray(rawCalldata) {\n    return rawCalldata.map((x)=>toHex(x));\n}\nvar isStringWholeNumber = (value)=>/^\\d+$/.test(value);\nfunction getDecimalString(value) {\n    if (isHex(value)) {\n        return hexToDecimalString(value);\n    }\n    if (isStringWholeNumber(value)) {\n        return value;\n    }\n    throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexString(value) {\n    if (isHex(value)) {\n        return value;\n    }\n    if (isStringWholeNumber(value)) {\n        return toHexString(value);\n    }\n    throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexStringArray(value) {\n    return value.map((el)=>getHexString(el));\n}\nvar toCairoBool = (value)=>(+value).toString();\nfunction hexToBytes(value) {\n    if (!isHex(value)) throw new Error(`${value} need to be a hex-string`);\n    let adaptedValue = removeHexPrefix(value);\n    if (adaptedValue.length % 2 !== 0) {\n        adaptedValue = `0${adaptedValue}`;\n    }\n    return (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(adaptedValue);\n}\n// src/utils/selector.ts\nvar selector_exports = {};\n__export(selector_exports, {\n    getSelector: ()=>getSelector,\n    getSelectorFromName: ()=>getSelectorFromName,\n    keccakBn: ()=>keccakBn,\n    starknetKeccak: ()=>starknetKeccak\n});\n\nfunction keccakBn(value) {\n    const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n    const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n    return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\nfunction keccakHex(str) {\n    return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(utf8ToArray(str)).toString(16));\n}\nfunction starknetKeccak(str) {\n    const hash = BigInt(keccakHex(str));\n    return hash & MASK_250;\n}\nfunction getSelectorFromName(funcName) {\n    return toHex(starknetKeccak(funcName));\n}\nfunction getSelector(value) {\n    if (isHex(value)) {\n        return value;\n    }\n    if (isStringWholeNumber(value)) {\n        return toHexString(value);\n    }\n    return getSelectorFromName(value);\n}\n// src/utils/shortString.ts\nvar shortString_exports = {};\n__export(shortString_exports, {\n    decodeShortString: ()=>decodeShortString,\n    encodeShortString: ()=>encodeShortString,\n    isASCII: ()=>isASCII,\n    isDecimalString: ()=>isDecimalString,\n    isLongText: ()=>isLongText,\n    isShortString: ()=>isShortString,\n    isShortText: ()=>isShortText,\n    isText: ()=>isText,\n    splitLongString: ()=>splitLongString\n});\nfunction isASCII(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n}\nfunction isShortString(str) {\n    return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\nfunction isDecimalString(str) {\n    return /^[0-9]*$/i.test(str);\n}\nfunction isText(val) {\n    return typeof val === \"string\" && !isHex(val) && !isStringWholeNumber(val);\n}\nvar isShortText = (val)=>isText(val) && isShortString(val);\nvar isLongText = (val)=>isText(val) && !isShortString(val);\nfunction splitLongString(longStr) {\n    const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, \"g\");\n    return longStr.match(regex) || [];\n}\nfunction encodeShortString(str) {\n    if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n    if (!isShortString(str)) throw new Error(`${str} is too long`);\n    return addHexPrefix(str.replace(/./g, (char)=>char.charCodeAt(0).toString(16)));\n}\nfunction decodeShortString(str) {\n    if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n    if (isHex(str)) {\n        return removeHexPrefix(str).replace(/.{2}/g, (hex)=>String.fromCharCode(parseInt(hex, 16)));\n    }\n    if (isDecimalString(str)) {\n        return decodeShortString(\"0X\".concat(BigInt(str).toString(16)));\n    }\n    throw new Error(`${str} is not Hex or decimal`);\n}\n// src/utils/calldata/cairo.ts\nvar cairo_exports = {};\n__export(cairo_exports, {\n    felt: ()=>felt,\n    getAbiContractVersion: ()=>getAbiContractVersion,\n    getArrayType: ()=>getArrayType,\n    isCairo1Abi: ()=>isCairo1Abi,\n    isCairo1Type: ()=>isCairo1Type,\n    isLen: ()=>isLen,\n    isTypeArray: ()=>isTypeArray,\n    isTypeBool: ()=>isTypeBool,\n    isTypeContractAddress: ()=>isTypeContractAddress,\n    isTypeEnum: ()=>isTypeEnum,\n    isTypeEthAddress: ()=>isTypeEthAddress,\n    isTypeFelt: ()=>isTypeFelt,\n    isTypeLitteral: ()=>isTypeLitteral,\n    isTypeNamedTuple: ()=>isTypeNamedTuple,\n    isTypeOption: ()=>isTypeOption,\n    isTypeResult: ()=>isTypeResult,\n    isTypeStruct: ()=>isTypeStruct,\n    isTypeTuple: ()=>isTypeTuple,\n    isTypeUint: ()=>isTypeUint,\n    isTypeUint256: ()=>isTypeUint256,\n    tuple: ()=>tuple,\n    uint256: ()=>uint256\n});\n// src/utils/uint256.ts\nvar uint256_exports = {};\n__export(uint256_exports, {\n    UINT_128_MAX: ()=>UINT_128_MAX,\n    UINT_256_MAX: ()=>UINT_256_MAX,\n    bnToUint256: ()=>bnToUint256,\n    isUint256: ()=>isUint256,\n    uint256ToBN: ()=>uint256ToBN\n});\nvar UINT_128_MAX = (1n << 128n) - 1n;\nvar UINT_256_MAX = (1n << 256n) - 1n;\nfunction uint256ToBN(uint2562) {\n    return (toBigInt(uint2562.high) << 128n) + toBigInt(uint2562.low);\n}\nfunction isUint256(bn) {\n    return toBigInt(bn) <= UINT_256_MAX;\n}\nfunction bnToUint256(bn) {\n    const bi = toBigInt(bn);\n    if (!isUint256(bi)) throw new Error(\"Number is too large\");\n    return {\n        low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n        high: addHexPrefix((bi >> 128n).toString(16))\n    };\n}\n// src/utils/calldata/cairo.ts\nvar isLen = (name)=>/_len$/.test(name);\nvar isTypeFelt = (type)=>type === \"felt\" || type === \"core::felt252\";\nvar isTypeArray = (type)=>/\\*/.test(type) || type.startsWith(\"core::array::Array::\") || type.startsWith(\"core::array::Span::\");\nvar isTypeTuple = (type)=>/^\\(.*\\)$/i.test(type);\nvar isTypeNamedTuple = (type)=>/\\(.*\\)/i.test(type) && type.includes(\":\");\nvar isTypeStruct = (type, structs)=>type in structs;\nvar isTypeEnum = (type, enums)=>type in enums;\nvar isTypeOption = (type)=>type.startsWith(\"core::option::Option::\");\nvar isTypeResult = (type)=>type.startsWith(\"core::result::Result::\");\nvar isTypeUint = (type)=>Object.values(Uint).includes(type);\nvar isTypeLitteral = (type)=>Object.values(Litteral).includes(type);\nvar isTypeUint256 = (type)=>type === \"core::integer::u256\";\nvar isTypeBool = (type)=>type === \"core::bool\";\nvar isTypeContractAddress = (type)=>type === \"core::starknet::contract_address::ContractAddress\";\nvar isTypeEthAddress = (type)=>type === \"core::starknet::eth_address::EthAddress\";\nvar isCairo1Type = (type)=>type.includes(\"::\");\nvar getArrayType = (type)=>{\n    if (isCairo1Type(type)) {\n        return type.substring(type.indexOf(\"<\") + 1, type.lastIndexOf(\">\"));\n    }\n    return type.replace(\"*\", \"\");\n};\nfunction isCairo1Abi(abi) {\n    const { cairo } = getAbiContractVersion(abi);\n    if (cairo === void 0) {\n        throw Error(\"Unable to determine Cairo version\");\n    }\n    return cairo === \"1\";\n}\nfunction getAbiContractVersion(abi) {\n    if (abi.find((it)=>it.type === \"interface\")) {\n        return {\n            cairo: \"1\",\n            compiler: \"2\"\n        };\n    }\n    const testFunction = abi.find((it)=>it.type === \"function\" && (it.inputs.length || it.outputs.length));\n    if (!testFunction) {\n        return {\n            cairo: void 0,\n            compiler: void 0\n        };\n    }\n    const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n    if (isCairo1Type(io[0].type)) {\n        return {\n            cairo: \"1\",\n            compiler: \"1\"\n        };\n    }\n    return {\n        cairo: \"0\",\n        compiler: \"0\"\n    };\n}\nvar uint256 = (it)=>{\n    const bn = BigInt(it);\n    if (!isUint256(bn)) throw new Error(\"Number is too large\");\n    return {\n        // eslint-disable-next-line no-bitwise\n        low: (bn & UINT_128_MAX).toString(10),\n        // eslint-disable-next-line no-bitwise\n        high: (bn >> 128n).toString(10)\n    };\n};\nvar tuple = (...args)=>({\n        ...args\n    });\nfunction felt(it) {\n    if (isBigInt(it) || typeof it === \"number\" && Number.isInteger(it)) {\n        return it.toString();\n    }\n    if (isText(it)) {\n        if (!isShortString(it)) throw new Error(`${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`);\n        const encoded = encodeShortString(it);\n        return BigInt(encoded).toString();\n    }\n    if (typeof it === \"string\" && isHex(it)) {\n        return BigInt(it).toString();\n    }\n    if (typeof it === \"string\" && isStringWholeNumber(it)) {\n        return it;\n    }\n    if (typeof it === \"boolean\") {\n        return `${+it}`;\n    }\n    throw new Error(`${it} can't be computed by felt()`);\n}\n// src/utils/calldata/enum/CairoCustomEnum.ts\nvar CairoCustomEnum = class {\n    /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */ constructor(enumContent){\n        const variantsList = Object.values(enumContent);\n        if (variantsList.length === 0) {\n            throw new Error(\"This Enum must have a least 1 variant\");\n        }\n        const nbActiveVariants = variantsList.filter((content)=>typeof content !== \"undefined\").length;\n        if (nbActiveVariants !== 1) {\n            throw new Error(\"This Enum must have exactly one active variant\");\n        }\n        this.variant = enumContent;\n    }\n    /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */ unwrap() {\n        const variants = Object.entries(this.variant);\n        const activeVariant = variants.find((item)=>typeof item[1] !== \"undefined\");\n        if (typeof activeVariant === \"undefined\") {\n            return void 0;\n        }\n        return activeVariant[1];\n    }\n    /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */ activeVariant() {\n        const variants = Object.entries(this.variant);\n        const activeVariant = variants.find((item)=>typeof item[1] !== \"undefined\");\n        if (typeof activeVariant === \"undefined\") {\n            return \"\";\n        }\n        return activeVariant[0];\n    }\n};\n// src/utils/calldata/enum/CairoOption.ts\nvar CairoOptionVariant = /* @__PURE__ */ ((CairoOptionVariant2)=>{\n    CairoOptionVariant2[CairoOptionVariant2[\"Some\"] = 0] = \"Some\";\n    CairoOptionVariant2[CairoOptionVariant2[\"None\"] = 1] = \"None\";\n    return CairoOptionVariant2;\n})(CairoOptionVariant || {});\nvar CairoOption = class {\n    constructor(variant, someContent){\n        if (!(variant in CairoOptionVariant)) {\n            throw new Error(\"Wrong variant : should be CairoOptionVariant.Some or .None.\");\n        }\n        if (variant === 0 /* Some */ ) {\n            if (typeof someContent === \"undefined\") {\n                throw new Error('The creation of a Cairo Option with \"Some\" variant needs a content as input.');\n            }\n            this.Some = someContent;\n            this.None = void 0;\n        } else {\n            this.Some = void 0;\n            this.None = true;\n        }\n    }\n    /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */ unwrap() {\n        if (this.None) {\n            return void 0;\n        }\n        return this.Some;\n    }\n    /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */ isSome() {\n        return !(typeof this.Some === \"undefined\");\n    }\n    /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */ isNone() {\n        return this.None === true;\n    }\n};\n// src/utils/calldata/enum/CairoResult.ts\nvar CairoResultVariant = /* @__PURE__ */ ((CairoResultVariant2)=>{\n    CairoResultVariant2[CairoResultVariant2[\"Ok\"] = 0] = \"Ok\";\n    CairoResultVariant2[CairoResultVariant2[\"Err\"] = 1] = \"Err\";\n    return CairoResultVariant2;\n})(CairoResultVariant || {});\nvar CairoResult = class {\n    constructor(variant, resultContent){\n        if (!(variant in CairoResultVariant)) {\n            throw new Error(\"Wrong variant : should be CairoResultVariant.Ok or .Err.\");\n        }\n        if (variant === 0 /* Ok */ ) {\n            this.Ok = resultContent;\n            this.Err = void 0;\n        } else {\n            this.Ok = void 0;\n            this.Err = resultContent;\n        }\n    }\n    /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */ unwrap() {\n        if (typeof this.Ok !== \"undefined\") {\n            return this.Ok;\n        }\n        if (typeof this.Err !== \"undefined\") {\n            return this.Err;\n        }\n        throw new Error(\"Both Result.Ok and .Err are undefined. Not authorized.\");\n    }\n    /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */ isOk() {\n        return !(typeof this.Ok === \"undefined\");\n    }\n    /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */ isErr() {\n        return !(typeof this.Err === \"undefined\");\n    }\n};\n// src/utils/calldata/formatter.ts\nvar guard = {\n    isBN: (data, type, key)=>{\n        if (!isBigInt(data[key])) throw new Error(`Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`);\n    },\n    unknown: (data, type, key)=>{\n        throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n    }\n};\nfunction formatter(data, type, sameType) {\n    return Object.entries(data).reduce((acc, [key, value])=>{\n        const elType = sameType ?? type[key];\n        if (!(key in type) && !sameType) {\n            acc[key] = value;\n            return acc;\n        }\n        if (elType === \"string\") {\n            if (Array.isArray(data[key])) {\n                const arrayStr = formatter(data[key], data[key].map((_)=>elType));\n                acc[key] = Object.values(arrayStr).join(\"\");\n                return acc;\n            }\n            guard.isBN(data, type, key);\n            acc[key] = decodeShortString(value);\n            return acc;\n        }\n        if (elType === \"number\") {\n            guard.isBN(data, type, key);\n            acc[key] = Number(value);\n            return acc;\n        }\n        if (typeof elType === \"function\") {\n            acc[key] = elType(value);\n            return acc;\n        }\n        if (Array.isArray(elType)) {\n            const arrayObj = formatter(data[key], elType, elType[0]);\n            acc[key] = Object.values(arrayObj);\n            return acc;\n        }\n        if (typeof elType === \"object\") {\n            acc[key] = formatter(data[key], elType);\n            return acc;\n        }\n        guard.unknown(data, type, key);\n        return acc;\n    }, {});\n}\n// src/utils/calldata/parser/parser-0-1.1.0.ts\nvar AbiParser1 = class {\n    constructor(abi){\n        this.abi = abi;\n    }\n    /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */ methodInputsLength(abiMethod) {\n        return abiMethod.inputs.reduce((acc, input)=>!isLen(input.name) ? acc + 1 : acc, 0);\n    }\n    /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */ getMethod(name) {\n        return this.abi.find((it)=>it.name === name);\n    }\n    /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */ getLegacyFormat() {\n        return this.abi;\n    }\n};\n// src/utils/calldata/parser/parser-2.0.0.ts\nvar AbiParser2 = class {\n    constructor(abi){\n        this.abi = abi;\n    }\n    /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */ methodInputsLength(abiMethod) {\n        return abiMethod.inputs.length;\n    }\n    /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */ getMethod(name) {\n        const intf = this.abi.find((it)=>it.type === \"interface\");\n        return intf.items.find((it)=>it.name === name);\n    }\n    /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */ getLegacyFormat() {\n        return this.abi.flatMap((e)=>{\n            if (e.type === \"interface\") {\n                return e.items;\n            }\n            return e;\n        });\n    }\n};\n// src/utils/calldata/parser/index.ts\nfunction createAbiParser(abi) {\n    const version = getAbiVersion(abi);\n    if (version === 0 || version === 1) {\n        return new AbiParser1(abi);\n    }\n    if (version === 2) {\n        return new AbiParser2(abi);\n    }\n    throw Error(`Unsupported ABI version ${version}`);\n}\nfunction getAbiVersion(abi) {\n    if (abi.find((it)=>it.type === \"interface\")) return 2;\n    if (isCairo1Abi(abi)) return 1;\n    return 0;\n}\nfunction isNoConstructorValid(method, argsCalldata, abiMethod) {\n    return method === \"constructor\" && !abiMethod && !argsCalldata.length;\n}\n// src/utils/calldata/tuple.ts\nfunction parseNamedTuple(namedTuple) {\n    const name = namedTuple.substring(0, namedTuple.indexOf(\":\"));\n    const type = namedTuple.substring(name.length + \":\".length);\n    return {\n        name,\n        type\n    };\n}\nfunction parseSubTuple(s) {\n    if (!s.includes(\"(\")) return {\n        subTuple: [],\n        result: s\n    };\n    const subTuple = [];\n    let result = \"\";\n    let i = 0;\n    while(i < s.length){\n        if (s[i] === \"(\") {\n            let counter = 1;\n            const lBracket = i;\n            i++;\n            while(counter){\n                if (s[i] === \")\") counter--;\n                if (s[i] === \"(\") counter++;\n                i++;\n            }\n            subTuple.push(s.substring(lBracket, i));\n            result += \" \";\n            i--;\n        } else {\n            result += s[i];\n        }\n        i++;\n    }\n    return {\n        subTuple,\n        result\n    };\n}\nfunction extractCairo0Tuple(type) {\n    const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n    const { subTuple, result } = parseSubTuple(cleanType);\n    let recomposed = result.split(\",\").map((it)=>{\n        return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n    });\n    if (isTypeNamedTuple(type)) {\n        recomposed = recomposed.reduce((acc, it)=>{\n            return acc.concat(parseNamedTuple(it));\n        }, []);\n    }\n    return recomposed;\n}\nfunction extractCairo1Tuple(type) {\n    const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n    const { subTuple, result } = parseSubTuple(cleanType);\n    const recomposed = result.split(\",\").map((it)=>{\n        return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n    });\n    return recomposed;\n}\nfunction extractTupleMemberTypes(type) {\n    if (isCairo1Type(type)) {\n        return extractCairo1Tuple(type);\n    }\n    return extractCairo0Tuple(type);\n}\n// src/utils/calldata/propertyOrder.ts\nfunction errorU256(key) {\n    return Error(`Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`);\n}\nfunction orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {\n    const orderInput = (unorderedItem, abiType)=>{\n        if (isTypeArray(abiType)) {\n            return orderArray(unorderedItem, abiType);\n        }\n        if (isTypeEnum(abiType, enums)) {\n            const abiObj = enums[abiType];\n            return orderEnum(unorderedItem, abiObj);\n        }\n        if (isTypeTuple(abiType)) {\n            return orderTuple(unorderedItem, abiType);\n        }\n        if (isTypeEthAddress(abiType)) {\n            return unorderedItem;\n        }\n        if (isTypeUint256(abiType)) {\n            const u256 = unorderedItem;\n            if (typeof u256 !== \"object\") {\n                return u256;\n            }\n            if (!(\"low\" in u256 && \"high\" in u256)) {\n                throw errorU256(abiType);\n            }\n            return {\n                low: u256.low,\n                high: u256.high\n            };\n        }\n        if (isTypeStruct(abiType, structs)) {\n            const abiOfStruct = structs[abiType].members;\n            return orderStruct(unorderedItem, abiOfStruct);\n        }\n        return unorderedItem;\n    };\n    const orderStruct = (unorderedObject2, abiObject)=>{\n        const orderedObject2 = abiObject.reduce((orderedObject, abiParam)=>{\n            const setProperty = (value)=>Object.defineProperty(orderedObject, abiParam.name, {\n                    enumerable: true,\n                    value: value ?? unorderedObject2[abiParam.name]\n                });\n            if (unorderedObject2[abiParam.name] === \"undefined\") {\n                if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n                    throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n                }\n            }\n            setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n            return orderedObject;\n        }, {});\n        return orderedObject2;\n    };\n    function orderArray(myArray, abiParam) {\n        const typeInArray = getArrayType(abiParam);\n        if (typeof myArray === \"string\") {\n            return myArray;\n        }\n        return myArray.map((myElem)=>orderInput(myElem, typeInArray));\n    }\n    function orderTuple(unorderedObject2, abiParam) {\n        const typeList = extractTupleMemberTypes(abiParam);\n        const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index)=>{\n            const myObjKeys = Object.keys(unorderedObject2);\n            const setProperty = (value)=>Object.defineProperty(orderedObject, index.toString(), {\n                    enumerable: true,\n                    value: value ?? unorderedObject2[myObjKeys[index]]\n                });\n            const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;\n            setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n            return orderedObject;\n        }, {});\n        return orderedObject2;\n    }\n    const orderEnum = (unorderedObject2, abiObject)=>{\n        if (isTypeResult(abiObject.name)) {\n            const unorderedResult = unorderedObject2;\n            const resultOkType = abiObject.name.substring(abiObject.name.indexOf(\"<\") + 1, abiObject.name.lastIndexOf(\",\"));\n            const resultErrType = abiObject.name.substring(abiObject.name.indexOf(\",\") + 1, abiObject.name.lastIndexOf(\">\"));\n            if (unorderedResult.isOk()) {\n                return new CairoResult(0 /* Ok */ , orderInput(unorderedObject2.unwrap(), resultOkType));\n            }\n            return new CairoResult(1 /* Err */ , orderInput(unorderedObject2.unwrap(), resultErrType));\n        }\n        if (isTypeOption(abiObject.name)) {\n            const unorderedOption = unorderedObject2;\n            const resultSomeType = abiObject.name.substring(abiObject.name.indexOf(\"<\") + 1, abiObject.name.lastIndexOf(\">\"));\n            if (unorderedOption.isSome()) {\n                return new CairoOption(0 /* Some */ , orderInput(unorderedOption.unwrap(), resultSomeType));\n            }\n            return new CairoOption(1 /* None */ , {});\n        }\n        const unorderedCustomEnum = unorderedObject2;\n        const variants = Object.entries(unorderedCustomEnum.variant);\n        const newEntries = variants.map((variant)=>{\n            if (typeof variant[1] === \"undefined\") {\n                return variant;\n            }\n            const variantType = abiObject.type.substring(abiObject.type.lastIndexOf(\"<\") + 1, abiObject.type.lastIndexOf(\">\"));\n            if (variantType === \"()\") {\n                return variant;\n            }\n            return [\n                variant[0],\n                orderInput(unorderedCustomEnum.unwrap(), variantType)\n            ];\n        });\n        return new CairoCustomEnum(Object.fromEntries(newEntries));\n    };\n    const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam)=>{\n        const setProperty = (value)=>Object.defineProperty(orderedObject, abiParam.name, {\n                enumerable: true,\n                value\n            });\n        if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n            return orderedObject;\n        }\n        setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n        return orderedObject;\n    }, {});\n    return finalOrderedObject;\n}\n// src/utils/calldata/requestParser.ts\nfunction parseBaseTypes(type, val) {\n    switch(true){\n        case isTypeUint256(type):\n            const el_uint256 = uint256(val);\n            return [\n                felt(el_uint256.low),\n                felt(el_uint256.high)\n            ];\n        default:\n            return felt(val);\n    }\n}\nfunction parseTuple(element, typeStr) {\n    const memberTypes = extractTupleMemberTypes(typeStr);\n    const elements = Object.values(element);\n    if (elements.length !== memberTypes.length) {\n        throw Error(`ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`);\n    }\n    return memberTypes.map((it, dx)=>{\n        return {\n            element: elements[dx],\n            type: it.type ?? it\n        };\n    });\n}\nfunction parseUint256(element) {\n    if (typeof element === \"object\") {\n        const { low, high } = element;\n        return [\n            felt(low),\n            felt(high)\n        ];\n    }\n    const el_uint256 = uint256(element);\n    return [\n        felt(el_uint256.low),\n        felt(el_uint256.high)\n    ];\n}\nfunction parseCalldataValue(element, type, structs, enums) {\n    if (element === void 0) {\n        throw Error(`Missing parameter for type ${type}`);\n    }\n    if (Array.isArray(element)) {\n        const result = [];\n        result.push(felt(element.length));\n        const arrayType = getArrayType(type);\n        return element.reduce((acc, it)=>{\n            return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n        }, result);\n    }\n    if (structs[type] && structs[type].members.length) {\n        if (isTypeUint256(type)) {\n            return parseUint256(element);\n        }\n        if (type === \"core::starknet::eth_address::EthAddress\") return parseBaseTypes(type, element);\n        const { members } = structs[type];\n        const subElement = element;\n        return members.reduce((acc, it)=>{\n            return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n        }, []);\n    }\n    if (isTypeTuple(type)) {\n        const tupled = parseTuple(element, type);\n        return tupled.reduce((acc, it)=>{\n            const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n            return acc.concat(parsedData);\n        }, []);\n    }\n    if (isTypeUint256(type)) {\n        return parseUint256(element);\n    }\n    if (isTypeEnum(type, enums)) {\n        const { variants } = enums[type];\n        if (isTypeOption(type)) {\n            const myOption = element;\n            if (myOption.isSome()) {\n                const listTypeVariant2 = variants.find((variant)=>variant.name === \"Some\");\n                if (typeof listTypeVariant2 === \"undefined\") {\n                    throw Error(`Error in abi : Option has no 'Some' variant.`);\n                }\n                const typeVariantSome = listTypeVariant2.type;\n                if (typeVariantSome === \"()\") {\n                    return 0..toString();\n                }\n                const parsedParameter2 = parseCalldataValue(myOption.unwrap(), typeVariantSome, structs, enums);\n                if (Array.isArray(parsedParameter2)) {\n                    return [\n                        0..toString(),\n                        ...parsedParameter2\n                    ];\n                }\n                return [\n                    0..toString(),\n                    parsedParameter2\n                ];\n            }\n            return 1..toString();\n        }\n        if (isTypeResult(type)) {\n            const myResult = element;\n            if (myResult.isOk()) {\n                const listTypeVariant3 = variants.find((variant)=>variant.name === \"Ok\");\n                if (typeof listTypeVariant3 === \"undefined\") {\n                    throw Error(`Error in abi : Result has no 'Ok' variant.`);\n                }\n                const typeVariantOk = listTypeVariant3.type;\n                if (typeVariantOk === \"()\") {\n                    return 0..toString();\n                }\n                const parsedParameter3 = parseCalldataValue(myResult.unwrap(), typeVariantOk, structs, enums);\n                if (Array.isArray(parsedParameter3)) {\n                    return [\n                        0..toString(),\n                        ...parsedParameter3\n                    ];\n                }\n                return [\n                    0..toString(),\n                    parsedParameter3\n                ];\n            }\n            const listTypeVariant2 = variants.find((variant)=>variant.name === \"Err\");\n            if (typeof listTypeVariant2 === \"undefined\") {\n                throw Error(`Error in abi : Result has no 'Err' variant.`);\n            }\n            const typeVariantErr = listTypeVariant2.type;\n            if (typeVariantErr === \"()\") {\n                return 1..toString();\n            }\n            const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n            if (Array.isArray(parsedParameter2)) {\n                return [\n                    1..toString(),\n                    ...parsedParameter2\n                ];\n            }\n            return [\n                1..toString(),\n                parsedParameter2\n            ];\n        }\n        const myEnum = element;\n        const activeVariant = myEnum.activeVariant();\n        const listTypeVariant = variants.find((variant)=>variant.name === activeVariant);\n        if (typeof listTypeVariant === \"undefined\") {\n            throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n        }\n        const typeActiveVariant = listTypeVariant.type;\n        const numActiveVariant = variants.findIndex((variant)=>variant.name === activeVariant);\n        if (typeActiveVariant === \"()\") {\n            return numActiveVariant.toString();\n        }\n        const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n        if (Array.isArray(parsedParameter)) {\n            return [\n                numActiveVariant.toString(),\n                ...parsedParameter\n            ];\n        }\n        return [\n            numActiveVariant.toString(),\n            parsedParameter\n        ];\n    }\n    if (typeof element === \"object\") {\n        throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n    }\n    return parseBaseTypes(type, element);\n}\nfunction parseCalldataField(argsIterator, input, structs, enums) {\n    const { name, type } = input;\n    let { value } = argsIterator.next();\n    switch(true){\n        case isTypeArray(type):\n            if (!Array.isArray(value) && !isText(value)) {\n                throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n            }\n            if (typeof value === \"string\") {\n                value = splitLongString(value);\n            }\n            return parseCalldataValue(value, input.type, structs, enums);\n        case type === \"core::starknet::eth_address::EthAddress\":\n            return parseBaseTypes(type, value);\n        case isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type):\n            return parseCalldataValue(value, type, structs, enums);\n        case isTypeEnum(type, enums):\n            return parseCalldataValue(value, type, structs, enums);\n        default:\n            return parseBaseTypes(type, value);\n    }\n}\n// src/utils/calldata/responseParser.ts\nfunction parseBaseTypes2(type, it) {\n    let temp;\n    switch(true){\n        case isTypeBool(type):\n            temp = it.next().value;\n            return Boolean(BigInt(temp));\n        case isTypeUint256(type):\n            const low = it.next().value;\n            const high = it.next().value;\n            return uint256ToBN({\n                low,\n                high\n            });\n        case type === \"core::starknet::eth_address::EthAddress\":\n            temp = it.next().value;\n            return BigInt(temp);\n        default:\n            temp = it.next().value;\n            return BigInt(temp);\n    }\n}\nfunction parseResponseValue(responseIterator, element, structs, enums) {\n    if (element.type === \"()\") {\n        return {};\n    }\n    if (isTypeUint256(element.type)) {\n        const low = responseIterator.next().value;\n        const high = responseIterator.next().value;\n        return uint256ToBN({\n            low,\n            high\n        });\n    }\n    if (isTypeArray(element.type)) {\n        const parsedDataArr = [];\n        const el = {\n            name: \"\",\n            type: getArrayType(element.type)\n        };\n        const len = BigInt(responseIterator.next().value);\n        while(parsedDataArr.length < len){\n            parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n        }\n        return parsedDataArr;\n    }\n    if (structs && element.type in structs && structs[element.type]) {\n        if (element.type === \"core::starknet::eth_address::EthAddress\") {\n            return parseBaseTypes2(element.type, responseIterator);\n        }\n        return structs[element.type].members.reduce((acc, el)=>{\n            acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n            return acc;\n        }, {});\n    }\n    if (enums && element.type in enums && enums[element.type]) {\n        const variantNum = Number(responseIterator.next().value);\n        const rawEnum = enums[element.type].variants.reduce((acc, variant, num)=>{\n            if (num === variantNum) {\n                acc[variant.name] = parseResponseValue(responseIterator, {\n                    name: \"\",\n                    type: variant.type\n                }, structs, enums);\n                return acc;\n            }\n            acc[variant.name] = void 0;\n            return acc;\n        }, {});\n        if (element.type.startsWith(\"core::option::Option\")) {\n            const content = variantNum === 0 /* Some */  ? rawEnum.Some : void 0;\n            return new CairoOption(variantNum, content);\n        }\n        if (element.type.startsWith(\"core::result::Result\")) {\n            let content;\n            if (variantNum === 0 /* Ok */ ) {\n                content = rawEnum.Ok;\n            } else {\n                content = rawEnum.Err;\n            }\n            return new CairoResult(variantNum, content);\n        }\n        const customEnum = new CairoCustomEnum(rawEnum);\n        return customEnum;\n    }\n    if (isTypeTuple(element.type)) {\n        const memberTypes = extractTupleMemberTypes(element.type);\n        return memberTypes.reduce((acc, it, idx)=>{\n            const name = it?.name ? it.name : idx;\n            const type = it?.type ? it.type : it;\n            const el = {\n                name,\n                type\n            };\n            acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n            return acc;\n        }, {});\n    }\n    if (isTypeArray(element.type)) {\n        const parsedDataArr = [];\n        const el = {\n            name: \"\",\n            type: getArrayType(element.type)\n        };\n        const len = BigInt(responseIterator.next().value);\n        while(parsedDataArr.length < len){\n            parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n        }\n        return parsedDataArr;\n    }\n    return parseBaseTypes2(element.type, responseIterator);\n}\nfunction responseParser(responseIterator, output, structs, enums, parsedResult) {\n    const { name, type } = output;\n    let temp;\n    switch(true){\n        case isLen(name):\n            temp = responseIterator.next().value;\n            return BigInt(temp);\n        case structs && type in structs || isTypeTuple(type):\n            return parseResponseValue(responseIterator, output, structs, enums);\n        case enums && isTypeEnum(type, enums):\n            return parseResponseValue(responseIterator, output, structs, enums);\n        case isTypeArray(type):\n            if (isCairo1Type(type)) {\n                return parseResponseValue(responseIterator, output, structs, enums);\n            }\n            const parsedDataArr = [];\n            if (parsedResult && parsedResult[`${name}_len`]) {\n                const arrLen = parsedResult[`${name}_len`];\n                while(parsedDataArr.length < arrLen){\n                    parsedDataArr.push(parseResponseValue(responseIterator, {\n                        name,\n                        type: output.type.replace(\"*\", \"\")\n                    }, structs, enums));\n                }\n            }\n            return parsedDataArr;\n        default:\n            return parseBaseTypes2(type, responseIterator);\n    }\n}\n// src/utils/calldata/validate.ts\nvar validateFelt = (parameter, input)=>{\n    assert(typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\", `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`);\n    if (typeof parameter === \"string\" && !isHex(parameter)) return;\n    const param = BigInt(parameter.toString(10));\n    assert(// from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n};\nvar validateUint = (parameter, input)=>{\n    if (typeof parameter === \"number\") {\n        assert(parameter <= Number.MAX_SAFE_INTEGER, `Validation: Parameter is to large to be typed as Number use (BigInt or String)`);\n    }\n    assert(typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\" || typeof parameter === \"object\" && \"low\" in parameter && \"high\" in parameter, `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`);\n    const param = typeof parameter === \"object\" ? uint256ToBN(parameter) : toBigInt(parameter);\n    switch(input.type){\n        case \"core::integer::u8\" /* u8 */ :\n            assert(param >= 0n && param <= 255n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`);\n            break;\n        case \"core::integer::u16\" /* u16 */ :\n            assert(param >= 0n && param <= 65535n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`);\n            break;\n        case \"core::integer::u32\" /* u32 */ :\n            assert(param >= 0n && param <= 4294967295n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`);\n            break;\n        case \"core::integer::u64\" /* u64 */ :\n            assert(param >= 0n && param <= 2n ** 64n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`);\n            break;\n        case \"core::integer::u128\" /* u128 */ :\n            assert(param >= 0n && param <= 2n ** 128n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`);\n            break;\n        case \"core::integer::u256\" /* u256 */ :\n            assert(param >= 0n && param <= 2n ** 256n - 1n, `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`);\n            break;\n        case \"core::starknet::class_hash::ClassHash\" /* ClassHash */ :\n            assert(// from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n            param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n            break;\n        case \"core::starknet::contract_address::ContractAddress\" /* ContractAddress */ :\n            assert(// from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n            param >= 0n && param <= 2n ** 252n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`);\n            break;\n        default:\n            break;\n    }\n};\nvar validateBool = (parameter, input)=>{\n    assert(typeof parameter === \"boolean\", `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`);\n};\nvar validateStruct = (parameter, input, structs)=>{\n    if (input.type === \"core::integer::u256\" /* u256 */ ) {\n        validateUint(parameter, input);\n        return;\n    }\n    if (input.type === \"core::starknet::eth_address::EthAddress\") {\n        assert(typeof parameter !== \"object\", `EthAdress type is waiting a BigNumberish. Got ${parameter}`);\n        const param = BigInt(parameter.toString(10));\n        assert(// from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n        param >= 0n && param <= 2n ** 160n - 1n, `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`);\n        return;\n    }\n    assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`);\n    structs[input.type].members.forEach(({ name })=>{\n        assert(Object.keys(parameter).includes(name), `Validate: arg ${input.name} should have a property ${name}`);\n    });\n};\nvar validateEnum = (parameter, input)=>{\n    assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`);\n    const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n    const keys = [\n        ...Object.getOwnPropertyNames(parameter),\n        ...methodsKeys\n    ];\n    if (isTypeOption(input.type) && keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n        return;\n    }\n    if (isTypeResult(input.type) && keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n        return;\n    }\n    if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n        return;\n    }\n    throw new Error(`Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`);\n};\nvar validateTuple = (parameter, input)=>{\n    assert(typeof parameter === \"object\" && !Array.isArray(parameter), `Validate: arg ${input.name} should be a tuple (defined as object)`);\n};\nvar validateArray = (parameter, input, structs, enums)=>{\n    const baseType = getArrayType(input.type);\n    if (isTypeFelt(baseType) && isLongText(parameter)) {\n        return;\n    }\n    assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n    switch(true){\n        case isTypeFelt(baseType):\n            parameter.forEach((param)=>validateFelt(param, input));\n            break;\n        case isTypeTuple(baseType):\n            parameter.forEach((it)=>validateTuple(it, {\n                    name: input.name,\n                    type: baseType\n                }));\n            break;\n        case isTypeArray(baseType):\n            parameter.forEach((param)=>validateArray(param, {\n                    name: \"\",\n                    type: baseType\n                }, structs, enums));\n            break;\n        case isTypeStruct(baseType, structs):\n            parameter.forEach((it)=>validateStruct(it, {\n                    name: input.name,\n                    type: baseType\n                }, structs));\n            break;\n        case isTypeEnum(baseType, enums):\n            parameter.forEach((it)=>validateEnum(it, {\n                    name: input.name,\n                    type: baseType\n                }));\n            break;\n        case isTypeUint(baseType) || isTypeLitteral(baseType):\n            parameter.forEach((param)=>validateUint(param, input));\n            break;\n        case isTypeBool(baseType):\n            parameter.forEach((param)=>validateBool(param, input));\n            break;\n        default:\n            throw new Error(`Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`);\n    }\n};\nfunction validateFields(abiMethod, args, structs, enums) {\n    abiMethod.inputs.reduce((acc, input)=>{\n        const parameter = args[acc];\n        switch(true){\n            case isLen(input.name):\n                return acc;\n            case isTypeFelt(input.type):\n                validateFelt(parameter, input);\n                break;\n            case isTypeUint(input.type) || isTypeLitteral(input.type):\n                validateUint(parameter, input);\n                break;\n            case isTypeBool(input.type):\n                validateBool(parameter, input);\n                break;\n            case isTypeArray(input.type):\n                validateArray(parameter, input, structs, enums);\n                break;\n            case isTypeStruct(input.type, structs):\n                validateStruct(parameter, input, structs);\n                break;\n            case isTypeEnum(input.type, enums):\n                validateEnum(parameter, input);\n                break;\n            case isTypeTuple(input.type):\n                validateTuple(parameter, input);\n                break;\n            default:\n                throw new Error(`Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`);\n        }\n        return acc + 1;\n    }, 0);\n}\n// src/utils/calldata/index.ts\nvar CallData = class {\n    constructor(abi){\n        this.structs = CallData.getAbiStruct(abi);\n        this.enums = CallData.getAbiEnum(abi);\n        this.parser = createAbiParser(abi);\n        this.abi = this.parser.getLegacyFormat();\n    }\n    /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */ validate(type, method, args = []) {\n        if (type !== \"DEPLOY\" /* DEPLOY */ ) {\n            const invocableFunctionNames = this.abi.filter((abi)=>{\n                if (abi.type !== \"function\") return false;\n                const isView = abi.stateMutability === \"view\" || abi.state_mutability === \"view\";\n                return type === \"INVOKE\" /* INVOKE */  ? !isView : isView;\n            }).map((abi)=>abi.name);\n            assert(invocableFunctionNames.includes(method), `${type === \"INVOKE\" /* INVOKE */  ? \"invocable\" : \"viewable\"} method not found in abi`);\n        }\n        const abiMethod = this.abi.find((abi)=>type === \"DEPLOY\" /* DEPLOY */  ? abi.name === method && abi.type === \"constructor\" : abi.name === method && abi.type === \"function\");\n        if (isNoConstructorValid(method, args, abiMethod)) {\n            return;\n        }\n        const inputsLength = this.parser.methodInputsLength(abiMethod);\n        if (args.length !== inputsLength) {\n            throw Error(`Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`);\n        }\n        validateFields(abiMethod, args, this.structs, this.enums);\n    }\n    /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */ compile(method, argsCalldata) {\n        const abiMethod = this.abi.find((abiFunction)=>abiFunction.name === method);\n        if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n            return [];\n        }\n        let args;\n        if (Array.isArray(argsCalldata)) {\n            args = argsCalldata;\n        } else {\n            const orderedObject = orderPropsByAbi(argsCalldata, abiMethod.inputs, this.structs, this.enums);\n            args = Object.values(orderedObject);\n            validateFields(abiMethod, args, this.structs, this.enums);\n        }\n        const argsIterator = args[Symbol.iterator]();\n        const callArray = abiMethod.inputs.reduce((acc, input)=>isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)), []);\n        Object.defineProperty(callArray, \"__compiled__\", {\n            enumerable: false,\n            writable: false,\n            value: true\n        });\n        return callArray;\n    }\n    /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */ static compile(rawArgs) {\n        const createTree = (obj)=>{\n            const getEntries = (o, prefix = \".\")=>{\n                const oe = Array.isArray(o) ? [\n                    o.length.toString(),\n                    ...o\n                ] : o;\n                return Object.entries(oe).flatMap(([k, v])=>{\n                    let value = v;\n                    if (isLongText(value)) value = splitLongString(value);\n                    if (k === \"entrypoint\") value = getSelectorFromName(value);\n                    const kk = Array.isArray(oe) && k === \"0\" ? \"$$len\" : k;\n                    if (isBigInt(value)) return [\n                        [\n                            `${prefix}${kk}`,\n                            felt(value)\n                        ]\n                    ];\n                    if (Object(value) === value) {\n                        const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n                        const keys = [\n                            ...Object.getOwnPropertyNames(value),\n                            ...methodsKeys\n                        ];\n                        if (keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n                            const myOption = value;\n                            const variantNb = myOption.isSome() ? 0 /* Some */  : 1 /* None */ ;\n                            if (myOption.isSome()) return getEntries({\n                                0: variantNb,\n                                1: myOption.unwrap()\n                            }, `${prefix}${kk}.`);\n                            return [\n                                [\n                                    `${prefix}${kk}`,\n                                    felt(variantNb)\n                                ]\n                            ];\n                        }\n                        if (keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n                            const myResult = value;\n                            const variantNb = myResult.isOk() ? 0 /* Ok */  : 1 /* Err */ ;\n                            return getEntries({\n                                0: variantNb,\n                                1: myResult.unwrap()\n                            }, `${prefix}${kk}.`);\n                        }\n                        if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n                            const myEnum = value;\n                            const activeVariant = myEnum.activeVariant();\n                            const listVariants = Object.keys(myEnum.variant);\n                            const activeVariantNb = listVariants.findIndex((variant)=>variant === activeVariant);\n                            if (typeof myEnum.unwrap() === \"object\" && Object.keys(myEnum.unwrap()).length === 0) {\n                                return [\n                                    [\n                                        `${prefix}${kk}`,\n                                        felt(activeVariantNb)\n                                    ]\n                                ];\n                            }\n                            return getEntries({\n                                0: activeVariantNb,\n                                1: myEnum.unwrap()\n                            }, `${prefix}${kk}.`);\n                        }\n                        return getEntries(value, `${prefix}${kk}.`);\n                    }\n                    return [\n                        [\n                            `${prefix}${kk}`,\n                            felt(value)\n                        ]\n                    ];\n                });\n            };\n            const result = Object.fromEntries(getEntries(obj));\n            return result;\n        };\n        let callTreeArray;\n        if (!Array.isArray(rawArgs)) {\n            const callTree = createTree(rawArgs);\n            callTreeArray = Object.values(callTree);\n        } else {\n            const callObj = {\n                ...rawArgs\n            };\n            const callTree = createTree(callObj);\n            callTreeArray = Object.values(callTree);\n        }\n        Object.defineProperty(callTreeArray, \"__compiled__\", {\n            enumerable: false,\n            writable: false,\n            value: true\n        });\n        return callTreeArray;\n    }\n    /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */ parse(method, response) {\n        const { outputs } = this.abi.find((abi)=>abi.name === method);\n        const responseIterator = response.flat()[Symbol.iterator]();\n        const parsed = outputs.flat().reduce((acc, output, idx)=>{\n            const propName = output.name ?? idx;\n            acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n            if (acc[propName] && acc[`${propName}_len`]) {\n                delete acc[`${propName}_len`];\n            }\n            return acc;\n        }, {});\n        return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;\n    }\n    /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */ format(method, response, format) {\n        const parsed = this.parse(method, response);\n        return formatter(parsed, format);\n    }\n    /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */ static getAbiStruct(abi) {\n        return abi.filter((abiEntry)=>abiEntry.type === \"struct\").reduce((acc, abiEntry)=>({\n                ...acc,\n                [abiEntry.name]: abiEntry\n            }), {});\n    }\n    /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */ static getAbiEnum(abi) {\n        const fullEnumList = abi.filter((abiEntry)=>abiEntry.type === \"enum\").reduce((acc, abiEntry)=>({\n                ...acc,\n                [abiEntry.name]: abiEntry\n            }), {});\n        delete fullEnumList[\"core::bool\"];\n        return fullEnumList;\n    }\n    /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */ static toCalldata(rawCalldata = []) {\n        return CallData.compile(rawCalldata);\n    }\n    /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */ static toHex(raw = []) {\n        const calldata = CallData.compile(raw);\n        return calldata.map((it)=>toHex(it));\n    }\n};\n// src/utils/hash.ts\nvar hash_exports = {};\n__export(hash_exports, {\n    calculateContractAddressFromHash: ()=>calculateContractAddressFromHash,\n    calculateDeclareTransactionHash: ()=>calculateDeclareTransactionHash,\n    calculateDeployAccountTransactionHash: ()=>calculateDeployAccountTransactionHash,\n    calculateDeployTransactionHash: ()=>calculateDeployTransactionHash,\n    calculateTransactionHash: ()=>calculateTransactionHash,\n    calculateTransactionHashCommon: ()=>calculateTransactionHashCommon,\n    computeCompiledClassHash: ()=>computeCompiledClassHash,\n    computeContractClassHash: ()=>computeContractClassHash,\n    computeHashOnElements: ()=>computeHashOnElements,\n    computeLegacyContractClassHash: ()=>computeLegacyContractClassHash,\n    computeSierraContractClassHash: ()=>computeSierraContractClassHash,\n    default: ()=>computeHintedClassHash,\n    feeTransactionVersion: ()=>feeTransactionVersion,\n    feeTransactionVersion_2: ()=>feeTransactionVersion_2,\n    formatSpaces: ()=>formatSpaces,\n    getSelector: ()=>getSelector,\n    getSelectorFromName: ()=>getSelectorFromName,\n    getVersionsByType: ()=>getVersionsByType,\n    keccakBn: ()=>keccakBn,\n    poseidon: ()=>_noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__,\n    starknetKeccak: ()=>starknetKeccak,\n    transactionVersion: ()=>transactionVersion,\n    transactionVersion_2: ()=>transactionVersion_2\n});\n\n// src/utils/ec.ts\nvar ec_exports = {};\n__export(ec_exports, {\n    starkCurve: ()=>_scure_starknet__WEBPACK_IMPORTED_MODULE_2__,\n    weierstrass: ()=>_noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__\n});\n\n\n// src/utils/json.ts\nvar json_exports = {};\n__export(json_exports, {\n    parse: ()=>parse2,\n    parseAlwaysAsBig: ()=>parseAlwaysAsBig,\n    stringify: ()=>stringify2,\n    stringifyAlwaysAsBig: ()=>stringifyAlwaysAsBig\n});\n\nvar parseIntAsNumberOrBigInt = (x)=>{\n    if (!lossless_json__WEBPACK_IMPORTED_MODULE_5__.isInteger(x)) return parseFloat(x);\n    const v = parseInt(x, 10);\n    return Number.isSafeInteger(v) ? v : BigInt(x);\n};\nvar parse2 = (x)=>lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, parseIntAsNumberOrBigInt);\nvar parseAlwaysAsBig = (x)=>lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, lossless_json__WEBPACK_IMPORTED_MODULE_5__.parseNumberAndBigInt);\nvar stringify2 = (value, replacer, space, numberStringifiers)=>lossless_json__WEBPACK_IMPORTED_MODULE_5__.stringify(value, replacer, space, numberStringifiers);\nvar stringifyAlwaysAsBig = stringify2;\n// src/utils/hash.ts\n\nvar transactionVersion = BN_TRANSACTION_VERSION_1;\nvar transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nvar feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nvar feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\nfunction getVersionsByType(versionType) {\n    return versionType === \"fee\" ? {\n        v1: feeTransactionVersion,\n        v2: feeTransactionVersion_2\n    } : {\n        v1: transactionVersion,\n        v2: transactionVersion_2\n    };\n}\nfunction computeHashOnElements(data) {\n    return [\n        ...data,\n        data.length\n    ].reduce((x, y)=>_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(toBigInt(x), toBigInt(y)), 0).toString();\n}\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {\n    const calldataHash = computeHashOnElements(calldata);\n    const dataToHash = [\n        txHashPrefix,\n        version,\n        contractAddress,\n        entryPointSelector,\n        calldataHash,\n        maxFee,\n        chainId,\n        ...additionalData\n    ];\n    return computeHashOnElements(dataToHash);\n}\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId, constructorName = \"constructor\") {\n    return calculateTransactionHashCommon(\"0x6465706c6f79\" /* DEPLOY */ , version, contractAddress, getSelectorFromName(constructorName), constructorCalldata, 0, chainId);\n}\nfunction calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {\n    return calculateTransactionHashCommon(\"0x6465636c617265\" /* DECLARE */ , version, senderAddress, 0, [\n        classHash\n    ], maxFee, chainId, [\n        nonce,\n        ...compiledClassHash ? [\n            compiledClassHash\n        ] : []\n    ]);\n}\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n    const calldata = [\n        classHash,\n        salt,\n        ...constructorCalldata\n    ];\n    return calculateTransactionHashCommon(\"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */ , version, contractAddress, 0, calldata, maxFee, chainId, [\n        nonce\n    ]);\n}\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n    return calculateTransactionHashCommon(\"0x696e766f6b65\" /* INVOKE */ , version, contractAddress, 0, calldata, maxFee, chainId, [\n        nonce\n    ]);\n}\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n    const CONTRACT_ADDRESS_PREFIX = felt(\"0x535441524b4e45545f434f4e54524143545f41444452455353\");\n    return computeHashOnElements([\n        CONTRACT_ADDRESS_PREFIX,\n        deployerAddress,\n        salt,\n        classHash,\n        constructorCalldataHash\n    ]);\n}\nfunction nullSkipReplacer(key, value) {\n    if (key === \"attributes\" || key === \"accessible_scopes\") {\n        return Array.isArray(value) && value.length === 0 ? void 0 : value;\n    }\n    if (key === \"debug_info\") {\n        return null;\n    }\n    return value === null ? void 0 : value;\n}\nfunction formatSpaces(json2) {\n    let insideQuotes = false;\n    const newString = [];\n    for (const char of json2){\n        if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === \"\\\\\") === false) {\n            insideQuotes = !insideQuotes;\n        }\n        if (insideQuotes) {\n            newString.push(char);\n        } else {\n            newString.push(char === \":\" ? \": \" : char === \",\" ? \", \" : char);\n        }\n    }\n    return newString.join(\"\");\n}\nfunction computeHintedClassHash(compiledContract) {\n    const { abi, program } = compiledContract;\n    const contractClass = {\n        abi,\n        program\n    };\n    const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));\n    return addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(serializedJson)).toString(16));\n}\nfunction computeLegacyContractClassHash(contract) {\n    const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n    const apiVersion = toHex(API_VERSION);\n    const externalEntryPointsHash = computeHashOnElements(compiledContract.entry_points_by_type.EXTERNAL.flatMap((e)=>[\n            e.selector,\n            e.offset\n        ]));\n    const l1HandlerEntryPointsHash = computeHashOnElements(compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e)=>[\n            e.selector,\n            e.offset\n        ]));\n    const constructorEntryPointHash = computeHashOnElements(compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e)=>[\n            e.selector,\n            e.offset\n        ]));\n    const builtinsHash = computeHashOnElements(compiledContract.program.builtins.map((s)=>encodeShortString(s)));\n    const hintedClassHash = computeHintedClassHash(compiledContract);\n    const dataHash = computeHashOnElements(compiledContract.program.data);\n    return computeHashOnElements([\n        apiVersion,\n        externalEntryPointsHash,\n        l1HandlerEntryPointsHash,\n        constructorEntryPointHash,\n        builtinsHash,\n        hintedClassHash,\n        dataHash\n    ]);\n}\nfunction hashBuiltins(builtins) {\n    return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(builtins.flatMap((it)=>{\n        return BigInt(encodeShortString(it));\n    }));\n}\nfunction hashEntryPoint(data) {\n    const base = data.flatMap((it)=>{\n        return [\n            BigInt(it.selector),\n            BigInt(it.offset),\n            hashBuiltins(it.builtins)\n        ];\n    });\n    return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction computeCompiledClassHash(casm) {\n    const COMPILED_CLASS_VERSION = \"COMPILED_CLASS_V1\";\n    const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n    const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n    const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n    const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n    const bytecode = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(casm.bytecode.map((it)=>BigInt(it)));\n    return toHex((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n        compiledClassVersion,\n        externalEntryPointsHash,\n        l1Handlers,\n        constructor,\n        bytecode\n    ]));\n}\nfunction hashEntryPointSierra(data) {\n    const base = data.flatMap((it)=>{\n        return [\n            BigInt(it.selector),\n            BigInt(it.function_idx)\n        ];\n    });\n    return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction hashAbi(sierra) {\n    const indentString = formatSpaces(stringify2(sierra.abi, null));\n    return BigInt(addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(indentString)).toString(16)));\n}\nfunction computeSierraContractClassHash(sierra) {\n    const CONTRACT_CLASS_VERSION = \"CONTRACT_CLASS_V0.1.0\";\n    const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n    const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n    const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n    const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n    const abiHash = hashAbi(sierra);\n    const sierraProgram = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(sierra.sierra_program.map((it)=>BigInt(it)));\n    return toHex((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n        compiledClassVersion,\n        externalEntryPointsHash,\n        l1Handlers,\n        constructor,\n        abiHash,\n        sierraProgram\n    ]));\n}\nfunction computeContractClassHash(contract) {\n    const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n    if (\"sierra_program\" in compiledContract) {\n        return computeSierraContractClassHash(compiledContract);\n    }\n    return computeLegacyContractClassHash(compiledContract);\n}\n// src/utils/stark.ts\nvar stark_exports = {};\n__export(stark_exports, {\n    compressProgram: ()=>compressProgram,\n    decompressProgram: ()=>decompressProgram,\n    estimatedFeeToMaxFee: ()=>estimatedFeeToMaxFee,\n    formatSignature: ()=>formatSignature,\n    makeAddress: ()=>makeAddress,\n    randomAddress: ()=>randomAddress,\n    signatureToDecimalArray: ()=>signatureToDecimalArray,\n    signatureToHexArray: ()=>signatureToHexArray\n});\n\n\nfunction compressProgram(jsonProgram) {\n    const stringified = typeof jsonProgram === \"string\" ? jsonProgram : stringify2(jsonProgram);\n    const compressedProgram = (0,pako__WEBPACK_IMPORTED_MODULE_6__.gzip)(stringified);\n    return btoaUniversal(compressedProgram);\n}\nfunction decompressProgram(base642) {\n    if (Array.isArray(base642)) return base642;\n    const decompressed = arrayBufferToString((0,pako__WEBPACK_IMPORTED_MODULE_6__.ungzip)(atobUniversal(base642)));\n    return parse2(decompressed);\n}\nfunction randomAddress() {\n    const randomKeyPair = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey();\n    return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey)(randomKeyPair);\n}\nfunction makeAddress(input) {\n    return addHexPrefix(input).toLowerCase();\n}\nfunction formatSignature(sig) {\n    if (!sig) throw Error(\"formatSignature: provided signature is undefined\");\n    if (Array.isArray(sig)) {\n        return sig.map((it)=>toHex(it));\n    }\n    try {\n        const { r, s } = sig;\n        return [\n            toHex(r),\n            toHex(s)\n        ];\n    } catch (e) {\n        throw new Error(\"Signature need to be weierstrass.SignatureType or an array for custom\");\n    }\n}\nfunction signatureToDecimalArray(sig) {\n    return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\nfunction signatureToHexArray(sig) {\n    return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\nfunction estimatedFeeToMaxFee(estimatedFee, overhead = 0.5) {\n    const overHeadPercent = Math.round((1 + overhead) * 100);\n    return toBigInt(estimatedFee) * toBigInt(overHeadPercent) / 100n;\n}\n// src/utils/contract.ts\nfunction isSierra(contract) {\n    const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n    return \"sierra_program\" in compiledContract;\n}\nfunction extractContractHashes(payload) {\n    const response = {\n        ...payload\n    };\n    if (isSierra(payload.contract)) {\n        if (!payload.compiledClassHash && payload.casm) {\n            response.compiledClassHash = computeCompiledClassHash(payload.casm);\n        }\n        if (!response.compiledClassHash) throw new Error(\"Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash\");\n    }\n    response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n    if (!response.classHash) throw new Error(\"Extract classHash failed, provide (CompiledContract).json file or classHash\");\n    return response;\n}\nfunction contractClassResponseToLegacyCompiledContract(ccr) {\n    if (isSierra(ccr)) {\n        throw Error(\"ContractClassResponse need to be LegacyContractClass (cairo0 response class)\");\n    }\n    const contract = ccr;\n    return {\n        ...contract,\n        program: decompressProgram(contract.program)\n    };\n}\n// src/utils/fetchPonyfill.ts\n\nvar fetchPonyfill_default =  false || // use buildin fetch in browser if available\ntypeof global !== \"undefined\" && global.fetch || // use buildin fetch in node, react-native and service worker if available\nisomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__;\n// src/utils/provider.ts\nvar provider_exports = {};\n__export(provider_exports, {\n    createSierraContractClass: ()=>createSierraContractClass,\n    parseContract: ()=>parseContract,\n    wait: ()=>wait\n});\nfunction wait(delay) {\n    return new Promise((res)=>{\n        setTimeout(res, delay);\n    });\n}\nfunction createSierraContractClass(contract) {\n    const result = {\n        ...contract\n    };\n    delete result.sierra_program_debug_info;\n    result.abi = formatSpaces(stringify2(contract.abi));\n    result.sierra_program = formatSpaces(stringify2(contract.sierra_program));\n    result.sierra_program = compressProgram(result.sierra_program);\n    return result;\n}\nfunction parseContract(contract) {\n    const parsedContract = typeof contract === \"string\" ? parse2(contract) : contract;\n    if (!isSierra(contract)) {\n        return {\n            ...parsedContract,\n            ...\"program\" in parsedContract && {\n                program: compressProgram(parsedContract.program)\n            }\n        };\n    }\n    return createSierraContractClass(parsedContract);\n}\n// src/utils/responseParser/rpc.ts\nvar RPCResponseParser = class {\n    parseGetBlockResponse(res) {\n        return {\n            timestamp: res.timestamp,\n            block_hash: \"block_hash\" in res ? res.block_hash : \"\",\n            block_number: \"block_number\" in res ? res.block_number : -1,\n            new_root: \"new_root\" in res ? res.new_root : \"\",\n            parent_hash: res.parent_hash,\n            status: \"status\" in res ? res.status : \"PENDING\" /* PENDING */ ,\n            transactions: res.transactions\n        };\n    }\n    parseGetTransactionResponse(res) {\n        return {\n            calldata: \"calldata\" in res ? res.calldata : [],\n            contract_address: \"contract_address\" in res ? res.contract_address : \"\",\n            sender_address: \"sender_address\" in res ? res.sender_address : \"\",\n            max_fee: \"max_fee\" in res ? res.max_fee : \"\",\n            nonce: \"nonce\" in res ? res.nonce : \"\",\n            signature: \"signature\" in res ? res.signature : [],\n            transaction_hash: res.transaction_hash,\n            version: res.version\n        };\n    }\n    parseFeeEstimateResponse(res) {\n        return {\n            overall_fee: toBigInt(res[0].overall_fee),\n            gas_consumed: toBigInt(res[0].gas_consumed),\n            gas_price: toBigInt(res[0].gas_price)\n        };\n    }\n    parseFeeEstimateBulkResponse(res) {\n        return res.map((val)=>({\n                overall_fee: toBigInt(val.overall_fee),\n                gas_consumed: toBigInt(val.gas_consumed),\n                gas_price: toBigInt(val.gas_price)\n            }));\n    }\n    parseCallContractResponse(res) {\n        return {\n            result: res\n        };\n    }\n    parseSimulateTransactionResponse(res) {\n        return res.map((it)=>{\n            return {\n                ...it,\n                suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee))\n            };\n        });\n    }\n    parseContractClassResponse(res) {\n        return {\n            ...res,\n            abi: typeof res.abi === \"string\" ? JSON.parse(res.abi) : res.abi\n        };\n    }\n};\n// src/provider/errors.ts\nfunction fixStack(target, fn = target.constructor) {\n    const { captureStackTrace } = Error;\n    captureStackTrace && captureStackTrace(target, fn);\n}\nfunction fixProto(target, prototype) {\n    const { setPrototypeOf } = Object;\n    setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;\n}\nvar CustomError = class extends Error {\n    constructor(message){\n        super(message);\n        Object.defineProperty(this, \"name\", {\n            value: new.target.name,\n            enumerable: false,\n            configurable: true\n        });\n        fixProto(this, new.target.prototype);\n        fixStack(this);\n    }\n};\nvar LibraryError = class extends CustomError {\n};\nvar GatewayError = class extends LibraryError {\n    constructor(message, errorCode){\n        super(message);\n        this.errorCode = errorCode;\n    }\n};\nvar HttpError = class extends LibraryError {\n    constructor(message, errorCode){\n        super(message);\n        this.errorCode = errorCode;\n    }\n};\n// src/utils/starknetId.ts\nvar starknetId_exports = {};\n__export(starknetId_exports, {\n    StarknetIdContract: ()=>StarknetIdContract,\n    getStarknetIdContract: ()=>getStarknetIdContract,\n    useDecoded: ()=>useDecoded,\n    useEncoded: ()=>useEncoded\n});\nvar basicAlphabet = \"abcdefghijklmnopqrstuvwxyz0123456789-\";\nvar basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nvar bigAlphabet = \"这来\";\nvar basicAlphabetSize = BigInt(basicAlphabet.length);\nvar bigAlphabetSize = BigInt(bigAlphabet.length);\nvar bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\nfunction extractStars(str) {\n    let k = 0;\n    while(str.endsWith(bigAlphabet[bigAlphabet.length - 1])){\n        str = str.substring(0, str.length - 1);\n        k += 1;\n    }\n    return [\n        str,\n        k\n    ];\n}\nfunction useDecoded(encoded) {\n    let decoded = \"\";\n    encoded.forEach((subdomain)=>{\n        while(subdomain !== ZERO){\n            const code = subdomain % basicSizePlusOne;\n            subdomain /= basicSizePlusOne;\n            if (code === BigInt(basicAlphabet.length)) {\n                const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n                if (nextSubdomain === ZERO) {\n                    const code2 = subdomain % bigAlphabetSizePlusOne;\n                    subdomain = nextSubdomain;\n                    if (code2 === ZERO) decoded += basicAlphabet[0];\n                    else decoded += bigAlphabet[Number(code2) - 1];\n                } else {\n                    const code2 = subdomain % bigAlphabetSize;\n                    decoded += bigAlphabet[Number(code2)];\n                    subdomain /= bigAlphabetSize;\n                }\n            } else decoded += basicAlphabet[Number(code)];\n        }\n        const [str, k] = extractStars(decoded);\n        if (k) decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n        decoded += \".\";\n    });\n    if (!decoded) {\n        return decoded;\n    }\n    return decoded.concat(\"stark\");\n}\nfunction useEncoded(decoded) {\n    let encoded = BigInt(0);\n    let multiplier = BigInt(1);\n    if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n        const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n        decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n    } else {\n        const [str, k] = extractStars(decoded);\n        if (k) decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n    }\n    for(let i = 0; i < decoded.length; i += 1){\n        const char = decoded[i];\n        const index = basicAlphabet.indexOf(char);\n        const bnIndex = BigInt(basicAlphabet.indexOf(char));\n        if (index !== -1) {\n            if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n                encoded += multiplier * basicAlphabetSize;\n                multiplier *= basicSizePlusOne;\n                multiplier *= basicSizePlusOne;\n            } else {\n                encoded += multiplier * bnIndex;\n                multiplier *= basicSizePlusOne;\n            }\n        } else if (bigAlphabet.indexOf(char) !== -1) {\n            encoded += multiplier * basicAlphabetSize;\n            multiplier *= basicSizePlusOne;\n            const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n            encoded += multiplier * BigInt(newid);\n            multiplier *= bigAlphabetSize;\n        }\n    }\n    return encoded;\n}\nvar StarknetIdContract = /* @__PURE__ */ ((StarknetIdContract2)=>{\n    StarknetIdContract2[\"MAINNET\"] = \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\";\n    StarknetIdContract2[\"TESTNET\"] = \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\";\n    return StarknetIdContract2;\n})(StarknetIdContract || {});\nfunction getStarknetIdContract(chainId) {\n    switch(chainId){\n        case \"0x534e5f4d41494e\" /* SN_MAIN */ :\n            return \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\" /* MAINNET */ ;\n        case \"0x534e5f474f45524c49\" /* SN_GOERLI */ :\n            return \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\" /* TESTNET */ ;\n        default:\n            throw new Error(\"Starknet.id is not yet deployed on this network\");\n    }\n}\n// src/provider/starknetId.ts\nasync function getStarkName(provider, address, StarknetIdContract2) {\n    const chainId = await provider.getChainId();\n    const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n    try {\n        const hexDomain = await provider.callContract({\n            contractAddress: contract,\n            entrypoint: \"address_to_domain\",\n            calldata: CallData.compile({\n                address\n            })\n        });\n        const decimalDomain = hexDomain.result.map((element)=>BigInt(element)).slice(1);\n        const stringDomain = useDecoded(decimalDomain);\n        if (!stringDomain) {\n            throw Error(\"Starkname not found\");\n        }\n        return stringDomain;\n    } catch (e) {\n        if (e instanceof Error && e.message === \"Starkname not found\") {\n            throw e;\n        }\n        throw Error(\"Could not get stark name\");\n    }\n}\nasync function getAddressFromStarkName(provider, name, StarknetIdContract2) {\n    const chainId = await provider.getChainId();\n    const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n    try {\n        const addressData = await provider.callContract({\n            contractAddress: contract,\n            entrypoint: \"domain_to_address\",\n            calldata: CallData.compile({\n                domain: [\n                    useEncoded(name.replace(\".stark\", \"\")).toString(10)\n                ]\n            })\n        });\n        return addressData.result[0];\n    } catch  {\n        throw Error(\"Could not get address from stark name\");\n    }\n}\n// src/provider/utils.ts\nvar validBlockTags = Object.values(BlockTag);\nvar Block = class {\n    constructor(_identifier){\n        this.hash = null;\n        this.number = null;\n        this.tag = null;\n        this.valueOf = ()=>this.number;\n        this.toString = ()=>this.hash;\n        this.setIdentifier(_identifier);\n    }\n    setIdentifier(__identifier) {\n        if (typeof __identifier === \"string\" && isHex(__identifier)) {\n            this.hash = __identifier;\n        } else if (typeof __identifier === \"bigint\") {\n            this.hash = toHex(__identifier);\n        } else if (typeof __identifier === \"number\") {\n            this.number = __identifier;\n        } else if (typeof __identifier === \"string\" && validBlockTags.includes(__identifier)) {\n            this.tag = __identifier;\n        } else {\n            this.tag = \"pending\" /* pending */ ;\n        }\n    }\n    // TODO: fix any\n    get queryIdentifier() {\n        if (this.number !== null) {\n            return `blockNumber=${this.number}`;\n        }\n        if (this.hash !== null) {\n            return `blockHash=${this.hash}`;\n        }\n        return `blockNumber=${this.tag}`;\n    }\n    // TODO: fix any\n    get identifier() {\n        if (this.number !== null) {\n            return {\n                block_number: this.number\n            };\n        }\n        if (this.hash !== null) {\n            return {\n                block_hash: this.hash\n            };\n        }\n        return this.tag;\n    }\n    set identifier(_identifier) {\n        this.setIdentifier(_identifier);\n    }\n    get sequencerIdentifier() {\n        return this.hash !== null ? {\n            blockHash: this.hash\n        } : {\n            blockNumber: this.number ?? this.tag\n        };\n    }\n};\n// src/provider/rpc.ts\nvar getDefaultNodeUrl = (networkName, mute = false)=>{\n    if (!mute) console.warn(\"Using default public node url, please provide nodeUrl in provider options!\");\n    const nodes = networkName === \"SN_MAIN\" /* SN_MAIN */  ? RPC_MAINNET_NODES : RPC_GOERLI_NODES;\n    const randIdx = Math.floor(Math.random() * nodes.length);\n    return nodes[randIdx];\n};\nvar defaultOptions = {\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    blockIdentifier: \"pending\" /* pending */ ,\n    retries: 200\n};\nvar RpcProvider = class {\n    constructor(optionsOrProvider){\n        this.responseParser = new RPCResponseParser();\n        /**\n     * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n     */ this.getBlockHashAndNumber = this.getBlockLatestAccepted;\n        /**\n     * @deprecated renamed to getBlockStateUpdate();\n     */ this.getStateUpdate = this.getBlockStateUpdate;\n        /**\n     * Returns the execution traces of all transactions included in the given block\n     * @deprecated renamed to getBlockTransactionsTraces()\n     */ this.traceBlockTransactions = this.getBlockTransactionsTraces;\n        /**\n     * Get the number of transactions in a block given a block id\n     * @deprecated renamed to getBlockTransactionCount()\n     * @returns Number of transactions\n     */ this.getTransactionCount = this.getBlockTransactionCount;\n        /**\n     * @deprecated renamed to getTransactionTrace();\n     * For a given executed transaction, return the trace of its execution, including internal calls\n     */ this.traceTransaction = this.getTransactionTrace;\n        /**\n     * @deprecated renamed to simulateTransaction();\n     */ this.getSimulateTransaction = this.simulateTransaction;\n        const { nodeUrl, retries, headers, blockIdentifier, chainId } = optionsOrProvider || {};\n        if (Object.values(NetworkName).includes(nodeUrl)) {\n            this.nodeUrl = getDefaultNodeUrl(nodeUrl, optionsOrProvider?.default);\n        } else if (nodeUrl) {\n            this.nodeUrl = nodeUrl;\n        } else {\n            this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default);\n        }\n        this.retries = retries || defaultOptions.retries;\n        this.headers = {\n            ...defaultOptions.headers,\n            ...headers\n        };\n        this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n        this.chainId = chainId;\n    }\n    fetch(method, params, id = 0) {\n        const rpcRequestBody = {\n            id,\n            jsonrpc: \"2.0\",\n            method,\n            ...params && {\n                params\n            }\n        };\n        return fetchPonyfill_default(this.nodeUrl, {\n            method: \"POST\",\n            body: stringify2(rpcRequestBody),\n            headers: this.headers\n        });\n    }\n    errorHandler(method, params, rpcError, otherError) {\n        if (rpcError) {\n            const { code, message, data } = rpcError;\n            throw new LibraryError(`RPC: ${method} with params ${stringify2(params)}\n ${code}: ${message}: ${stringify2(data)}`);\n        }\n        if (otherError instanceof LibraryError) {\n            throw otherError;\n        }\n        if (otherError) {\n            throw Error(otherError.message);\n        }\n    }\n    async fetchEndpoint(method, params) {\n        try {\n            const rawResult = await this.fetch(method, params);\n            const { error, result } = await rawResult.json();\n            this.errorHandler(method, params, error);\n            return result;\n        } catch (error) {\n            this.errorHandler(method, params, error?.response?.data, error);\n            throw error;\n        }\n    }\n    async getChainId() {\n        this.chainId ?? (this.chainId = await this.fetchEndpoint(\"starknet_chainId\"));\n        return this.chainId;\n    }\n    /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */ async getSpecVersion() {\n        return this.fetchEndpoint(\"starknet_specVersion\");\n    }\n    async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n        const contract_address = toHex(contractAddress);\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getNonce\", {\n            contract_address,\n            block_id\n        });\n    }\n    /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */ async getBlock(blockIdentifier = this.blockIdentifier) {\n        return this.getBlockWithTxHashes(blockIdentifier).then(this.responseParser.parseGetBlockResponse);\n    }\n    /**\n   * Get the most recent accepted block hash and number\n   */ async getBlockLatestAccepted() {\n        return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n    }\n    /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */ async getBlockNumber() {\n        return this.fetchEndpoint(\"starknet_blockNumber\");\n    }\n    async getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", {\n            block_id\n        });\n    }\n    async getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getBlockWithTxs\", {\n            block_id\n        });\n    }\n    async getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getStateUpdate\", {\n            block_id\n        });\n    }\n    async getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_traceBlockTransactions\", {\n            block_id\n        });\n    }\n    async getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", {\n            block_id\n        });\n    }\n    /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */ async getPendingTransactions() {\n        const { transactions } = await this.getBlock(\"pending\" /* pending */ );\n        return Promise.all(transactions.map((it)=>this.getTransactionByHash(it)));\n    }\n    /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */ async getTransaction(txHash) {\n        return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n    }\n    async getTransactionByHash(txHash) {\n        const transaction_hash = toHex(txHash);\n        return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n            transaction_hash\n        });\n    }\n    async getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", {\n            block_id,\n            index\n        });\n    }\n    async getTransactionReceipt(txHash) {\n        const transaction_hash = toHex(txHash);\n        return this.fetchEndpoint(\"starknet_getTransactionReceipt\", {\n            transaction_hash\n        });\n    }\n    async getTransactionTrace(txHash) {\n        const transaction_hash = toHex(txHash);\n        return this.fetchEndpoint(\"starknet_traceTransaction\", {\n            transaction_hash\n        });\n    }\n    /**\n   * NEW: Get the status of a transaction\n   */ async getTransactionStatus(transactionHash) {\n        const transaction_hash = toHex(transactionHash);\n        return this.fetchEndpoint(\"starknet_getTransactionStatus\", {\n            transaction_hash\n        });\n    }\n    /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */ async simulateTransaction(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false, skipFeeCharge = true }) {\n        const block_id = new Block(blockIdentifier).identifier;\n        const simulationFlags = [];\n        if (skipValidate) simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_VALIDATE);\n        if (skipFeeCharge) simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_FEE_CHARGE);\n        return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n            block_id,\n            transactions: invocations.map((it)=>this.buildTransaction(it)),\n            simulation_flags: simulationFlags\n        }).then(this.responseParser.parseSimulateTransactionResponse);\n    }\n    async waitForTransaction(txHash, options) {\n        const transactionHash = toHex(txHash);\n        let { retries } = this;\n        let onchain = false;\n        let isErrorState = false;\n        const retryInterval = options?.retryInterval ?? 5e3;\n        const errorStates = options?.errorStates ?? [\n            rpc_exports.ETransactionStatus.REJECTED,\n            rpc_exports.ETransactionExecutionStatus.REVERTED\n        ];\n        const successStates = options?.successStates ?? [\n            rpc_exports.ETransactionExecutionStatus.SUCCEEDED,\n            rpc_exports.ETransactionStatus.ACCEPTED_ON_L2,\n            rpc_exports.ETransactionStatus.ACCEPTED_ON_L1\n        ];\n        let txStatus;\n        while(!onchain){\n            await wait(retryInterval);\n            try {\n                txStatus = await this.getTransactionStatus(transactionHash);\n                const executionStatus = txStatus.execution_status;\n                const finalityStatus = txStatus.finality_status;\n                if (!finalityStatus) {\n                    const error = new Error(\"waiting for transaction status\");\n                    throw error;\n                }\n                if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n                    onchain = true;\n                } else if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n                    const message = `${executionStatus}: ${finalityStatus}`;\n                    const error = new Error(message);\n                    error.response = txStatus;\n                    isErrorState = true;\n                    throw error;\n                }\n            } catch (error) {\n                if (error instanceof Error && isErrorState) {\n                    throw error;\n                }\n                if (retries <= 0) {\n                    throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n                }\n            }\n            retries -= 1;\n        }\n        let txReceipt = null;\n        while(txReceipt === null){\n            try {\n                txReceipt = await this.getTransactionReceipt(transactionHash);\n            } catch (error) {\n                if (retries <= 0) {\n                    throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n                }\n            }\n            retries -= 1;\n            await wait(retryInterval);\n        }\n        return txReceipt;\n    }\n    async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n        const contract_address = toHex(contractAddress);\n        const parsedKey = toStorageKey(key);\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getStorageAt\", {\n            contract_address,\n            key: parsedKey,\n            block_id\n        });\n    }\n    async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n        const contract_address = toHex(contractAddress);\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n            block_id,\n            contract_address\n        });\n    }\n    async getClassByHash(classHash) {\n        return this.getClass(classHash);\n    }\n    async getClass(classHash, blockIdentifier = this.blockIdentifier) {\n        const class_hash = toHex(classHash);\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getClass\", {\n            class_hash,\n            block_id\n        }).then(this.responseParser.parseContractClassResponse);\n    }\n    async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n        const contract_address = toHex(contractAddress);\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_getClassAt\", {\n            block_id,\n            contract_address\n        }).then(this.responseParser.parseContractClassResponse);\n    }\n    async getCode(_contractAddress, _blockIdentifier) {\n        throw new Error(\"RPC does not implement getCode function\");\n    }\n    async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n        let contractClass;\n        if (contractAddress) {\n            contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n        } else if (classHash) {\n            contractClass = await this.getClass(classHash, blockIdentifier);\n        } else {\n            throw Error(\"getContractVersion require contractAddress or classHash\");\n        }\n        if (isSierra(contractClass)) {\n            if (compiler) {\n                const abiTest = getAbiContractVersion(contractClass.abi);\n                return {\n                    cairo: \"1\",\n                    compiler: abiTest.compiler\n                };\n            }\n            return {\n                cairo: \"1\",\n                compiler: void 0\n            };\n        }\n        return {\n            cairo: \"0\",\n            compiler: \"0\"\n        };\n    }\n    /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */ async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n        return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n    }\n    async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        const transaction = this.buildTransaction({\n            type: \"INVOKE_FUNCTION\" /* INVOKE */ ,\n            ...invocation,\n            ...invocationDetails\n        }, \"fee\");\n        return this.fetchEndpoint(\"starknet_estimateFee\", {\n            request: [\n                transaction\n            ],\n            block_id\n        }).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        const transaction = this.buildTransaction({\n            type: \"DECLARE\" /* DECLARE */ ,\n            ...invocation,\n            ...details\n        }, \"fee\");\n        return this.fetchEndpoint(\"starknet_estimateFee\", {\n            request: [\n                transaction\n            ],\n            block_id\n        }).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        const transaction = this.buildTransaction({\n            type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ,\n            ...invocation,\n            ...details\n        }, \"fee\");\n        return this.fetchEndpoint(\"starknet_estimateFee\", {\n            request: [\n                transaction\n            ],\n            block_id\n        }).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n        if (skipValidate) {\n            console.warn(\"getEstimateFeeBulk RPC does not support skipValidate\");\n        }\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_estimateFee\", {\n            request: invocations.map((it)=>this.buildTransaction(it, \"fee\")),\n            block_id\n        }).then(this.responseParser.parseFeeEstimateBulkResponse);\n    }\n    async invokeFunction(functionInvocation, details) {\n        return this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n            invoke_transaction: {\n                sender_address: functionInvocation.contractAddress,\n                calldata: CallData.toHex(functionInvocation.calldata),\n                type: rpc_exports.ETransactionType.INVOKE,\n                max_fee: toHex(details.maxFee || 0),\n                version: \"0x1\",\n                signature: signatureToHexArray(functionInvocation.signature),\n                nonce: toHex(details.nonce)\n            }\n        });\n    }\n    async declareContract({ contract, signature, senderAddress, compiledClassHash }, details) {\n        if (!isSierra(contract)) {\n            return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n                declare_transaction: {\n                    type: rpc_exports.ETransactionType.DECLARE,\n                    contract_class: {\n                        program: contract.program,\n                        entry_points_by_type: contract.entry_points_by_type,\n                        abi: contract.abi\n                    },\n                    version: HEX_STR_TRANSACTION_VERSION_1,\n                    max_fee: toHex(details.maxFee || 0),\n                    signature: signatureToHexArray(signature),\n                    sender_address: senderAddress,\n                    nonce: toHex(details.nonce)\n                }\n            });\n        }\n        return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n            declare_transaction: {\n                type: rpc_exports.ETransactionType.DECLARE,\n                contract_class: {\n                    sierra_program: decompressProgram(contract.sierra_program),\n                    contract_class_version: contract.contract_class_version,\n                    entry_points_by_type: contract.entry_points_by_type,\n                    abi: contract.abi\n                },\n                compiled_class_hash: compiledClassHash || \"\",\n                version: HEX_STR_TRANSACTION_VERSION_2,\n                max_fee: toHex(details.maxFee || 0),\n                signature: signatureToHexArray(signature),\n                sender_address: senderAddress,\n                nonce: toHex(details.nonce)\n            }\n        });\n    }\n    async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n        return this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n            deploy_account_transaction: {\n                constructor_calldata: CallData.toHex(constructorCalldata || []),\n                class_hash: toHex(classHash),\n                contract_address_salt: toHex(addressSalt || 0),\n                type: rpc_exports.ETransactionType.DEPLOY_ACCOUNT,\n                max_fee: toHex(details.maxFee || 0),\n                version: toHex(details.version || 0),\n                signature: signatureToHexArray(signature),\n                nonce: toHex(details.nonce)\n            }\n        });\n    }\n    async callContract(call, blockIdentifier = this.blockIdentifier) {\n        const block_id = new Block(blockIdentifier).identifier;\n        const result = await this.fetchEndpoint(\"starknet_call\", {\n            request: {\n                contract_address: call.contractAddress,\n                entry_point_selector: getSelectorFromName(call.entrypoint),\n                calldata: CallData.toHex(call.calldata)\n            },\n            block_id\n        });\n        return this.responseParser.parseCallContractResponse(result);\n    }\n    /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */ async estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n        const { from_address, to_address, entry_point_selector, payload } = message;\n        const formattedMessage = {\n            from_address: toHex(from_address),\n            to_address: toHex(to_address),\n            entry_point_selector: getSelector(entry_point_selector),\n            payload: getHexStringArray(payload)\n        };\n        const block_id = new Block(blockIdentifier).identifier;\n        return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n            message: formattedMessage,\n            block_id\n        });\n    }\n    /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */ async getSyncingStats() {\n        return this.fetchEndpoint(\"starknet_syncing\");\n    }\n    /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */ async getEvents(eventFilter) {\n        return this.fetchEndpoint(\"starknet_getEvents\", {\n            filter: eventFilter\n        });\n    }\n    /**\n   * StarknetId Endpoint (get name from address)\n   */ async getStarkName(address, StarknetIdContract2) {\n        return getStarkName(this, address, StarknetIdContract2);\n    }\n    /**\n   * StarknetId Endpoint (get address from name)\n   */ async getAddressFromStarkName(name, StarknetIdContract2) {\n        return getAddressFromStarkName(this, name, StarknetIdContract2);\n    }\n    buildTransaction(invocation, versionType) {\n        const defaultVersions = getVersionsByType(versionType);\n        const details = {\n            signature: signatureToHexArray(invocation.signature),\n            nonce: toHex(invocation.nonce),\n            max_fee: toHex(invocation.maxFee || 0)\n        };\n        if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */ ) {\n            return {\n                type: rpc_exports.ETransactionType.INVOKE,\n                // Diff between sequencer and rpc invoke type\n                sender_address: invocation.contractAddress,\n                calldata: CallData.toHex(invocation.calldata),\n                version: toHex(invocation.version || defaultVersions.v1),\n                ...details\n            };\n        }\n        if (invocation.type === \"DECLARE\" /* DECLARE */ ) {\n            if (!isSierra(invocation.contract)) {\n                return {\n                    type: invocation.type,\n                    contract_class: invocation.contract,\n                    sender_address: invocation.senderAddress,\n                    version: toHex(invocation.version || defaultVersions.v1),\n                    ...details\n                };\n            }\n            return {\n                // compiled_class_hash\n                type: invocation.type,\n                contract_class: {\n                    ...invocation.contract,\n                    sierra_program: decompressProgram(invocation.contract.sierra_program)\n                },\n                compiled_class_hash: invocation.compiledClassHash || \"\",\n                sender_address: invocation.senderAddress,\n                version: toHex(invocation.version || defaultVersions.v2),\n                ...details\n            };\n        }\n        if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ) {\n            return {\n                type: invocation.type,\n                constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n                class_hash: toHex(invocation.classHash),\n                contract_address_salt: toHex(invocation.addressSalt || 0),\n                version: toHex(invocation.version || defaultVersions.v1),\n                ...details\n            };\n        }\n        throw Error(\"RPC buildTransaction received unknown TransactionType\");\n    }\n};\n// src/provider/sequencer.ts\n\n// src/utils/responseParser/index.ts\nvar ResponseParser = class {\n};\n// src/utils/responseParser/sequencer.ts\nvar SequencerAPIResponseParser = class extends ResponseParser {\n    parseGetBlockResponse(res) {\n        return {\n            ...res,\n            new_root: res.state_root,\n            parent_hash: res.parent_block_hash,\n            transactions: Object.values(res.transactions).map((value)=>\"transaction_hash\" in value && value.transaction_hash).filter(Boolean)\n        };\n    }\n    parseGetTransactionResponse(res) {\n        if (res.status === \"NOT_RECEIVED\" /* NOT_RECEIVED */  && res.finality_status === \"NOT_RECEIVED\" /* NOT_RECEIVED */ ) {\n            throw new LibraryError();\n        }\n        return {\n            ...res,\n            calldata: \"calldata\" in res.transaction ? res.transaction.calldata : [],\n            contract_class: \"contract_class\" in res.transaction ? res.transaction.contract_class : void 0,\n            entry_point_selector: \"entry_point_selector\" in res.transaction ? res.transaction.entry_point_selector : void 0,\n            max_fee: \"max_fee\" in res.transaction ? res.transaction.max_fee : void 0,\n            nonce: res.transaction.nonce,\n            sender_address: \"sender_address\" in res.transaction ? res.transaction.sender_address : void 0,\n            signature: \"signature\" in res.transaction ? res.transaction.signature : void 0,\n            transaction_hash: \"transaction_hash\" in res.transaction ? res.transaction.transaction_hash : void 0,\n            version: \"version\" in res.transaction ? res.transaction.version : void 0\n        };\n    }\n    parseGetTransactionReceiptResponse(res) {\n        return {\n            ...res,\n            messages_sent: res.l2_to_l1_messages,\n            ...\"revert_error\" in res && {\n                revert_reason: res.revert_error\n            }\n        };\n    }\n    parseFeeEstimateResponse(res) {\n        if (\"overall_fee\" in res) {\n            let gasInfo = {};\n            try {\n                gasInfo = {\n                    gas_consumed: toBigInt(res.gas_usage),\n                    gas_price: toBigInt(res.gas_price)\n                };\n            } catch  {}\n            return {\n                overall_fee: toBigInt(res.overall_fee),\n                ...gasInfo\n            };\n        }\n        return {\n            overall_fee: toBigInt(res.amount)\n        };\n    }\n    parseFeeEstimateBulkResponse(res) {\n        return [].concat(res).map((item)=>{\n            if (\"overall_fee\" in item) {\n                let gasInfo = {};\n                try {\n                    gasInfo = {\n                        gas_consumed: toBigInt(item.gas_usage),\n                        gas_price: toBigInt(item.gas_price)\n                    };\n                } catch  {}\n                return {\n                    overall_fee: toBigInt(item.overall_fee),\n                    ...gasInfo\n                };\n            }\n            return {\n                overall_fee: toBigInt(item.amount)\n            };\n        });\n    }\n    parseSimulateTransactionResponse(res) {\n        const suggestedMaxFee = \"overall_fee\" in res.fee_estimation ? res.fee_estimation.overall_fee : res.fee_estimation.amount;\n        return [\n            {\n                transaction_trace: res.trace,\n                fee_estimation: res.fee_estimation,\n                suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee))\n            }\n        ];\n    }\n    parseCallContractResponse(res) {\n        return {\n            result: res.result\n        };\n    }\n    parseInvokeFunctionResponse(res) {\n        return {\n            transaction_hash: res.transaction_hash\n        };\n    }\n    parseDeployContractResponse(res) {\n        return {\n            transaction_hash: res.transaction_hash,\n            contract_address: res.address\n        };\n    }\n    parseDeclareContractResponse(res) {\n        return {\n            transaction_hash: res.transaction_hash,\n            class_hash: res.class_hash\n        };\n    }\n    parseGetStateUpdateResponse(res) {\n        const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce])=>({\n                contract_address,\n                nonce\n            }));\n        const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(([address, storage_entries])=>({\n                address,\n                storage_entries\n            }));\n        return {\n            ...res,\n            state_diff: {\n                ...res.state_diff,\n                storage_diffs,\n                nonces\n            }\n        };\n    }\n    parseContractClassResponse(res) {\n        const response = isSierra(res) ? res : parseContract(res);\n        return {\n            ...response,\n            abi: typeof response.abi === \"string\" ? JSON.parse(response.abi) : response.abi\n        };\n    }\n};\n// src/utils/url.ts\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\nfunction isUrl(s) {\n    if (!s) {\n        return false;\n    }\n    if (typeof s !== \"string\") {\n        return false;\n    }\n    const match = s.match(protocolAndDomainRE);\n    if (!match) {\n        return false;\n    }\n    const everythingAfterProtocol = match[1];\n    if (!everythingAfterProtocol) {\n        return false;\n    }\n    if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n        return true;\n    }\n    return false;\n}\nfunction buildUrl(baseUrl, defaultPath, urlOrPath) {\n    return isUrl(urlOrPath) ? urlOrPath : url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, urlOrPath ?? defaultPath);\n}\n// src/provider/sequencer.ts\nfunction isEmptyQueryObject(obj) {\n    return obj === void 0 || Object.keys(obj).length === 0 || Object.keys(obj).length === 1 && Object.entries(obj).every(([k, v])=>k === \"blockIdentifier\" && v === null);\n}\nvar defaultOptions2 = {\n    network: \"SN_GOERLI\" /* SN_GOERLI */ ,\n    blockIdentifier: \"pending\" /* pending */ \n};\nvar SequencerProvider = class {\n    constructor(optionsOrProvider = defaultOptions2){\n        this.responseParser = new SequencerAPIResponseParser();\n        if (\"network\" in optionsOrProvider) {\n            this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n            this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\");\n            this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\");\n        } else {\n            this.baseUrl = optionsOrProvider.baseUrl;\n            this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\", optionsOrProvider.feederGatewayUrl);\n            this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\", optionsOrProvider.gatewayUrl);\n        }\n        this.chainId = optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n        this.headers = optionsOrProvider.headers;\n        this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions2.blockIdentifier;\n    }\n    static getNetworkFromName(name) {\n        switch(name){\n            case \"SN_MAIN\" /* SN_MAIN */ :\n            case \"0x534e5f4d41494e\" /* SN_MAIN */ :\n                return \"https://alpha-mainnet.starknet.io\" /* SN_MAIN */ ;\n            case \"SN_GOERLI\" /* SN_GOERLI */ :\n            case \"0x534e5f474f45524c49\" /* SN_GOERLI */ :\n                return \"https://alpha4.starknet.io\" /* SN_GOERLI */ ;\n            default:\n                throw new Error(\"Could not detect base url from NetworkName\");\n        }\n    }\n    static getChainIdFromBaseUrl(baseUrl) {\n        try {\n            const url = new URL(baseUrl);\n            if (url.host.includes(\"mainnet.starknet.io\")) {\n                return \"0x534e5f4d41494e\" /* SN_MAIN */ ;\n            }\n            return \"0x534e5f474f45524c49\" /* SN_GOERLI */ ;\n        } catch  {\n            console.error(`Could not parse baseUrl: ${baseUrl}`);\n            return \"0x534e5f474f45524c49\" /* SN_GOERLI */ ;\n        }\n    }\n    getFetchUrl(endpoint) {\n        const gatewayUrlEndpoints = [\n            \"add_transaction\"\n        ];\n        return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n    }\n    getFetchMethod(endpoint) {\n        const postMethodEndpoints = [\n            \"add_transaction\",\n            \"call_contract\",\n            \"estimate_fee\",\n            \"estimate_message_fee\",\n            \"estimate_fee_bulk\",\n            \"simulate_transaction\"\n        ];\n        return postMethodEndpoints.includes(endpoint) ? \"POST\" : \"GET\";\n    }\n    getQueryString(query) {\n        if (isEmptyQueryObject(query)) {\n            return \"\";\n        }\n        const queryString = Object.entries(query).map(([key, value])=>{\n            if (key === \"blockIdentifier\") {\n                const block = new Block(value);\n                return `${block.queryIdentifier}`;\n            }\n            return `${key}=${value}`;\n        }).join(\"&\");\n        return `?${queryString}`;\n    }\n    getHeaders(method) {\n        if (method === \"POST\") {\n            return {\n                \"Content-Type\": \"application/json\",\n                ...this.headers\n            };\n        }\n        return this.headers;\n    }\n    // typesafe fetch\n    async fetchEndpoint(endpoint, ...[query, request]) {\n        const baseUrl = this.getFetchUrl(endpoint);\n        const method = this.getFetchMethod(endpoint);\n        const queryString = this.getQueryString(query);\n        const url = url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, endpoint, queryString);\n        return this.fetch(url, {\n            method,\n            body: request\n        });\n    }\n    async fetch(endpoint, options) {\n        const url = buildUrl(this.baseUrl, \"\", endpoint);\n        const method = options?.method ?? \"GET\";\n        const headers = this.getHeaders(method);\n        const body = stringify2(options?.body);\n        try {\n            const response = await fetchPonyfill_default(url, {\n                method,\n                body,\n                headers\n            });\n            const textResponse = await response.text();\n            if (!response.ok) {\n                let responseBody;\n                try {\n                    responseBody = parse2(textResponse);\n                } catch  {\n                    throw new HttpError(response.statusText, response.status);\n                }\n                throw new GatewayError(responseBody.message, responseBody.code);\n            }\n            const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse2;\n            return parseChoice(textResponse);\n        } catch (error) {\n            if (error instanceof Error && !(error instanceof LibraryError)) throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n            throw error;\n        }\n    }\n    async getChainId() {\n        return Promise.resolve(this.chainId);\n    }\n    async callContract({ contractAddress, entrypoint: entryPointSelector, calldata = [] }, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"call_contract\", {\n            blockIdentifier\n        }, {\n            // TODO - determine best choice once both are fully supported in devnet\n            // signature: [],\n            // sender_address: contractAddress,\n            contract_address: contractAddress,\n            entry_point_selector: getSelectorFromName(entryPointSelector),\n            calldata: CallData.compile(calldata)\n        }).then(this.responseParser.parseCallContractResponse);\n    }\n    async getBlock(blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_block\", {\n            blockIdentifier\n        }).then(this.responseParser.parseGetBlockResponse);\n    }\n    async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_nonce\", {\n            contractAddress,\n            blockIdentifier\n        });\n    }\n    async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n        const parsedKey = toBigInt(key).toString(10);\n        return this.fetchEndpoint(\"get_storage_at\", {\n            blockIdentifier,\n            contractAddress,\n            key: parsedKey\n        });\n    }\n    async getTransaction(txHash) {\n        const txHashHex = toHex(txHash);\n        return this.fetchEndpoint(\"get_transaction\", {\n            transactionHash: txHashHex\n        }).then((result)=>{\n            if (Object.values(result).length === 1) throw new LibraryError(result.status);\n            return this.responseParser.parseGetTransactionResponse(result);\n        });\n    }\n    async getTransactionReceipt(txHash) {\n        const txHashHex = toHex(txHash);\n        return this.fetchEndpoint(\"get_transaction_receipt\", {\n            transactionHash: txHashHex\n        }).then(this.responseParser.parseGetTransactionReceiptResponse);\n    }\n    async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_full_contract\", {\n            blockIdentifier,\n            contractAddress\n        }).then(this.responseParser.parseContractClassResponse);\n    }\n    async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_class_hash_at\", {\n            blockIdentifier,\n            contractAddress\n        });\n    }\n    async getClassByHash(classHash, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_class_by_hash\", {\n            classHash,\n            blockIdentifier\n        }).then(this.responseParser.parseContractClassResponse);\n    }\n    async getCompiledClassByClassHash(classHash, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_compiled_class_by_class_hash\", {\n            classHash,\n            blockIdentifier\n        });\n    }\n    async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n        let contractClass;\n        if (contractAddress) {\n            contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n        } else if (classHash) {\n            contractClass = await this.getClassByHash(classHash, blockIdentifier);\n        } else {\n            throw Error(\"getContractVersion require contractAddress or classHash\");\n        }\n        if (isSierra(contractClass)) {\n            if (compiler) {\n                const abiTest = getAbiContractVersion(contractClass.abi);\n                return {\n                    cairo: \"1\",\n                    compiler: abiTest.compiler\n                };\n            }\n            return {\n                cairo: \"1\",\n                compiler: void 0\n            };\n        }\n        return {\n            cairo: \"0\",\n            compiler: \"0\"\n        };\n    }\n    async invokeFunction(functionInvocation, details) {\n        return this.fetchEndpoint(\"add_transaction\", void 0, {\n            type: \"INVOKE_FUNCTION\" /* INVOKE */ ,\n            sender_address: functionInvocation.contractAddress,\n            calldata: CallData.compile(functionInvocation.calldata ?? []),\n            signature: signatureToDecimalArray(functionInvocation.signature),\n            nonce: toHex(details.nonce),\n            max_fee: toHex(details.maxFee || 0),\n            version: \"0x1\"\n        }).then(this.responseParser.parseInvokeFunctionResponse);\n    }\n    async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n        return this.fetchEndpoint(\"add_transaction\", void 0, {\n            type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ,\n            contract_address_salt: addressSalt ?? randomAddress(),\n            constructor_calldata: CallData.compile(constructorCalldata ?? []),\n            class_hash: toHex(classHash),\n            max_fee: toHex(details.maxFee || 0),\n            version: toHex(details.version || 0),\n            nonce: toHex(details.nonce),\n            signature: signatureToDecimalArray(signature)\n        }).then(this.responseParser.parseDeployContractResponse);\n    }\n    async declareContract({ senderAddress, contract, signature, compiledClassHash }, details) {\n        if (!isSierra(contract)) {\n            return this.fetchEndpoint(\"add_transaction\", void 0, {\n                type: \"DECLARE\" /* DECLARE */ ,\n                contract_class: contract,\n                nonce: toHex(details.nonce),\n                signature: signatureToDecimalArray(signature),\n                sender_address: senderAddress,\n                max_fee: toHex(details.maxFee || 0),\n                version: toHex(transactionVersion)\n            }).then(this.responseParser.parseDeclareContractResponse);\n        }\n        return this.fetchEndpoint(\"add_transaction\", void 0, {\n            type: \"DECLARE\" /* DECLARE */ ,\n            sender_address: senderAddress,\n            compiled_class_hash: compiledClassHash,\n            contract_class: contract,\n            nonce: toHex(details.nonce),\n            signature: signatureToDecimalArray(signature),\n            max_fee: toHex(details.maxFee || 0),\n            version: toHex(transactionVersion_2)\n        }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n        return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n    }\n    async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n        const transaction = this.buildTransaction({\n            type: \"INVOKE_FUNCTION\" /* INVOKE */ ,\n            ...invocation,\n            ...invocationDetails\n        }, \"fee\");\n        return this.fetchEndpoint(\"estimate_fee\", {\n            blockIdentifier,\n            skipValidate\n        }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n        const transaction = this.buildTransaction({\n            type: \"DECLARE\" /* DECLARE */ ,\n            ...invocation,\n            ...details\n        }, \"fee\");\n        return this.fetchEndpoint(\"estimate_fee\", {\n            blockIdentifier,\n            skipValidate\n        }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n        const transaction = this.buildTransaction({\n            type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ,\n            ...invocation,\n            ...details\n        }, \"fee\");\n        return this.fetchEndpoint(\"estimate_fee\", {\n            blockIdentifier,\n            skipValidate\n        }, transaction).then(this.responseParser.parseFeeEstimateResponse);\n    }\n    async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n        const transactions = invocations.map((it)=>this.buildTransaction(it, \"fee\"));\n        return this.fetchEndpoint(\"estimate_fee_bulk\", {\n            blockIdentifier,\n            skipValidate\n        }, transactions).then(this.responseParser.parseFeeEstimateBulkResponse);\n    }\n    async getCode(contractAddress, blockIdentifier = this.blockIdentifier) {\n        return this.fetchEndpoint(\"get_code\", {\n            contractAddress,\n            blockIdentifier\n        });\n    }\n    async waitForTransaction(txHash, options) {\n        let res;\n        let completed = false;\n        let retries = 0;\n        const retryInterval = options?.retryInterval ?? 5e3;\n        const errorStates = options?.errorStates ?? [\n            \"REJECTED\" /* REJECTED */ ,\n            \"NOT_RECEIVED\" /* NOT_RECEIVED */ ,\n            \"REVERTED\" /* REVERTED */ \n        ];\n        const successStates = options?.successStates ?? [\n            \"SUCCEEDED\" /* SUCCEEDED */ ,\n            \"ACCEPTED_ON_L1\" /* ACCEPTED_ON_L1 */ ,\n            \"ACCEPTED_ON_L2\" /* ACCEPTED_ON_L2 */ \n        ];\n        while(!completed){\n            await wait(retryInterval);\n            res = await this.getTransactionStatus(txHash);\n            if (\"NOT_RECEIVED\" /* NOT_RECEIVED */  === res.finality_status && retries < 3) {\n                retries += 1;\n            } else if (successStates.includes(res.finality_status) || successStates.includes(res.execution_status)) {\n                completed = true;\n            } else if (errorStates.includes(res.finality_status) || errorStates.includes(res.execution_status)) {\n                let message;\n                if (res.tx_failure_reason) {\n                    message = `${res.tx_status}: ${res.tx_failure_reason.code}\n${res.tx_failure_reason.error_message}`;\n                } else if (res.tx_revert_reason) {\n                    message = `${res.tx_status}: ${res.tx_revert_reason}`;\n                } else {\n                    message = res.tx_status;\n                }\n                const error = new Error(message);\n                error.response = res;\n                throw error;\n            }\n        }\n        const txReceipt = await this.getTransactionReceipt(txHash);\n        return txReceipt;\n    }\n    /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */ async getTransactionStatus(txHash) {\n        const txHashHex = toHex(txHash);\n        return this.fetchEndpoint(\"get_transaction_status\", {\n            transactionHash: txHashHex\n        });\n    }\n    /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */ async getContractAddresses() {\n        return this.fetchEndpoint(\"get_contract_addresses\");\n    }\n    /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */ async getTransactionTrace(txHash) {\n        const txHashHex = toHex(txHash);\n        return this.fetchEndpoint(\"get_transaction_trace\", {\n            transactionHash: txHashHex\n        });\n    }\n    async estimateMessageFee({ from_address, to_address, entry_point_selector, payload }, blockIdentifier = this.blockIdentifier) {\n        const validCallL1Handler = {\n            from_address: getDecimalString(from_address),\n            to_address: getHexString(to_address),\n            entry_point_selector: getSelector(entry_point_selector),\n            payload: getHexStringArray(payload)\n        };\n        return this.fetchEndpoint(\"estimate_message_fee\", {\n            blockIdentifier\n        }, validCallL1Handler);\n    }\n    /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */ async getSimulateTransaction(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false, skipExecute = false }) {\n        if (invocations.length > 1) {\n            console.warn(\"Sequencer simulate process only first element from invocations list\");\n        }\n        if (skipExecute) {\n            console.warn(\"Sequencer can't skip account __execute__\");\n        }\n        const transaction = this.buildTransaction(invocations[0]);\n        return this.fetchEndpoint(\"simulate_transaction\", {\n            blockIdentifier,\n            skipValidate: skipValidate ?? false\n        }, transaction).then(this.responseParser.parseSimulateTransactionResponse);\n    }\n    async getStateUpdate(blockIdentifier = this.blockIdentifier) {\n        const args = new Block(blockIdentifier).sequencerIdentifier;\n        return this.fetchEndpoint(\"get_state_update\", {\n            ...args\n        }).then(this.responseParser.parseGetStateUpdateResponse);\n    }\n    // consider adding an optional trace retrieval parameter to the getBlock method\n    async getBlockTraces(blockIdentifier = this.blockIdentifier) {\n        const args = new Block(blockIdentifier).sequencerIdentifier;\n        return this.fetchEndpoint(\"get_block_traces\", {\n            ...args\n        });\n    }\n    async getStarkName(address, StarknetIdContract2) {\n        return getStarkName(this, address, StarknetIdContract2);\n    }\n    async getAddressFromStarkName(name, StarknetIdContract2) {\n        return getAddressFromStarkName(this, name, StarknetIdContract2);\n    }\n    /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */ buildTransaction(invocation, versionType) {\n        const defaultVersions = getVersionsByType(versionType);\n        const details = {\n            signature: signatureToDecimalArray(invocation.signature),\n            nonce: toHex(invocation.nonce)\n        };\n        if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */ ) {\n            return {\n                type: invocation.type,\n                sender_address: invocation.contractAddress,\n                calldata: CallData.compile(invocation.calldata ?? []),\n                version: toHex(invocation.version || defaultVersions.v1),\n                ...details\n            };\n        }\n        if (invocation.type === \"DECLARE\" /* DECLARE */ ) {\n            if (!isSierra(invocation.contract)) {\n                return {\n                    type: invocation.type,\n                    contract_class: invocation.contract,\n                    sender_address: invocation.senderAddress,\n                    version: toHex(invocation.version || defaultVersions.v1),\n                    // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n                    ...details\n                };\n            }\n            return {\n                type: invocation.type,\n                contract_class: invocation.contract,\n                compiled_class_hash: invocation.compiledClassHash,\n                sender_address: invocation.senderAddress,\n                version: toHex(invocation.version || defaultVersions.v2),\n                // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n                ...details\n            };\n        }\n        if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ) {\n            return {\n                type: invocation.type,\n                constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n                class_hash: toHex(invocation.classHash),\n                contract_address_salt: toHex(invocation.addressSalt || 0),\n                version: toHex(invocation.version || defaultVersions.v1),\n                ...details\n            };\n        }\n        throw Error(\"Sequencer buildTransaction received unknown TransactionType\");\n    }\n};\n// src/provider/default.ts\nvar Provider = class {\n    constructor(providerOrOptions){\n        if (providerOrOptions instanceof Provider) {\n            this.provider = providerOrOptions.provider;\n        } else if (providerOrOptions instanceof RpcProvider || providerOrOptions instanceof SequencerProvider) {\n            this.provider = providerOrOptions;\n        } else if (providerOrOptions && \"rpc\" in providerOrOptions) {\n            this.provider = new RpcProvider(providerOrOptions.rpc);\n        } else if (providerOrOptions && \"sequencer\" in providerOrOptions) {\n            this.provider = new SequencerProvider(providerOrOptions.sequencer);\n        } else {\n            this.provider = new RpcProvider();\n        }\n    }\n    async getChainId() {\n        return this.provider.getChainId();\n    }\n    async getBlock(blockIdentifier) {\n        return this.provider.getBlock(blockIdentifier);\n    }\n    async getClassAt(contractAddress, blockIdentifier) {\n        return this.provider.getClassAt(contractAddress, blockIdentifier);\n    }\n    async getClassHashAt(contractAddress, blockIdentifier) {\n        return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n    }\n    getClassByHash(classHash) {\n        return this.provider.getClassByHash(classHash);\n    }\n    async getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier) {\n        return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n    }\n    async getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate) {\n        return this.provider.getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate);\n    }\n    async getEstimateFeeBulk(invocations, options) {\n        return this.provider.getEstimateFeeBulk(invocations, options);\n    }\n    async getNonceForAddress(contractAddress, blockIdentifier) {\n        return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n    }\n    async getStorageAt(contractAddress, key, blockIdentifier) {\n        return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n    }\n    async getTransaction(txHash) {\n        return this.provider.getTransaction(txHash);\n    }\n    async getTransactionReceipt(txHash) {\n        return this.provider.getTransactionReceipt(txHash);\n    }\n    async callContract(request, blockIdentifier) {\n        return this.provider.callContract(request, blockIdentifier);\n    }\n    async invokeFunction(functionInvocation, details) {\n        return this.provider.invokeFunction(functionInvocation, details);\n    }\n    async deployAccountContract(payload, details) {\n        return this.provider.deployAccountContract(payload, details);\n    }\n    async declareContract(transaction, details) {\n        return this.provider.declareContract(transaction, details);\n    }\n    async getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n        return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n    }\n    getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n        return this.provider.getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate);\n    }\n    async getCode(contractAddress, blockIdentifier) {\n        return this.provider.getCode(contractAddress, blockIdentifier);\n    }\n    async waitForTransaction(txHash, options) {\n        return this.provider.waitForTransaction(txHash, options);\n    }\n    async getSimulateTransaction(invocations, options) {\n        return this.provider.getSimulateTransaction(invocations, options);\n    }\n    async getStateUpdate(blockIdentifier) {\n        return this.provider.getStateUpdate(blockIdentifier);\n    }\n    async getStarkName(address, StarknetIdContract2) {\n        return getStarkName(this, address, StarknetIdContract2);\n    }\n    async getAddressFromStarkName(name, StarknetIdContract2) {\n        return getAddressFromStarkName(this, name, StarknetIdContract2);\n    }\n    async getContractVersion(contractAddress, classHash, options) {\n        return this.provider.getContractVersion(contractAddress, classHash, options);\n    }\n};\n// src/signer/interface.ts\nvar SignerInterface = class {\n};\n// src/utils/transaction.ts\nvar transaction_exports = {};\n__export(transaction_exports, {\n    fromCallsToExecuteCalldata: ()=>fromCallsToExecuteCalldata,\n    fromCallsToExecuteCalldataWithNonce: ()=>fromCallsToExecuteCalldataWithNonce,\n    fromCallsToExecuteCalldata_cairo1: ()=>fromCallsToExecuteCalldata_cairo1,\n    getExecuteCalldata: ()=>getExecuteCalldata,\n    transformCallsToMulticallArrays: ()=>transformCallsToMulticallArrays,\n    transformCallsToMulticallArrays_cairo1: ()=>transformCallsToMulticallArrays_cairo1\n});\nvar transformCallsToMulticallArrays = (calls)=>{\n    const callArray = [];\n    const calldata = [];\n    calls.forEach((call)=>{\n        const data = CallData.compile(call.calldata || []);\n        callArray.push({\n            to: toBigInt(call.contractAddress).toString(10),\n            selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n            data_offset: calldata.length.toString(),\n            data_len: data.length.toString()\n        });\n        calldata.push(...data);\n    });\n    return {\n        callArray,\n        calldata: CallData.compile({\n            calldata\n        })\n    };\n};\nvar fromCallsToExecuteCalldata = (calls)=>{\n    const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n    const compiledCalls = CallData.compile({\n        callArray\n    });\n    return [\n        ...compiledCalls,\n        ...calldata\n    ];\n};\nvar fromCallsToExecuteCalldataWithNonce = (calls, nonce)=>{\n    return [\n        ...fromCallsToExecuteCalldata(calls),\n        toBigInt(nonce).toString()\n    ];\n};\nvar transformCallsToMulticallArrays_cairo1 = (calls)=>{\n    const callArray = calls.map((call)=>({\n            to: toBigInt(call.contractAddress).toString(10),\n            selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n            calldata: CallData.compile(call.calldata || [])\n        }));\n    return callArray;\n};\nvar fromCallsToExecuteCalldata_cairo1 = (calls)=>{\n    const orderCalls = calls.map((call)=>({\n            contractAddress: call.contractAddress,\n            entrypoint: call.entrypoint,\n            calldata: Array.isArray(call.calldata) && \"__compiled__\" in call.calldata ? call.calldata : CallData.compile(call.calldata)\n        }));\n    return CallData.compile({\n        orderCalls\n    });\n};\nvar getExecuteCalldata = (calls, cairoVersion = \"0\")=>{\n    if (cairoVersion === \"1\") {\n        return fromCallsToExecuteCalldata_cairo1(calls);\n    }\n    return fromCallsToExecuteCalldata(calls);\n};\n// src/utils/typedData.ts\nvar typedData_exports = {};\n__export(typedData_exports, {\n    encodeData: ()=>encodeData,\n    encodeType: ()=>encodeType,\n    encodeValue: ()=>encodeValue,\n    getDependencies: ()=>getDependencies,\n    getMessageHash: ()=>getMessageHash,\n    getStructHash: ()=>getStructHash,\n    getTypeHash: ()=>getTypeHash,\n    isMerkleTreeType: ()=>isMerkleTreeType,\n    prepareSelector: ()=>prepareSelector\n});\n// src/utils/merkle.ts\nvar merkle_exports = {};\n__export(merkle_exports, {\n    MerkleTree: ()=>MerkleTree,\n    proofMerklePath: ()=>proofMerklePath\n});\nvar MerkleTree = class {\n    constructor(leafHashes){\n        this.branches = [];\n        this.leaves = leafHashes;\n        this.root = this.build(leafHashes);\n    }\n    /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */ build(leaves) {\n        if (leaves.length === 1) {\n            return leaves[0];\n        }\n        if (leaves.length !== this.leaves.length) {\n            this.branches.push(leaves);\n        }\n        const newLeaves = [];\n        for(let i = 0; i < leaves.length; i += 2){\n            if (i + 1 === leaves.length) {\n                newLeaves.push(MerkleTree.hash(leaves[i], \"0x0\"));\n            } else {\n                newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n            }\n        }\n        return this.build(newLeaves);\n    }\n    /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */ static hash(a, b) {\n        const [aSorted, bSorted] = [\n            toBigInt(a),\n            toBigInt(b)\n        ].sort((x, y)=>x >= y ? 1 : -1);\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(aSorted, bSorted);\n    }\n    /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */ getProof(leaf, branch = this.leaves, hashPath = []) {\n        const index = branch.indexOf(leaf);\n        if (index === -1) {\n            throw new Error(\"leaf not found\");\n        }\n        if (branch.length === 1) {\n            return hashPath;\n        }\n        const isLeft = index % 2 === 0;\n        const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? \"0x0\";\n        const newHashPath = [\n            ...hashPath,\n            neededBranch\n        ];\n        const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex((b)=>b.length === branch.length);\n        const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [\n            this.root\n        ];\n        return this.getProof(MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf), nextBranch, newHashPath);\n    }\n};\nfunction proofMerklePath(root, leaf, path) {\n    if (path.length === 0) {\n        return root === leaf;\n    }\n    const [next, ...rest] = path;\n    return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n// src/utils/typedData.ts\nfunction getHex(value) {\n    try {\n        return toHex(value);\n    } catch (e) {\n        if (typeof value === \"string\") {\n            return toHex(encodeShortString(value));\n        }\n        throw new Error(`Invalid BigNumberish: ${value}`);\n    }\n}\nvar validateTypedData = (data)=>{\n    const typedData = data;\n    const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n    return valid;\n};\nfunction prepareSelector(selector) {\n    return isHex(selector) ? selector : getSelectorFromName(selector);\n}\nfunction isMerkleTreeType(type) {\n    return type.type === \"merkletree\";\n}\nvar getDependencies = (types, type, dependencies = [])=>{\n    if (type[type.length - 1] === \"*\") {\n        type = type.slice(0, -1);\n    }\n    if (dependencies.includes(type)) {\n        return dependencies;\n    }\n    if (!types[type]) {\n        return dependencies;\n    }\n    return [\n        type,\n        ...types[type].reduce((previous, t)=>[\n                ...previous,\n                ...getDependencies(types, t.type, previous).filter((dependency)=>!previous.includes(dependency))\n            ], [])\n    ];\n};\nfunction getMerkleTreeType(types, ctx) {\n    if (ctx.parent && ctx.key) {\n        const parentType = types[ctx.parent];\n        const merkleType = parentType.find((t)=>t.name === ctx.key);\n        const isMerkleTree = isMerkleTreeType(merkleType);\n        if (!isMerkleTree) {\n            throw new Error(`${ctx.key} is not a merkle tree`);\n        }\n        if (merkleType.contains.endsWith(\"*\")) {\n            throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n        }\n        return merkleType.contains;\n    }\n    return \"raw\";\n}\nvar encodeType = (types, type)=>{\n    const [primary, ...dependencies] = getDependencies(types, type);\n    const newTypes = !primary ? [] : [\n        primary,\n        ...dependencies.sort()\n    ];\n    return newTypes.map((dependency)=>{\n        return `${dependency}(${types[dependency].map((t)=>`${t.name}:${t.type}`)})`;\n    }).join(\"\");\n};\nvar getTypeHash = (types, type)=>{\n    return getSelectorFromName(encodeType(types, type));\n};\nvar encodeValue = (types, type, data, ctx = {})=>{\n    if (types[type]) {\n        return [\n            type,\n            getStructHash(types, type, data)\n        ];\n    }\n    if (Object.keys(types).map((x)=>`${x}*`).includes(type)) {\n        const structHashes = data.map((struct)=>{\n            return getStructHash(types, type.slice(0, -1), struct);\n        });\n        return [\n            type,\n            computeHashOnElements(structHashes)\n        ];\n    }\n    if (type === \"merkletree\") {\n        const merkleTreeType = getMerkleTreeType(types, ctx);\n        const structHashes = data.map((struct)=>{\n            return encodeValue(types, merkleTreeType, struct)[1];\n        });\n        const { root } = new MerkleTree(structHashes);\n        return [\n            \"felt\",\n            root\n        ];\n    }\n    if (type === \"felt*\") {\n        return [\n            \"felt*\",\n            computeHashOnElements(data)\n        ];\n    }\n    if (type === \"selector\") {\n        return [\n            \"felt\",\n            prepareSelector(data)\n        ];\n    }\n    return [\n        type,\n        getHex(data)\n    ];\n};\nvar encodeData = (types, type, data)=>{\n    const [returnTypes, values] = types[type].reduce(([ts, vs], field)=>{\n        if (data[field.name] === void 0 || data[field.name] === null) {\n            throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n        }\n        const value = data[field.name];\n        const [t, encodedValue] = encodeValue(types, field.type, value, {\n            parent: type,\n            key: field.name\n        });\n        return [\n            [\n                ...ts,\n                t\n            ],\n            [\n                ...vs,\n                encodedValue\n            ]\n        ];\n    }, [\n        [\n            \"felt\"\n        ],\n        [\n            getTypeHash(types, type)\n        ]\n    ]);\n    return [\n        returnTypes,\n        values\n    ];\n};\nvar getStructHash = (types, type, data)=>{\n    return computeHashOnElements(encodeData(types, type, data)[1]);\n};\nvar getMessageHash = (typedData, account)=>{\n    if (!validateTypedData(typedData)) {\n        throw new Error(\"Typed data does not match JSON schema\");\n    }\n    const message = [\n        encodeShortString(\"StarkNet Message\"),\n        getStructHash(typedData.types, \"StarkNetDomain\", typedData.domain),\n        account,\n        getStructHash(typedData.types, typedData.primaryType, typedData.message)\n    ];\n    return computeHashOnElements(message);\n};\n// src/signer/default.ts\nvar Signer = class {\n    constructor(pk = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey()){\n        this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n    }\n    async getPubKey() {\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey(this.pk);\n    }\n    async signMessage(typedData, accountAddress) {\n        const msgHash = getMessageHash(typedData, accountAddress);\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n    }\n    async signTransaction(transactions, transactionsDetail, abis) {\n        if (abis && abis.length !== transactions.length) {\n            throw new Error(\"ABI must be provided for each transaction or no transaction\");\n        }\n        const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n        const msgHash = calculateTransactionHash(transactionsDetail.walletAddress, transactionsDetail.version, calldata, transactionsDetail.maxFee, transactionsDetail.chainId, transactionsDetail.nonce);\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n    }\n    async signDeployAccountTransaction({ classHash, contractAddress, constructorCalldata, addressSalt, maxFee, version, chainId, nonce }) {\n        const msgHash = calculateDeployAccountTransactionHash(contractAddress, classHash, CallData.compile(constructorCalldata), addressSalt, version, maxFee, chainId, nonce);\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n    }\n    async signDeclareTransaction({ classHash, senderAddress, chainId, maxFee, version, nonce, compiledClassHash }) {\n        const msgHash = calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash);\n        return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n    }\n};\n// src/utils/events.ts\nfunction parseUDCEvent(txReceipt) {\n    if (!txReceipt.events) {\n        throw new Error(\"UDC emitted event is empty\");\n    }\n    const event = txReceipt.events.find((it)=>cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)) || {\n        data: []\n    };\n    return {\n        transaction_hash: txReceipt.transaction_hash,\n        contract_address: event.data[0],\n        address: event.data[0],\n        deployer: event.data[1],\n        unique: event.data[2],\n        classHash: event.data[3],\n        calldata_len: event.data[4],\n        calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n        salt: event.data[event.data.length - 1]\n    };\n}\n// src/account/default.ts\nvar Account = class extends Provider {\n    constructor(providerOrOptions, address, pkOrSigner, cairoVersion){\n        super(providerOrOptions);\n        this.deploySelf = this.deployAccount;\n        this.address = address.toLowerCase();\n        this.signer = typeof pkOrSigner === \"string\" || pkOrSigner instanceof Uint8Array ? new Signer(pkOrSigner) : pkOrSigner;\n        if (cairoVersion) {\n            this.cairoVersion = cairoVersion.toString();\n        }\n    }\n    async getNonce(blockIdentifier) {\n        return super.getNonceForAddress(this.address, blockIdentifier);\n    }\n    async getNonceSafe(nonce) {\n        try {\n            return toBigInt(nonce ?? await this.getNonce());\n        } catch (error) {\n            return 0n;\n        }\n    }\n    /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */ async getCairoVersion(classHash) {\n        if (!this.cairoVersion) {\n            const { cairo } = classHash ? await super.getContractVersion(void 0, classHash) : await super.getContractVersion(this.address);\n            this.cairoVersion = cairo;\n        }\n        return this.cairoVersion;\n    }\n    async estimateFee(calls, estimateFeeDetails) {\n        return this.estimateInvokeFee(calls, estimateFeeDetails);\n    }\n    async estimateInvokeFee(calls, { nonce: providedNonce, blockIdentifier, skipValidate } = {}) {\n        const transactions = Array.isArray(calls) ? calls : [\n            calls\n        ];\n        const nonce = toBigInt(providedNonce ?? await this.getNonce());\n        const version = toBigInt(feeTransactionVersion);\n        const chainId = await this.getChainId();\n        const signerDetails = {\n            walletAddress: this.address,\n            nonce,\n            maxFee: ZERO,\n            version,\n            chainId,\n            cairoVersion: await this.getCairoVersion()\n        };\n        const invocation = await this.buildInvocation(transactions, signerDetails);\n        const response = await super.getInvokeEstimateFee({\n            ...invocation\n        }, {\n            version,\n            nonce\n        }, blockIdentifier, skipValidate);\n        const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n        return {\n            ...response,\n            suggestedMaxFee\n        };\n    }\n    async estimateDeclareFee({ contract, classHash: providedClassHash, casm, compiledClassHash }, { blockIdentifier, nonce: providedNonce, skipValidate } = {}) {\n        const nonce = toBigInt(providedNonce ?? await this.getNonce());\n        const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n        const chainId = await this.getChainId();\n        const declareContractTransaction = await this.buildDeclarePayload({\n            classHash: providedClassHash,\n            contract,\n            casm,\n            compiledClassHash\n        }, {\n            nonce,\n            chainId,\n            version,\n            walletAddress: this.address,\n            maxFee: ZERO,\n            cairoVersion: void 0\n        });\n        const response = await super.getDeclareEstimateFee(declareContractTransaction, {\n            version,\n            nonce\n        }, blockIdentifier, skipValidate);\n        const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n        return {\n            ...response,\n            suggestedMaxFee\n        };\n    }\n    async estimateAccountDeployFee({ classHash, addressSalt = 0, constructorCalldata = [], contractAddress: providedContractAddress }, { blockIdentifier, skipValidate } = {}) {\n        const version = toBigInt(feeTransactionVersion);\n        const nonce = ZERO;\n        const chainId = await this.getChainId();\n        const payload = await this.buildAccountDeployPayload({\n            classHash,\n            addressSalt,\n            constructorCalldata,\n            contractAddress: providedContractAddress\n        }, {\n            nonce,\n            chainId,\n            version,\n            walletAddress: this.address,\n            // unused parameter\n            maxFee: ZERO,\n            cairoVersion: void 0\n        });\n        const response = await super.getDeployAccountEstimateFee({\n            ...payload\n        }, {\n            version,\n            nonce\n        }, blockIdentifier, skipValidate);\n        const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n        return {\n            ...response,\n            suggestedMaxFee\n        };\n    }\n    async estimateDeployFee(payload, transactionsDetail) {\n        const calls = this.buildUDCContractPayload(payload);\n        return this.estimateInvokeFee(calls, transactionsDetail);\n    }\n    async estimateFeeBulk(invocations, { nonce, blockIdentifier, skipValidate } = {}) {\n        const accountInvocations = await this.accountInvocationsFactory(invocations, {\n            versions: [\n                feeTransactionVersion,\n                feeTransactionVersion_2\n            ],\n            nonce,\n            blockIdentifier\n        });\n        const response = await super.getEstimateFeeBulk(accountInvocations, {\n            blockIdentifier,\n            skipValidate\n        });\n        return [].concat(response).map((elem)=>{\n            const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n            return {\n                ...elem,\n                suggestedMaxFee\n            };\n        });\n    }\n    async buildInvocation(call, signerDetails) {\n        const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n        const signature = await this.signer.signTransaction(call, signerDetails);\n        return {\n            contractAddress: this.address,\n            calldata,\n            signature\n        };\n    }\n    async execute(calls, abis = void 0, transactionsDetail = {}) {\n        const transactions = Array.isArray(calls) ? calls : [\n            calls\n        ];\n        const nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n        const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee({\n            type: \"INVOKE_FUNCTION\" /* INVOKE */ ,\n            payload: calls\n        }, transactionsDetail);\n        const version = toBigInt(transactionVersion);\n        const chainId = await this.getChainId();\n        const signerDetails = {\n            walletAddress: this.address,\n            nonce,\n            maxFee,\n            version,\n            chainId,\n            cairoVersion: await this.getCairoVersion()\n        };\n        const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n        const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n        return this.invokeFunction({\n            contractAddress: this.address,\n            calldata,\n            signature\n        }, {\n            nonce,\n            maxFee,\n            version\n        });\n    }\n    /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */ async declareIfNot(payload, transactionsDetail = {}) {\n        const declareContractPayload = extractContractHashes(payload);\n        try {\n            await this.getClassByHash(declareContractPayload.classHash);\n        } catch (error) {\n            return this.declare(payload, transactionsDetail);\n        }\n        return {\n            transaction_hash: \"\",\n            class_hash: declareContractPayload.classHash\n        };\n    }\n    async declare(payload, transactionsDetail = {}) {\n        const declareContractPayload = extractContractHashes(payload);\n        const details = {};\n        details.nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n        details.maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee({\n            type: \"DECLARE\" /* DECLARE */ ,\n            payload: declareContractPayload\n        }, transactionsDetail);\n        details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n        details.chainId = await this.getChainId();\n        const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n            ...details,\n            walletAddress: this.address,\n            cairoVersion: void 0\n        });\n        return this.declareContract(declareContractTransaction, details);\n    }\n    async deploy(payload, details) {\n        const params = [].concat(payload).map((it)=>{\n            const { classHash, salt, unique = true, constructorCalldata = [] } = it;\n            const compiledConstructorCallData = CallData.compile(constructorCalldata);\n            const deploySalt = salt ?? randomAddress();\n            return {\n                call: {\n                    contractAddress: UDC.ADDRESS,\n                    entrypoint: UDC.ENTRYPOINT,\n                    calldata: [\n                        classHash,\n                        deploySalt,\n                        toCairoBool(unique),\n                        compiledConstructorCallData.length,\n                        ...compiledConstructorCallData\n                    ]\n                },\n                address: calculateContractAddressFromHash(unique ? _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(this.address, deploySalt) : deploySalt, classHash, compiledConstructorCallData, unique ? UDC.ADDRESS : 0)\n            };\n        });\n        const calls = params.map((it)=>it.call);\n        const addresses = params.map((it)=>it.address);\n        const invokeResponse = await this.execute(calls, void 0, details);\n        return {\n            ...invokeResponse,\n            contract_address: addresses\n        };\n    }\n    async deployContract(payload, details) {\n        const deployTx = await this.deploy(payload, details);\n        const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n        return parseUDCEvent(txReceipt);\n    }\n    async declareAndDeploy(payload, details) {\n        const { constructorCalldata, salt, unique } = payload;\n        let declare = await this.declareIfNot(payload, details);\n        if (declare.transaction_hash !== \"\") {\n            const tx = await this.waitForTransaction(declare.transaction_hash);\n            declare = {\n                ...declare,\n                ...tx\n            };\n        }\n        const deploy = await this.deployContract({\n            classHash: declare.class_hash,\n            salt,\n            unique,\n            constructorCalldata\n        }, details);\n        return {\n            declare: {\n                ...declare\n            },\n            deploy\n        };\n    }\n    async deployAccount({ classHash, constructorCalldata = [], addressSalt = 0, contractAddress: providedContractAddress }, transactionsDetail = {}) {\n        const version = toBigInt(transactionVersion);\n        const nonce = ZERO;\n        const chainId = await this.getChainId();\n        const compiledCalldata = CallData.compile(constructorCalldata);\n        const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n        const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee({\n            type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ,\n            payload: {\n                classHash,\n                constructorCalldata: compiledCalldata,\n                addressSalt,\n                contractAddress\n            }\n        }, transactionsDetail);\n        const signature = await this.signer.signDeployAccountTransaction({\n            classHash,\n            constructorCalldata: compiledCalldata,\n            contractAddress,\n            addressSalt,\n            chainId,\n            maxFee,\n            version,\n            nonce\n        });\n        return this.deployAccountContract({\n            classHash,\n            addressSalt,\n            constructorCalldata,\n            signature\n        }, {\n            nonce,\n            maxFee,\n            version\n        });\n    }\n    async signMessage(typedData) {\n        return this.signer.signMessage(typedData, this.address);\n    }\n    async hashMessage(typedData) {\n        return getMessageHash(typedData, this.address);\n    }\n    async verifyMessageHash(hash, signature) {\n        try {\n            await this.callContract({\n                contractAddress: this.address,\n                entrypoint: \"isValidSignature\",\n                calldata: CallData.compile({\n                    hash: toBigInt(hash).toString(),\n                    signature: formatSignature(signature)\n                })\n            });\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    async verifyMessage(typedData, signature) {\n        const hash = await this.hashMessage(typedData);\n        return this.verifyMessageHash(hash, signature);\n    }\n    async getSuggestedMaxFee({ type, payload }, details) {\n        let feeEstimate;\n        switch(type){\n            case \"INVOKE_FUNCTION\" /* INVOKE */ :\n                feeEstimate = await this.estimateInvokeFee(payload, details);\n                break;\n            case \"DECLARE\" /* DECLARE */ :\n                feeEstimate = await this.estimateDeclareFee(payload, details);\n                break;\n            case \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ :\n                feeEstimate = await this.estimateAccountDeployFee(payload, details);\n                break;\n            case \"DEPLOY\" /* DEPLOY */ :\n                feeEstimate = await this.estimateDeployFee(payload, details);\n                break;\n            default:\n                feeEstimate = {\n                    suggestedMaxFee: ZERO,\n                    overall_fee: ZERO\n                };\n                break;\n        }\n        return feeEstimate.suggestedMaxFee;\n    }\n    /**\n   * will be renamed to buildDeclareContractTransaction\n   */ async buildDeclarePayload(payload, { nonce, chainId, version, walletAddress, maxFee }) {\n        const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n        const compressedCompiledContract = parseContract(contract);\n        const signature = await this.signer.signDeclareTransaction({\n            classHash,\n            compiledClassHash,\n            senderAddress: walletAddress,\n            chainId,\n            maxFee,\n            version,\n            nonce\n        });\n        return {\n            senderAddress: walletAddress,\n            signature,\n            contract: compressedCompiledContract,\n            compiledClassHash\n        };\n    }\n    async buildAccountDeployPayload({ classHash, addressSalt = 0, constructorCalldata = [], contractAddress: providedContractAddress }, { nonce, chainId, version, maxFee }) {\n        const compiledCalldata = CallData.compile(constructorCalldata);\n        const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n        const signature = await this.signer.signDeployAccountTransaction({\n            classHash,\n            contractAddress,\n            chainId,\n            maxFee,\n            version,\n            nonce,\n            addressSalt,\n            constructorCalldata: compiledCalldata\n        });\n        return {\n            classHash,\n            addressSalt,\n            constructorCalldata: compiledCalldata,\n            signature\n        };\n    }\n    buildUDCContractPayload(payload) {\n        const calls = [].concat(payload).map((it)=>{\n            const { classHash, salt = \"0\", unique = true, constructorCalldata = [] } = it;\n            const compiledConstructorCallData = CallData.compile(constructorCalldata);\n            return {\n                contractAddress: UDC.ADDRESS,\n                entrypoint: UDC.ENTRYPOINT,\n                calldata: [\n                    classHash,\n                    salt,\n                    toCairoBool(unique),\n                    compiledConstructorCallData.length,\n                    ...compiledConstructorCallData\n                ]\n            };\n        });\n        return calls;\n    }\n    async simulateTransaction(invocations, { nonce, blockIdentifier, skipValidate, skipExecute } = {}) {\n        const accountInvocations = await this.accountInvocationsFactory(invocations, {\n            versions: [\n                transactionVersion,\n                transactionVersion_2\n            ],\n            nonce,\n            blockIdentifier\n        });\n        return super.getSimulateTransaction(accountInvocations, {\n            blockIdentifier,\n            skipValidate,\n            skipExecute\n        });\n    }\n    async accountInvocationsFactory(invocations, { versions, nonce, blockIdentifier }) {\n        const version = versions[0];\n        const safeNonce = await this.getNonceSafe(nonce);\n        const chainId = await this.getChainId();\n        const tx0Payload = \"payload\" in invocations[0] ? invocations[0].payload : invocations[0];\n        const cairoVersion = invocations[0].type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */  ? await this.getCairoVersion(tx0Payload.classHash) : await this.getCairoVersion();\n        return Promise.all([].concat(invocations).map(async (transaction, index)=>{\n            const txPayload = \"payload\" in transaction ? transaction.payload : transaction;\n            const signerDetails = {\n                walletAddress: this.address,\n                nonce: toBigInt(Number(safeNonce) + index),\n                maxFee: ZERO,\n                version,\n                chainId,\n                cairoVersion\n            };\n            const common = {\n                type: transaction.type,\n                version,\n                nonce: toBigInt(Number(safeNonce) + index),\n                blockIdentifier\n            };\n            if (transaction.type === \"INVOKE_FUNCTION\" /* INVOKE */ ) {\n                const payload = await this.buildInvocation([].concat(txPayload), signerDetails);\n                return {\n                    ...common,\n                    ...payload\n                };\n            }\n            if (transaction.type === \"DECLARE\" /* DECLARE */ ) {\n                signerDetails.version = !isSierra(txPayload.contract) ? toBigInt(versions[0]) : toBigInt(versions[1]);\n                const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n                return {\n                    ...common,\n                    ...payload,\n                    version: signerDetails.version\n                };\n            }\n            if (transaction.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ) {\n                const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n                return {\n                    ...common,\n                    ...payload\n                };\n            }\n            if (transaction.type === \"DEPLOY\" /* DEPLOY */ ) {\n                const calls = this.buildUDCContractPayload(txPayload);\n                const payload = await this.buildInvocation(calls, signerDetails);\n                return {\n                    ...common,\n                    ...payload,\n                    type: \"INVOKE_FUNCTION\" /* INVOKE */ \n                };\n            }\n            throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n        }));\n    }\n    async getStarkName(address = this.address, StarknetIdContract2) {\n        return super.getStarkName(address, StarknetIdContract2);\n    }\n};\n// src/provider/interface.ts\nvar ProviderInterface = class {\n};\n// src/provider/index.ts\nvar defaultProvider = new Provider({\n    rpc: {\n        default: true\n    }\n});\n// src/account/interface.ts\nvar AccountInterface = class extends ProviderInterface {\n};\n// src/utils/events/index.ts\nvar events_exports = {};\n__export(events_exports, {\n    getAbiEvents: ()=>getAbiEvents,\n    parseEvents: ()=>parseEvents\n});\nfunction getAbiEvents(abi) {\n    return abi.filter((abiEntry)=>abiEntry.type === \"event\" && (abiEntry.size || abiEntry.kind !== \"enum\")).reduce((acc, abiEntry)=>{\n        const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(\":\") + 1);\n        const abiEntryMod = {\n            ...abiEntry\n        };\n        abiEntryMod.name = entryName;\n        return {\n            ...acc,\n            [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod\n        };\n    }, {});\n}\nfunction parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {\n    const ret = providerReceivedEvents.flat().reduce((acc, recEvent)=>{\n        const abiEvent = abiEvents[recEvent.keys[0]];\n        if (!abiEvent) {\n            return acc;\n        }\n        const parsedEvent = {};\n        parsedEvent[abiEvent.name] = {};\n        recEvent.keys.shift();\n        const keysIter = recEvent.keys[Symbol.iterator]();\n        const dataIter = recEvent.data[Symbol.iterator]();\n        const abiEventKeys = abiEvent.members?.filter((it)=>it.kind === \"key\") || abiEvent.keys;\n        const abiEventData = abiEvent.members?.filter((it)=>it.kind === \"data\") || abiEvent.data;\n        abiEventKeys.forEach((key)=>{\n            parsedEvent[abiEvent.name][key.name] = responseParser(keysIter, key, abiStructs, abiEnums, parsedEvent[abiEvent.name]);\n        });\n        abiEventData.forEach((data)=>{\n            parsedEvent[abiEvent.name][data.name] = responseParser(dataIter, data, abiStructs, abiEnums, parsedEvent[abiEvent.name]);\n        });\n        acc.push(parsedEvent);\n        return acc;\n    }, []);\n    return ret;\n}\n// src/contract/default.ts\nvar splitArgsAndOptions = (args)=>{\n    const options = [\n        \"blockIdentifier\",\n        \"parseRequest\",\n        \"parseResponse\",\n        \"formatResponse\",\n        \"maxFee\",\n        \"nonce\",\n        \"signature\",\n        \"addressSalt\"\n    ];\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === \"object\" && options.some((x)=>x in lastArg)) {\n        return {\n            args,\n            options: args.pop()\n        };\n    }\n    return {\n        args\n    };\n};\nfunction buildCall(contract, functionAbi) {\n    return async function(...args) {\n        const params = splitArgsAndOptions(args);\n        return contract.call(functionAbi.name, params.args, {\n            parseRequest: true,\n            parseResponse: true,\n            ...params.options\n        });\n    };\n}\nfunction buildInvoke(contract, functionAbi) {\n    return async function(...args) {\n        const params = splitArgsAndOptions(args);\n        return contract.invoke(functionAbi.name, params.args, {\n            parseRequest: true,\n            ...params.options\n        });\n    };\n}\nfunction buildDefault(contract, functionAbi) {\n    if (functionAbi.stateMutability === \"view\" || functionAbi.state_mutability === \"view\") {\n        return buildCall(contract, functionAbi);\n    }\n    return buildInvoke(contract, functionAbi);\n}\nfunction buildPopulate(contract, functionAbi) {\n    return function(...args) {\n        return contract.populate(functionAbi.name, args);\n    };\n}\nfunction buildEstimate(contract, functionAbi) {\n    return function(...args) {\n        return contract.estimate(functionAbi.name, args);\n    };\n}\nfunction getCalldata(args, callback) {\n    if (Array.isArray(args) && \"__compiled__\" in args) return args;\n    if (Array.isArray(args) && Array.isArray(args[0]) && \"__compiled__\" in args[0]) return args[0];\n    return callback();\n}\nvar Contract = class {\n    /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */ constructor(abi, address, providerOrAccount = defaultProvider){\n        this.address = address && address.toLowerCase();\n        this.providerOrAccount = providerOrAccount;\n        this.callData = new CallData(abi);\n        this.structs = CallData.getAbiStruct(abi);\n        this.events = getAbiEvents(abi);\n        const parser = createAbiParser(abi);\n        this.abi = parser.getLegacyFormat();\n        const options = {\n            enumerable: true,\n            value: {},\n            writable: false\n        };\n        Object.defineProperties(this, {\n            functions: {\n                enumerable: true,\n                value: {},\n                writable: false\n            },\n            callStatic: {\n                enumerable: true,\n                value: {},\n                writable: false\n            },\n            populateTransaction: {\n                enumerable: true,\n                value: {},\n                writable: false\n            },\n            estimateFee: {\n                enumerable: true,\n                value: {},\n                writable: false\n            }\n        });\n        this.abi.forEach((abiElement)=>{\n            if (abiElement.type !== \"function\") return;\n            const signature = abiElement.name;\n            if (!this[signature]) {\n                Object.defineProperty(this, signature, {\n                    ...options,\n                    value: buildDefault(this, abiElement)\n                });\n            }\n            if (!this.functions[signature]) {\n                Object.defineProperty(this.functions, signature, {\n                    ...options,\n                    value: buildDefault(this, abiElement)\n                });\n            }\n            if (!this.callStatic[signature]) {\n                Object.defineProperty(this.callStatic, signature, {\n                    ...options,\n                    value: buildCall(this, abiElement)\n                });\n            }\n            if (!this.populateTransaction[signature]) {\n                Object.defineProperty(this.populateTransaction, signature, {\n                    ...options,\n                    value: buildPopulate(this, abiElement)\n                });\n            }\n            if (!this.estimateFee[signature]) {\n                Object.defineProperty(this.estimateFee, signature, {\n                    ...options,\n                    value: buildEstimate(this, abiElement)\n                });\n            }\n        });\n    }\n    attach(address) {\n        this.address = address;\n    }\n    connect(providerOrAccount) {\n        this.providerOrAccount = providerOrAccount;\n    }\n    async deployed() {\n        if (this.deployTransactionHash) {\n            await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n            this.deployTransactionHash = void 0;\n        }\n        return this;\n    }\n    async call(method, args = [], { parseRequest = true, parseResponse = true, formatResponse = void 0, blockIdentifier = void 0 } = {}) {\n        assert(this.address !== null, \"contract is not connected to an address\");\n        const calldata = getCalldata(args, ()=>{\n            if (parseRequest) {\n                this.callData.validate(\"CALL\" /* CALL */ , method, args);\n                return this.callData.compile(method, args);\n            }\n            console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n            return args;\n        });\n        return this.providerOrAccount.callContract({\n            contractAddress: this.address,\n            calldata,\n            entrypoint: method\n        }, blockIdentifier).then((x)=>{\n            if (!parseResponse) {\n                return x.result;\n            }\n            if (formatResponse) {\n                return this.callData.format(method, x.result, formatResponse);\n            }\n            return this.callData.parse(method, x.result);\n        });\n    }\n    invoke(method, args = [], { parseRequest = true, maxFee, nonce, signature } = {}) {\n        assert(this.address !== null, \"contract is not connected to an address\");\n        const calldata = getCalldata(args, ()=>{\n            if (parseRequest) {\n                this.callData.validate(\"INVOKE\" /* INVOKE */ , method, args);\n                return this.callData.compile(method, args);\n            }\n            console.warn(\"Invoke skipped parsing but provided rawArgs, possible malfunction request\");\n            return args;\n        });\n        const invocation = {\n            contractAddress: this.address,\n            calldata,\n            entrypoint: method\n        };\n        if (\"execute\" in this.providerOrAccount) {\n            return this.providerOrAccount.execute(invocation, void 0, {\n                maxFee,\n                nonce\n            });\n        }\n        if (!nonce) throw new Error(`Nonce is required when invoking a function without an account`);\n        console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n        return this.providerOrAccount.invokeFunction({\n            ...invocation,\n            signature\n        }, {\n            nonce\n        });\n    }\n    async estimate(method, args = []) {\n        assert(this.address !== null, \"contract is not connected to an address\");\n        if (!getCalldata(args, ()=>false)) {\n            this.callData.validate(\"INVOKE\" /* INVOKE */ , method, args);\n        }\n        const invocation = this.populate(method, args);\n        if (\"estimateInvokeFee\" in this.providerOrAccount) {\n            return this.providerOrAccount.estimateInvokeFee(invocation);\n        }\n        throw Error(\"Contract must be connected to the account contract to estimate\");\n    }\n    populate(method, args = []) {\n        const calldata = getCalldata(args, ()=>this.callData.compile(method, args));\n        return {\n            contractAddress: this.address,\n            entrypoint: method,\n            calldata\n        };\n    }\n    parseEvents(receipt) {\n        return parseEvents(receipt.events?.filter((event)=>cleanHex(event.from_address) === cleanHex(this.address), []) || [], this.events, this.structs, CallData.getAbiEnum(this.abi));\n    }\n    isCairo1() {\n        return cairo_exports.isCairo1Abi(this.abi);\n    }\n    async getVersion() {\n        return this.providerOrAccount.getContractVersion(this.address);\n    }\n    typed(tAbi) {\n        return this;\n    }\n};\n// src/contract/interface.ts\nvar ContractInterface = class {\n};\n// src/contract/contractFactory.ts\nvar ContractFactory = class {\n    /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */ constructor(params){\n        this.compiledContract = params.compiledContract;\n        this.account = params.account;\n        this.casm = params.casm;\n        this.abi = params.abi ?? params.compiledContract.abi;\n        this.classHash = params.classHash;\n        this.compiledClassHash = params.compiledClassHash;\n        this.CallData = new CallData(this.abi);\n    }\n    /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */ async deploy(...args) {\n        const { args: param, options = {\n            parseRequest: true\n        } } = splitArgsAndOptions(args);\n        const constructorCalldata = getCalldata(param, ()=>{\n            if (options.parseRequest) {\n                this.CallData.validate(\"DEPLOY\" /* DEPLOY */ , \"constructor\", param);\n                return this.CallData.compile(\"constructor\", param);\n            }\n            console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n            return param;\n        });\n        const { deploy: { contract_address, transaction_hash } } = await this.account.declareAndDeploy({\n            contract: this.compiledContract,\n            casm: this.casm,\n            classHash: this.classHash,\n            compiledClassHash: this.compiledClassHash,\n            constructorCalldata,\n            salt: options.addressSalt\n        });\n        assert(Boolean(contract_address), \"Deployment of the contract failed\");\n        const contractInstance = new Contract(this.compiledContract.abi, contract_address, this.account);\n        contractInstance.deployTransactionHash = transaction_hash;\n        return contractInstance;\n    }\n    /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */ connect(account) {\n        this.account = account;\n        return this;\n    }\n    /**\n   * Attaches current abi and account to the new address\n   */ attach(address) {\n        return new Contract(this.abi, address, this.account);\n    }\n};\n// src/utils/address.ts\n\nfunction addAddressPadding(address) {\n    return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, \"0\"));\n}\nfunction validateAndParseAddress(address) {\n    assertInRange(address, ZERO, MASK_251, \"Starknet Address\");\n    const result = addAddressPadding(address);\n    if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n        throw new Error(\"Invalid Address Format\");\n    }\n    return result;\n}\nfunction getChecksumAddress(address) {\n    const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split(\"\");\n    const hex = removeHexPrefix(keccakBn(address));\n    const hashed = (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(hex.padStart(64, \"0\"));\n    for(let i = 0; i < chars.length; i += 2){\n        if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 15) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return addHexPrefix(chars.join(\"\"));\n}\nfunction validateChecksumAddress(address) {\n    return getChecksumAddress(address) === address;\n}\n// src/index.ts\nvar number = num_exports;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZkwsVUFBVUksUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBRUEsbUJBQW1CO0FBQ25CLElBQUlDLG9CQUFvQixDQUFDO0FBQ3pCTixTQUFTTSxtQkFBbUI7SUFDMUJDLGFBQWEsSUFBTUE7SUFDbkJDLDhCQUE4QixJQUFNQTtJQUNwQ0MsOEJBQThCLElBQU1BO0lBQ3BDQywwQkFBMEIsSUFBTUE7SUFDaENDLDBCQUEwQixJQUFNQTtJQUNoQ0MsU0FBUyxJQUFNQTtJQUNmQywrQkFBK0IsSUFBTUE7SUFDckNDLCtCQUErQixJQUFNQTtJQUNyQ0MsWUFBWSxJQUFNQTtJQUNsQkMsVUFBVSxJQUFNQTtJQUNoQkMsVUFBVSxJQUFNQTtJQUNoQkMsYUFBYSxJQUFNQTtJQUNuQkMsa0JBQWtCLElBQU1BO0lBQ3hCQyxtQkFBbUIsSUFBTUE7SUFDekJDLGlCQUFpQixJQUFNQTtJQUN2QkMsc0JBQXNCLElBQU1BO0lBQzVCQyx1QkFBdUIsSUFBTUE7SUFDN0JDLEtBQUssSUFBTUE7SUFDWEMsTUFBTSxJQUFNQTtBQUNkO0FBRUEsc0JBQXNCO0FBQ3RCLElBQUlDLGlCQUFpQixDQUFDO0FBQ3RCMUIsU0FBUzBCLGdCQUFnQjtJQUN2QlgsWUFBWSxJQUFNQTtJQUNsQlksY0FBYyxJQUFNQTtJQUNwQkMscUJBQXFCLElBQU1BO0lBQzNCQyxlQUFlLElBQU1BO0lBQ3JCQyxlQUFlLElBQU1BO0lBQ3JCQyxTQUFTLElB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SSxDQUFDNW1CLE9BQU9nSSxLQUFLLENBQUMsMkJBQTJCO1FBQzNDLE1BQU0sSUFBSTlELE1BQU07SUFDbEI7SUFDQSxPQUFPbEU7QUFDVDtBQUNBLFNBQVNtaUMsbUJBQW1CdmIsT0FBTztJQUNqQyxNQUFNd2IsUUFBUXBrQyxnQkFBZ0Jra0Msd0JBQXdCdGIsVUFBVWxoQixXQUFXLEdBQUduRixLQUFLLENBQUM7SUFDcEYsTUFBTWQsTUFBTXpCLGdCQUFnQjBJLFNBQVNrZ0I7SUFDckMsTUFBTXliLFNBQVNMLHdFQUFXQSxDQUFDdmlDLElBQUlELFFBQVEsQ0FBQyxJQUFJO0lBQzVDLElBQUssSUFBSW9RLElBQUksR0FBR0EsSUFBSXd5QixNQUFNeGlDLE1BQU0sRUFBRWdRLEtBQUssRUFBRztRQUN4QyxJQUFJeXlCLE1BQU0sQ0FBQ3p5QixLQUFLLEVBQUUsSUFBSSxLQUFLLEdBQUc7WUFDNUJ3eUIsS0FBSyxDQUFDeHlCLEVBQUUsR0FBR3d5QixLQUFLLENBQUN4eUIsRUFBRSxDQUFDblAsV0FBVztRQUNqQztRQUNBLElBQUksQ0FBQzRoQyxNQUFNLENBQUN6eUIsS0FBSyxFQUFFLEdBQUcsRUFBQyxLQUFNLEdBQUc7WUFDOUJ3eUIsS0FBSyxDQUFDeHlCLElBQUksRUFBRSxHQUFHd3lCLEtBQUssQ0FBQ3h5QixJQUFJLEVBQUUsQ0FBQ25QLFdBQVc7UUFDekM7SUFDRjtJQUNBLE9BQU9qRCxhQUFhNGtDLE1BQU01aEMsSUFBSSxDQUFDO0FBQ2pDO0FBQ0EsU0FBUzhoQyx3QkFBd0IxYixPQUFPO0lBQ3RDLE9BQU91YixtQkFBbUJ2YixhQUFhQTtBQUN6QztBQUVBLGVBQWU7QUFDZixJQUFJYSxTQUFTdGpCO0FBdUVYLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVmbGV5ZXIvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvZGlzdC9pbmRleC5tanM/Y2U5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgY29uc3RhbnRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbnN0YW50c19leHBvcnRzLCB7XG4gIEFQSV9WRVJTSU9OOiAoKSA9PiBBUElfVkVSU0lPTixcbiAgQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMTogKCkgPT4gQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMSxcbiAgQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMjogKCkgPT4gQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMixcbiAgQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xOiAoKSA9PiBCTl9UUkFOU0FDVElPTl9WRVJTSU9OXzEsXG4gIEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMjogKCkgPT4gQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8yLFxuICBCYXNlVXJsOiAoKSA9PiBCYXNlVXJsLFxuICBIRVhfU1RSX1RSQU5TQUNUSU9OX1ZFUlNJT05fMTogKCkgPT4gSEVYX1NUUl9UUkFOU0FDVElPTl9WRVJTSU9OXzEsXG4gIEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8yOiAoKSA9PiBIRVhfU1RSX1RSQU5TQUNUSU9OX1ZFUlNJT05fMixcbiAgSVNfQlJPV1NFUjogKCkgPT4gSVNfQlJPV1NFUixcbiAgTUFTS18yNTA6ICgpID0+IE1BU0tfMjUwLFxuICBNQVNLXzI1MTogKCkgPT4gTUFTS18yNTEsXG4gIE5ldHdvcmtOYW1lOiAoKSA9PiBOZXR3b3JrTmFtZSxcbiAgUlBDX0dPRVJMSV9OT0RFUzogKCkgPT4gUlBDX0dPRVJMSV9OT0RFUyxcbiAgUlBDX01BSU5ORVRfTk9ERVM6ICgpID0+IFJQQ19NQUlOTkVUX05PREVTLFxuICBTdGFya25ldENoYWluSWQ6ICgpID0+IFN0YXJrbmV0Q2hhaW5JZCxcbiAgVEVYVF9UT19GRUxUX01BWF9MRU46ICgpID0+IFRFWFRfVE9fRkVMVF9NQVhfTEVOLFxuICBUcmFuc2FjdGlvbkhhc2hQcmVmaXg6ICgpID0+IFRyYW5zYWN0aW9uSGFzaFByZWZpeCxcbiAgVURDOiAoKSA9PiBVREMsXG4gIFpFUk86ICgpID0+IFpFUk9cbn0pO1xuXG4vLyBzcmMvdXRpbHMvZW5jb2RlLnRzXG52YXIgZW5jb2RlX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVuY29kZV9leHBvcnRzLCB7XG4gIElTX0JST1dTRVI6ICgpID0+IElTX0JST1dTRVIsXG4gIGFkZEhleFByZWZpeDogKCkgPT4gYWRkSGV4UHJlZml4LFxuICBhcnJheUJ1ZmZlclRvU3RyaW5nOiAoKSA9PiBhcnJheUJ1ZmZlclRvU3RyaW5nLFxuICBhdG9iVW5pdmVyc2FsOiAoKSA9PiBhdG9iVW5pdmVyc2FsLFxuICBidG9hVW5pdmVyc2FsOiAoKSA9PiBidG9hVW5pdmVyc2FsLFxuICBidWYyaGV4OiAoKSA9PiBidWYyaGV4LFxuICBjYWxjQnl0ZUxlbmd0aDogKCkgPT4gY2FsY0J5dGVMZW5ndGgsXG4gIHBhZExlZnQ6ICgpID0+IHBhZExlZnQsXG4gIHBhc2NhbFRvU25ha2U6ICgpID0+IHBhc2NhbFRvU25ha2UsXG4gIHJlbW92ZUhleFByZWZpeDogKCkgPT4gcmVtb3ZlSGV4UHJlZml4LFxuICBzYW5pdGl6ZUJ5dGVzOiAoKSA9PiBzYW5pdGl6ZUJ5dGVzLFxuICBzYW5pdGl6ZUhleDogKCkgPT4gc2FuaXRpemVIZXgsXG4gIHN0cmluZ1RvQXJyYXlCdWZmZXI6ICgpID0+IHN0cmluZ1RvQXJyYXlCdWZmZXIsXG4gIHV0ZjhUb0FycmF5OiAoKSA9PiB1dGY4VG9BcnJheVxufSk7XG5pbXBvcnQgeyBiYXNlNjQgfSBmcm9tIFwiQHNjdXJlL2Jhc2VcIjtcbnZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBTVFJJTkdfWkVSTyA9IFwiMFwiO1xuZnVuY3Rpb24gYXJyYXlCdWZmZXJUb1N0cmluZyhhcnJheSkge1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpLnJlZHVjZSgoZGF0YSwgYnl0ZSkgPT4gZGF0YSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSksIFwiXCIpO1xufVxuZnVuY3Rpb24gdXRmOFRvQXJyYXkoc3RyKSB7XG4gIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXlCdWZmZXIoc3RyKSB7XG4gIHJldHVybiB1dGY4VG9BcnJheShzdHIpO1xufVxuZnVuY3Rpb24gYXRvYlVuaXZlcnNhbChhKSB7XG4gIHJldHVybiBiYXNlNjQuZGVjb2RlKGEpO1xufVxuZnVuY3Rpb24gYnRvYVVuaXZlcnNhbChiKSB7XG4gIHJldHVybiBiYXNlNjQuZW5jb2RlKG5ldyBVaW50OEFycmF5KGIpKTtcbn1cbmZ1bmN0aW9uIGJ1ZjJoZXgoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXIucmVkdWNlKChyLCB4KSA9PiByICsgeC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUhleFByZWZpeChoZXgpIHtcbiAgcmV0dXJuIGhleC5yZXBsYWNlKC9eMHgvaSwgXCJcIik7XG59XG5mdW5jdGlvbiBhZGRIZXhQcmVmaXgoaGV4KSB7XG4gIHJldHVybiBgMHgke3JlbW92ZUhleFByZWZpeChoZXgpfWA7XG59XG5mdW5jdGlvbiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIGxlZnQsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICBjb25zdCBkaWZmID0gbGVuZ3RoIC0gc3RyLmxlbmd0aDtcbiAgbGV0IHJlc3VsdCA9IHN0cjtcbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgY29uc3QgcGFkID0gcGFkZGluZy5yZXBlYXQoZGlmZik7XG4gICAgcmVzdWx0ID0gbGVmdCA/IHBhZCArIHN0ciA6IHN0ciArIHBhZDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGFkTGVmdChzdHIsIGxlbmd0aCwgcGFkZGluZyA9IFNUUklOR19aRVJPKSB7XG4gIHJldHVybiBwYWRTdHJpbmcoc3RyLCBsZW5ndGgsIHRydWUsIHBhZGRpbmcpO1xufVxuZnVuY3Rpb24gY2FsY0J5dGVMZW5ndGgoc3RyLCBieXRlU2l6ZSA9IDgpIHtcbiAgY29uc3QgeyBsZW5ndGggfSA9IHN0cjtcbiAgY29uc3QgcmVtYWluZGVyID0gbGVuZ3RoICUgYnl0ZVNpemU7XG4gIHJldHVybiByZW1haW5kZXIgPyAobGVuZ3RoIC0gcmVtYWluZGVyKSAvIGJ5dGVTaXplICogYnl0ZVNpemUgKyBieXRlU2l6ZSA6IGxlbmd0aDtcbn1cbmZ1bmN0aW9uIHNhbml0aXplQnl0ZXMoc3RyLCBieXRlU2l6ZSA9IDgsIHBhZGRpbmcgPSBTVFJJTkdfWkVSTykge1xuICByZXR1cm4gcGFkTGVmdChzdHIsIGNhbGNCeXRlTGVuZ3RoKHN0ciwgYnl0ZVNpemUpLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHNhbml0aXplSGV4KGhleCkge1xuICBoZXggPSByZW1vdmVIZXhQcmVmaXgoaGV4KTtcbiAgaGV4ID0gc2FuaXRpemVCeXRlcyhoZXgsIDIpO1xuICBpZiAoaGV4KSB7XG4gICAgaGV4ID0gYWRkSGV4UHJlZml4KGhleCk7XG4gIH1cbiAgcmV0dXJuIGhleDtcbn1cbnZhciBwYXNjYWxUb1NuYWtlID0gKHRleHQpID0+IC9bYS16XS8udGVzdCh0ZXh0KSA/IHRleHQuc3BsaXQoLyg/PVtBLVpdKS8pLmpvaW4oXCJfXCIpLnRvVXBwZXJDYXNlKCkgOiB0ZXh0O1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgVEVYVF9UT19GRUxUX01BWF9MRU4gPSAzMTtcbnZhciBIRVhfU1RSX1RSQU5TQUNUSU9OX1ZFUlNJT05fMSA9IFwiMHgxXCI7XG52YXIgSEVYX1NUUl9UUkFOU0FDVElPTl9WRVJTSU9OXzIgPSBcIjB4MlwiO1xudmFyIEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMSA9IDFuO1xudmFyIEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMiA9IDJuO1xudmFyIEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzEgPSAybiAqKiAxMjhuICsgQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xO1xudmFyIEJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzIgPSAybiAqKiAxMjhuICsgQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8yO1xudmFyIFpFUk8gPSAwbjtcbnZhciBNQVNLXzI1MCA9IDJuICoqIDI1MG4gLSAxbjtcbnZhciBNQVNLXzI1MSA9IDJuICoqIDI1MW47XG52YXIgQVBJX1ZFUlNJT04gPSBaRVJPO1xudmFyIEJhc2VVcmwgPSAvKiBAX19QVVJFX18gKi8gKChCYXNlVXJsMikgPT4ge1xuICBCYXNlVXJsMltcIlNOX01BSU5cIl0gPSBcImh0dHBzOi8vYWxwaGEtbWFpbm5ldC5zdGFya25ldC5pb1wiO1xuICBCYXNlVXJsMltcIlNOX0dPRVJMSVwiXSA9IFwiaHR0cHM6Ly9hbHBoYTQuc3RhcmtuZXQuaW9cIjtcbiAgcmV0dXJuIEJhc2VVcmwyO1xufSkoQmFzZVVybCB8fCB7fSk7XG52YXIgTmV0d29ya05hbWUgPSAvKiBAX19QVVJFX18gKi8gKChOZXR3b3JrTmFtZTIpID0+IHtcbiAgTmV0d29ya05hbWUyW1wiU05fTUFJTlwiXSA9IFwiU05fTUFJTlwiO1xuICBOZXR3b3JrTmFtZTJbXCJTTl9HT0VSTElcIl0gPSBcIlNOX0dPRVJMSVwiO1xuICByZXR1cm4gTmV0d29ya05hbWUyO1xufSkoTmV0d29ya05hbWUgfHwge30pO1xudmFyIFN0YXJrbmV0Q2hhaW5JZCA9IC8qIEBfX1BVUkVfXyAqLyAoKFN0YXJrbmV0Q2hhaW5JZDQpID0+IHtcbiAgU3RhcmtuZXRDaGFpbklkNFtcIlNOX01BSU5cIl0gPSBcIjB4NTM0ZTVmNGQ0MTQ5NGVcIjtcbiAgU3RhcmtuZXRDaGFpbklkNFtcIlNOX0dPRVJMSVwiXSA9IFwiMHg1MzRlNWY0NzRmNDU1MjRjNDlcIjtcbiAgcmV0dXJuIFN0YXJrbmV0Q2hhaW5JZDQ7XG59KShTdGFya25ldENoYWluSWQgfHwge30pO1xudmFyIFRyYW5zYWN0aW9uSGFzaFByZWZpeCA9IC8qIEBfX1BVUkVfXyAqLyAoKFRyYW5zYWN0aW9uSGFzaFByZWZpeDIpID0+IHtcbiAgVHJhbnNhY3Rpb25IYXNoUHJlZml4MltcIkRFQ0xBUkVcIl0gPSBcIjB4NjQ2NTYzNmM2MTcyNjVcIjtcbiAgVHJhbnNhY3Rpb25IYXNoUHJlZml4MltcIkRFUExPWVwiXSA9IFwiMHg2NDY1NzA2YzZmNzlcIjtcbiAgVHJhbnNhY3Rpb25IYXNoUHJlZml4MltcIkRFUExPWV9BQ0NPVU5UXCJdID0gXCIweDY0NjU3MDZjNmY3OTVmNjE2MzYzNmY3NTZlNzRcIjtcbiAgVHJhbnNhY3Rpb25IYXNoUHJlZml4MltcIklOVk9LRVwiXSA9IFwiMHg2OTZlNzY2ZjZiNjVcIjtcbiAgVHJhbnNhY3Rpb25IYXNoUHJlZml4MltcIkwxX0hBTkRMRVJcIl0gPSBcIjB4NmMzMTVmNjg2MTZlNjQ2YzY1NzJcIjtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uSGFzaFByZWZpeDI7XG59KShUcmFuc2FjdGlvbkhhc2hQcmVmaXggfHwge30pO1xudmFyIFVEQyA9IHtcbiAgQUREUkVTUzogXCIweDA0MWE3OGU3NDFlNWFmMmZlYzM0YjY5NTY3OWJjNjg5MTc0MjQzOWY3YWZiODQ4NGVjZDc3NjY2NjFhZDAyYmZcIixcbiAgRU5UUllQT0lOVDogXCJkZXBsb3lDb250cmFjdFwiXG59O1xudmFyIFJQQ19HT0VSTElfTk9ERVMgPSBbXG4gIFwiaHR0cHM6Ly9zdGFya25ldC10ZXN0bmV0LnB1YmxpYy5ibGFzdGFwaS5pby9ycGMvdjAuNVwiLFxuICBcImh0dHBzOi8vbGltaXRlZC1ycGMubmV0aGVybWluZC5pby9nb2VybGktanVuby92MF81XCJcbl07XG52YXIgUlBDX01BSU5ORVRfTk9ERVMgPSBbXG4gIFwiaHR0cHM6Ly9zdGFya25ldC1tYWlubmV0LnB1YmxpYy5ibGFzdGFwaS5pby9ycGMvdjAuNVwiLFxuICBcImh0dHBzOi8vbGltaXRlZC1ycGMubmV0aGVybWluZC5pby9tYWlubmV0LWp1bm8vdjBfNVwiXG5dO1xuXG4vLyBzcmMvdHlwZXMvaW5kZXgudHNcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEJsb2NrU3RhdHVzOiAoKSA9PiBCbG9ja1N0YXR1cyxcbiAgQmxvY2tUYWc6ICgpID0+IEJsb2NrVGFnLFxuICBFbnRyeVBvaW50VHlwZTogKCkgPT4gRW50cnlQb2ludFR5cGUsXG4gIExpdHRlcmFsOiAoKSA9PiBMaXR0ZXJhbCxcbiAgUlBDOiAoKSA9PiBycGNfZXhwb3J0cyxcbiAgU0lNVUxBVElPTl9GTEFHOiAoKSA9PiBTSU1VTEFUSU9OX0ZMQUcsXG4gIFNlcXVlbmNlcjogKCkgPT4gc2VxdWVuY2VyX2V4cG9ydHMsXG4gIFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzOiAoKSA9PiBUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyxcbiAgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czogKCkgPT4gVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyxcbiAgVHJhbnNhY3Rpb25TdGF0dXM6ICgpID0+IFRyYW5zYWN0aW9uU3RhdHVzLFxuICBUcmFuc2FjdGlvblR5cGU6ICgpID0+IFRyYW5zYWN0aW9uVHlwZSxcbiAgVWludDogKCkgPT4gVWludCxcbiAgVmFsaWRhdGVUeXBlOiAoKSA9PiBWYWxpZGF0ZVR5cGVcbn0pO1xuXG4vLyBzcmMvdHlwZXMvYWNjb3VudC50c1xudmFyIFNJTVVMQVRJT05fRkxBRyA9IC8qIEBfX1BVUkVfXyAqLyAoKFNJTVVMQVRJT05fRkxBRzIpID0+IHtcbiAgU0lNVUxBVElPTl9GTEFHMltcIlNLSVBfVkFMSURBVEVcIl0gPSBcIlNLSVBfVkFMSURBVEVcIjtcbiAgU0lNVUxBVElPTl9GTEFHMltcIlNLSVBfRVhFQ1VURVwiXSA9IFwiU0tJUF9FWEVDVVRFXCI7XG4gIHJldHVybiBTSU1VTEFUSU9OX0ZMQUcyO1xufSkoU0lNVUxBVElPTl9GTEFHIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL2NhbGxkYXRhLnRzXG52YXIgVmFsaWRhdGVUeXBlID0gLyogQF9fUFVSRV9fICovICgoVmFsaWRhdGVUeXBlMikgPT4ge1xuICBWYWxpZGF0ZVR5cGUyW1wiREVQTE9ZXCJdID0gXCJERVBMT1lcIjtcbiAgVmFsaWRhdGVUeXBlMltcIkNBTExcIl0gPSBcIkNBTExcIjtcbiAgVmFsaWRhdGVUeXBlMltcIklOVk9LRVwiXSA9IFwiSU5WT0tFXCI7XG4gIHJldHVybiBWYWxpZGF0ZVR5cGUyO1xufSkoVmFsaWRhdGVUeXBlIHx8IHt9KTtcbnZhciBVaW50ID0gLyogQF9fUFVSRV9fICovICgoVWludDIpID0+IHtcbiAgVWludDJbXCJ1OFwiXSA9IFwiY29yZTo6aW50ZWdlcjo6dThcIjtcbiAgVWludDJbXCJ1MTZcIl0gPSBcImNvcmU6OmludGVnZXI6OnUxNlwiO1xuICBVaW50MltcInUzMlwiXSA9IFwiY29yZTo6aW50ZWdlcjo6dTMyXCI7XG4gIFVpbnQyW1widTY0XCJdID0gXCJjb3JlOjppbnRlZ2VyOjp1NjRcIjtcbiAgVWludDJbXCJ1MTI4XCJdID0gXCJjb3JlOjppbnRlZ2VyOjp1MTI4XCI7XG4gIFVpbnQyW1widTI1NlwiXSA9IFwiY29yZTo6aW50ZWdlcjo6dTI1NlwiO1xuICByZXR1cm4gVWludDI7XG59KShVaW50IHx8IHt9KTtcbnZhciBMaXR0ZXJhbCA9IC8qIEBfX1BVUkVfXyAqLyAoKExpdHRlcmFsMikgPT4ge1xuICBMaXR0ZXJhbDJbXCJDbGFzc0hhc2hcIl0gPSBcImNvcmU6OnN0YXJrbmV0OjpjbGFzc19oYXNoOjpDbGFzc0hhc2hcIjtcbiAgTGl0dGVyYWwyW1wiQ29udHJhY3RBZGRyZXNzXCJdID0gXCJjb3JlOjpzdGFya25ldDo6Y29udHJhY3RfYWRkcmVzczo6Q29udHJhY3RBZGRyZXNzXCI7XG4gIHJldHVybiBMaXR0ZXJhbDI7XG59KShMaXR0ZXJhbCB8fCB7fSk7XG5cbi8vIHNyYy90eXBlcy9saWIvY29udHJhY3QvaW5kZXgudHNcbnZhciBFbnRyeVBvaW50VHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEVudHJ5UG9pbnRUeXBlMikgPT4ge1xuICBFbnRyeVBvaW50VHlwZTJbXCJFWFRFUk5BTFwiXSA9IFwiRVhURVJOQUxcIjtcbiAgRW50cnlQb2ludFR5cGUyW1wiTDFfSEFORExFUlwiXSA9IFwiTDFfSEFORExFUlwiO1xuICBFbnRyeVBvaW50VHlwZTJbXCJDT05TVFJVQ1RPUlwiXSA9IFwiQ09OU1RSVUNUT1JcIjtcbiAgcmV0dXJuIEVudHJ5UG9pbnRUeXBlMjtcbn0pKEVudHJ5UG9pbnRUeXBlIHx8IHt9KTtcblxuLy8gc3JjL3R5cGVzL2xpYi9pbmRleC50c1xudmFyIFRyYW5zYWN0aW9uVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFRyYW5zYWN0aW9uVHlwZTIpID0+IHtcbiAgVHJhbnNhY3Rpb25UeXBlMltcIkRFQ0xBUkVcIl0gPSBcIkRFQ0xBUkVcIjtcbiAgVHJhbnNhY3Rpb25UeXBlMltcIkRFUExPWVwiXSA9IFwiREVQTE9ZXCI7XG4gIFRyYW5zYWN0aW9uVHlwZTJbXCJERVBMT1lfQUNDT1VOVFwiXSA9IFwiREVQTE9ZX0FDQ09VTlRcIjtcbiAgVHJhbnNhY3Rpb25UeXBlMltcIklOVk9LRVwiXSA9IFwiSU5WT0tFX0ZVTkNUSU9OXCI7XG4gIHJldHVybiBUcmFuc2FjdGlvblR5cGUyO1xufSkoVHJhbnNhY3Rpb25UeXBlIHx8IHt9KTtcbnZhciBUcmFuc2FjdGlvblN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKFRyYW5zYWN0aW9uU3RhdHVzMikgPT4ge1xuICBUcmFuc2FjdGlvblN0YXR1czJbXCJOT1RfUkVDRUlWRURcIl0gPSBcIk5PVF9SRUNFSVZFRFwiO1xuICBUcmFuc2FjdGlvblN0YXR1czJbXCJSRUNFSVZFRFwiXSA9IFwiUkVDRUlWRURcIjtcbiAgVHJhbnNhY3Rpb25TdGF0dXMyW1wiQUNDRVBURURfT05fTDJcIl0gPSBcIkFDQ0VQVEVEX09OX0wyXCI7XG4gIFRyYW5zYWN0aW9uU3RhdHVzMltcIkFDQ0VQVEVEX09OX0wxXCJdID0gXCJBQ0NFUFRFRF9PTl9MMVwiO1xuICBUcmFuc2FjdGlvblN0YXR1czJbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbiAgVHJhbnNhY3Rpb25TdGF0dXMyW1wiUkVWRVJURURcIl0gPSBcIlJFVkVSVEVEXCI7XG4gIHJldHVybiBUcmFuc2FjdGlvblN0YXR1czI7XG59KShUcmFuc2FjdGlvblN0YXR1cyB8fCB7fSk7XG52YXIgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKFRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyKSA9PiB7XG4gIFRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyW1wiTk9UX1JFQ0VJVkVEXCJdID0gXCJOT1RfUkVDRUlWRURcIjtcbiAgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czJbXCJSRUNFSVZFRFwiXSA9IFwiUkVDRUlWRURcIjtcbiAgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMlwiXSA9IFwiQUNDRVBURURfT05fTDJcIjtcbiAgVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMVwiXSA9IFwiQUNDRVBURURfT05fTDFcIjtcbiAgcmV0dXJuIFRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyO1xufSkoVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1cyB8fCB7fSk7XG52YXIgVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czIpID0+IHtcbiAgVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyW1wiUkVKRUNURURcIl0gPSBcIlJFSkVDVEVEXCI7XG4gIFRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMltcIlJFVkVSVEVEXCJdID0gXCJSRVZFUlRFRFwiO1xuICBUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czJbXCJTVUNDRUVERURcIl0gPSBcIlNVQ0NFRURFRFwiO1xuICByZXR1cm4gVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyO1xufSkoVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMgfHwge30pO1xudmFyIEJsb2NrU3RhdHVzID0gLyogQF9fUFVSRV9fICovICgoQmxvY2tTdGF0dXMyKSA9PiB7XG4gIEJsb2NrU3RhdHVzMltcIlBFTkRJTkdcIl0gPSBcIlBFTkRJTkdcIjtcbiAgQmxvY2tTdGF0dXMyW1wiQUNDRVBURURfT05fTDFcIl0gPSBcIkFDQ0VQVEVEX09OX0wxXCI7XG4gIEJsb2NrU3RhdHVzMltcIkFDQ0VQVEVEX09OX0wyXCJdID0gXCJBQ0NFUFRFRF9PTl9MMlwiO1xuICBCbG9ja1N0YXR1czJbXCJSRUpFQ1RFRFwiXSA9IFwiUkVKRUNURURcIjtcbiAgcmV0dXJuIEJsb2NrU3RhdHVzMjtcbn0pKEJsb2NrU3RhdHVzIHx8IHt9KTtcbnZhciBCbG9ja1RhZyA9IC8qIEBfX1BVUkVfXyAqLyAoKEJsb2NrVGFnMikgPT4ge1xuICBCbG9ja1RhZzJbXCJwZW5kaW5nXCJdID0gXCJwZW5kaW5nXCI7XG4gIEJsb2NrVGFnMltcImxhdGVzdFwiXSA9IFwibGF0ZXN0XCI7XG4gIHJldHVybiBCbG9ja1RhZzI7XG59KShCbG9ja1RhZyB8fCB7fSk7XG5cbi8vIHNyYy90eXBlcy9hcGkvcnBjLnRzXG52YXIgcnBjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHJwY19leHBvcnRzLCB7XG4gIEVCbG9ja1RhZzogKCkgPT4gRUJsb2NrVGFnLFxuICBFRGF0YUF2YWlsYWJpbGl0eU1vZGU6ICgpID0+IEVEYXRhQXZhaWxhYmlsaXR5TW9kZSxcbiAgRVNpbXVsYXRpb25GbGFnOiAoKSA9PiBFU2ltdWxhdGlvbkZsYWcsXG4gIEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czogKCkgPT4gRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzLFxuICBFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czogKCkgPT4gRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMsXG4gIEVUcmFuc2FjdGlvblN0YXR1czogKCkgPT4gRVRyYW5zYWN0aW9uU3RhdHVzLFxuICBFVHJhbnNhY3Rpb25UeXBlOiAoKSA9PiBFVHJhbnNhY3Rpb25UeXBlLFxuICBFcnJvcnM6ICgpID0+IGVycm9yc19leHBvcnRzLFxuICBKUlBDOiAoKSA9PiBqc29ucnBjX2V4cG9ydHMsXG4gIFNQRUM6ICgpID0+IGNvbXBvbmVudHNfZXhwb3J0c1xufSk7XG5cbi8vIHNyYy90eXBlcy9hcGkvanNvbnJwYy9pbmRleC50c1xudmFyIGpzb25ycGNfZXhwb3J0cyA9IHt9O1xuXG4vLyBzcmMvdHlwZXMvYXBpL3JwY3NwZWMvZXJyb3JzLnRzXG52YXIgZXJyb3JzX2V4cG9ydHMgPSB7fTtcblxuLy8gc3JjL3R5cGVzL2FwaS9ycGNzcGVjL2NvbXBvbmVudHMudHNcbnZhciBjb21wb25lbnRzX2V4cG9ydHMgPSB7fTtcblxuLy8gc3JjL3R5cGVzL2FwaS9ycGNzcGVjL25vbnNwZWMudHNcbnZhciBFVHJhbnNhY3Rpb25UeXBlID0gLyogQF9fUFVSRV9fICovICgoRVRyYW5zYWN0aW9uVHlwZTIpID0+IHtcbiAgRVRyYW5zYWN0aW9uVHlwZTJbXCJERUNMQVJFXCJdID0gXCJERUNMQVJFXCI7XG4gIEVUcmFuc2FjdGlvblR5cGUyW1wiREVQTE9ZXCJdID0gXCJERVBMT1lcIjtcbiAgRVRyYW5zYWN0aW9uVHlwZTJbXCJERVBMT1lfQUNDT1VOVFwiXSA9IFwiREVQTE9ZX0FDQ09VTlRcIjtcbiAgRVRyYW5zYWN0aW9uVHlwZTJbXCJJTlZPS0VcIl0gPSBcIklOVk9LRVwiO1xuICBFVHJhbnNhY3Rpb25UeXBlMltcIkwxX0hBTkRMRVJcIl0gPSBcIkwxX0hBTkRMRVJcIjtcbiAgcmV0dXJuIEVUcmFuc2FjdGlvblR5cGUyO1xufSkoRVRyYW5zYWN0aW9uVHlwZSB8fCB7fSk7XG52YXIgRVNpbXVsYXRpb25GbGFnID0gLyogQF9fUFVSRV9fICovICgoRVNpbXVsYXRpb25GbGFnMikgPT4ge1xuICBFU2ltdWxhdGlvbkZsYWcyW1wiU0tJUF9WQUxJREFURVwiXSA9IFwiU0tJUF9WQUxJREFURVwiO1xuICBFU2ltdWxhdGlvbkZsYWcyW1wiU0tJUF9GRUVfQ0hBUkdFXCJdID0gXCJTS0lQX0ZFRV9DSEFSR0VcIjtcbiAgcmV0dXJuIEVTaW11bGF0aW9uRmxhZzI7XG59KShFU2ltdWxhdGlvbkZsYWcgfHwge30pO1xudmFyIEVUcmFuc2FjdGlvblN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKEVUcmFuc2FjdGlvblN0YXR1czIpID0+IHtcbiAgRVRyYW5zYWN0aW9uU3RhdHVzMltcIlJFQ0VJVkVEXCJdID0gXCJSRUNFSVZFRFwiO1xuICBFVHJhbnNhY3Rpb25TdGF0dXMyW1wiUkVKRUNURURcIl0gPSBcIlJFSkVDVEVEXCI7XG4gIEVUcmFuc2FjdGlvblN0YXR1czJbXCJBQ0NFUFRFRF9PTl9MMlwiXSA9IFwiQUNDRVBURURfT05fTDJcIjtcbiAgRVRyYW5zYWN0aW9uU3RhdHVzMltcIkFDQ0VQVEVEX09OX0wxXCJdID0gXCJBQ0NFUFRFRF9PTl9MMVwiO1xuICByZXR1cm4gRVRyYW5zYWN0aW9uU3RhdHVzMjtcbn0pKEVUcmFuc2FjdGlvblN0YXR1cyB8fCB7fSk7XG52YXIgRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMgPSAvKiBAX19QVVJFX18gKi8gKChFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czIpID0+IHtcbiAgRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyW1wiQUNDRVBURURfT05fTDJcIl0gPSBcIkFDQ0VQVEVEX09OX0wyXCI7XG4gIEVUcmFuc2FjdGlvbkZpbmFsaXR5U3RhdHVzMltcIkFDQ0VQVEVEX09OX0wxXCJdID0gXCJBQ0NFUFRFRF9PTl9MMVwiO1xuICByZXR1cm4gRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyO1xufSkoRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMgfHwge30pO1xudmFyIEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyAoKEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czIpID0+IHtcbiAgRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzMltcIlNVQ0NFRURFRFwiXSA9IFwiU1VDQ0VFREVEXCI7XG4gIEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czJbXCJSRVZFUlRFRFwiXSA9IFwiUkVWRVJURURcIjtcbiAgcmV0dXJuIEVUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1czI7XG59KShFVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMgfHwge30pO1xudmFyIEVCbG9ja1RhZyA9IC8qIEBfX1BVUkVfXyAqLyAoKEVCbG9ja1RhZzIpID0+IHtcbiAgRUJsb2NrVGFnMltcIkxBVEVTVFwiXSA9IFwibGF0ZXN0XCI7XG4gIEVCbG9ja1RhZzJbXCJQRU5ESU5HXCJdID0gXCJwZW5kaW5nXCI7XG4gIHJldHVybiBFQmxvY2tUYWcyO1xufSkoRUJsb2NrVGFnIHx8IHt9KTtcbnZhciBFRGF0YUF2YWlsYWJpbGl0eU1vZGUgPSAvKiBAX19QVVJFX18gKi8gKChFRGF0YUF2YWlsYWJpbGl0eU1vZGUyKSA9PiB7XG4gIEVEYXRhQXZhaWxhYmlsaXR5TW9kZTJbXCJMMVwiXSA9IFwiTDFcIjtcbiAgRURhdGFBdmFpbGFiaWxpdHlNb2RlMltcIkwyXCJdID0gXCJMMlwiO1xuICByZXR1cm4gRURhdGFBdmFpbGFiaWxpdHlNb2RlMjtcbn0pKEVEYXRhQXZhaWxhYmlsaXR5TW9kZSB8fCB7fSk7XG5cbi8vIHNyYy90eXBlcy9hcGkvc2VxdWVuY2VyLnRzXG52YXIgc2VxdWVuY2VyX2V4cG9ydHMgPSB7fTtcblxuLy8gc3JjL3V0aWxzL2Fzc2VydC50c1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWx1cmVcIik7XG4gIH1cbn1cblxuLy8gc3JjL3V0aWxzL251bS50c1xudmFyIG51bV9leHBvcnRzID0ge307XG5fX2V4cG9ydChudW1fZXhwb3J0cywge1xuICBhc3NlcnRJblJhbmdlOiAoKSA9PiBhc3NlcnRJblJhbmdlLFxuICBiaWdOdW1iZXJpc2hBcnJheVRvRGVjaW1hbFN0cmluZ0FycmF5OiAoKSA9PiBiaWdOdW1iZXJpc2hBcnJheVRvRGVjaW1hbFN0cmluZ0FycmF5LFxuICBiaWdOdW1iZXJpc2hBcnJheVRvSGV4YWRlY2ltYWxTdHJpbmdBcnJheTogKCkgPT4gYmlnTnVtYmVyaXNoQXJyYXlUb0hleGFkZWNpbWFsU3RyaW5nQXJyYXksXG4gIGNsZWFuSGV4OiAoKSA9PiBjbGVhbkhleCxcbiAgZ2V0RGVjaW1hbFN0cmluZzogKCkgPT4gZ2V0RGVjaW1hbFN0cmluZyxcbiAgZ2V0SGV4U3RyaW5nOiAoKSA9PiBnZXRIZXhTdHJpbmcsXG4gIGdldEhleFN0cmluZ0FycmF5OiAoKSA9PiBnZXRIZXhTdHJpbmdBcnJheSxcbiAgaGV4VG9CeXRlczogKCkgPT4gaGV4VG9CeXRlcyxcbiAgaGV4VG9EZWNpbWFsU3RyaW5nOiAoKSA9PiBoZXhUb0RlY2ltYWxTdHJpbmcsXG4gIGlzQmlnSW50OiAoKSA9PiBpc0JpZ0ludCxcbiAgaXNIZXg6ICgpID0+IGlzSGV4LFxuICBpc1N0cmluZ1dob2xlTnVtYmVyOiAoKSA9PiBpc1N0cmluZ1dob2xlTnVtYmVyLFxuICB0b0JpZ0ludDogKCkgPT4gdG9CaWdJbnQsXG4gIHRvQ2Fpcm9Cb29sOiAoKSA9PiB0b0NhaXJvQm9vbCxcbiAgdG9IZXg6ICgpID0+IHRvSGV4LFxuICB0b0hleFN0cmluZzogKCkgPT4gdG9IZXhTdHJpbmcsXG4gIHRvU3RvcmFnZUtleTogKCkgPT4gdG9TdG9yYWdlS2V5XG59KTtcbmltcG9ydCB7IGhleFRvQnl0ZXMgYXMgaGV4VG9CeXRlc05vYmxlIH0gZnJvbSBcIkBub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvdXRpbHNcIjtcbmZ1bmN0aW9uIGlzSGV4KGhleCkge1xuICByZXR1cm4gL14weFswLTlhLWZdKiQvaS50ZXN0KGhleCk7XG59XG5mdW5jdGlvbiB0b0JpZ0ludCh2YWx1ZSkge1xuICByZXR1cm4gQmlnSW50KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzQmlnSW50KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCI7XG59XG5mdW5jdGlvbiB0b0hleChudW1iZXIyKSB7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgodG9CaWdJbnQobnVtYmVyMikudG9TdHJpbmcoMTYpKTtcbn1cbnZhciB0b0hleFN0cmluZyA9IHRvSGV4O1xuZnVuY3Rpb24gdG9TdG9yYWdlS2V5KG51bWJlcjIpIHtcbiAgY29uc3QgcmVzID0gYWRkSGV4UHJlZml4KHRvQmlnSW50KG51bWJlcjIpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg2NCwgXCIwXCIpKTtcbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGhleFRvRGVjaW1hbFN0cmluZyhoZXgpIHtcbiAgcmV0dXJuIEJpZ0ludChhZGRIZXhQcmVmaXgoaGV4KSkudG9TdHJpbmcoMTApO1xufVxudmFyIGNsZWFuSGV4ID0gKGhleCkgPT4gaGV4LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXigweCkwKy8sIFwiJDFcIik7XG5mdW5jdGlvbiBhc3NlcnRJblJhbmdlKGlucHV0LCBsb3dlckJvdW5kLCB1cHBlckJvdW5kLCBpbnB1dE5hbWUgPSBcIlwiKSB7XG4gIGNvbnN0IG1lc3NhZ2VTdWZmaXggPSBpbnB1dE5hbWUgPT09IFwiXCIgPyBcImludmFsaWQgbGVuZ3RoXCIgOiBgaW52YWxpZCAke2lucHV0TmFtZX0gbGVuZ3RoYDtcbiAgY29uc3QgaW5wdXRCaWdJbnQgPSBCaWdJbnQoaW5wdXQpO1xuICBjb25zdCBsb3dlckJvdW5kQmlnSW50ID0gQmlnSW50KGxvd2VyQm91bmQpO1xuICBjb25zdCB1cHBlckJvdW5kQmlnSW50ID0gQmlnSW50KHVwcGVyQm91bmQpO1xuICBhc3NlcnQoXG4gICAgaW5wdXRCaWdJbnQgPj0gbG93ZXJCb3VuZEJpZ0ludCAmJiBpbnB1dEJpZ0ludCA8PSB1cHBlckJvdW5kQmlnSW50LFxuICAgIGBNZXNzYWdlIG5vdCBzaWduYWJsZSwgJHttZXNzYWdlU3VmZml4fS5gXG4gICk7XG59XG5mdW5jdGlvbiBiaWdOdW1iZXJpc2hBcnJheVRvRGVjaW1hbFN0cmluZ0FycmF5KHJhd0NhbGxkYXRhKSB7XG4gIHJldHVybiByYXdDYWxsZGF0YS5tYXAoKHgpID0+IHRvQmlnSW50KHgpLnRvU3RyaW5nKDEwKSk7XG59XG5mdW5jdGlvbiBiaWdOdW1iZXJpc2hBcnJheVRvSGV4YWRlY2ltYWxTdHJpbmdBcnJheShyYXdDYWxsZGF0YSkge1xuICByZXR1cm4gcmF3Q2FsbGRhdGEubWFwKCh4KSA9PiB0b0hleCh4KSk7XG59XG52YXIgaXNTdHJpbmdXaG9sZU51bWJlciA9ICh2YWx1ZSkgPT4gL15cXGQrJC8udGVzdCh2YWx1ZSk7XG5mdW5jdGlvbiBnZXREZWNpbWFsU3RyaW5nKHZhbHVlKSB7XG4gIGlmIChpc0hleCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaGV4VG9EZWNpbWFsU3RyaW5nKHZhbHVlKTtcbiAgfVxuICBpZiAoaXNTdHJpbmdXaG9sZU51bWJlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGAke3ZhbHVlfSBuZWVkIHRvIGJlIGhleC1zdHJpbmcgb3Igd2hvbGUtbnVtYmVyLXN0cmluZ2ApO1xufVxuZnVuY3Rpb24gZ2V0SGV4U3RyaW5nKHZhbHVlKSB7XG4gIGlmIChpc0hleCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3RyaW5nV2hvbGVOdW1iZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRvSGV4U3RyaW5nKHZhbHVlKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYCR7dmFsdWV9IG5lZWQgdG8gYmUgaGV4LXN0cmluZyBvciB3aG9sZS1udW1iZXItc3RyaW5nYCk7XG59XG5mdW5jdGlvbiBnZXRIZXhTdHJpbmdBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUubWFwKChlbCkgPT4gZ2V0SGV4U3RyaW5nKGVsKSk7XG59XG52YXIgdG9DYWlyb0Jvb2wgPSAodmFsdWUpID0+ICgrdmFsdWUpLnRvU3RyaW5nKCk7XG5mdW5jdGlvbiBoZXhUb0J5dGVzKHZhbHVlKSB7XG4gIGlmICghaXNIZXgodmFsdWUpKVxuICAgIHRocm93IG5ldyBFcnJvcihgJHt2YWx1ZX0gbmVlZCB0byBiZSBhIGhleC1zdHJpbmdgKTtcbiAgbGV0IGFkYXB0ZWRWYWx1ZSA9IHJlbW92ZUhleFByZWZpeCh2YWx1ZSk7XG4gIGlmIChhZGFwdGVkVmFsdWUubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgIGFkYXB0ZWRWYWx1ZSA9IGAwJHthZGFwdGVkVmFsdWV9YDtcbiAgfVxuICByZXR1cm4gaGV4VG9CeXRlc05vYmxlKGFkYXB0ZWRWYWx1ZSk7XG59XG5cbi8vIHNyYy91dGlscy9zZWxlY3Rvci50c1xudmFyIHNlbGVjdG9yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNlbGVjdG9yX2V4cG9ydHMsIHtcbiAgZ2V0U2VsZWN0b3I6ICgpID0+IGdldFNlbGVjdG9yLFxuICBnZXRTZWxlY3RvckZyb21OYW1lOiAoKSA9PiBnZXRTZWxlY3RvckZyb21OYW1lLFxuICBrZWNjYWtCbjogKCkgPT4ga2VjY2FrQm4sXG4gIHN0YXJrbmV0S2VjY2FrOiAoKSA9PiBzdGFya25ldEtlY2Nha1xufSk7XG5pbXBvcnQgeyBrZWNjYWsgfSBmcm9tIFwiQHNjdXJlL3N0YXJrbmV0XCI7XG5mdW5jdGlvbiBrZWNjYWtCbih2YWx1ZSkge1xuICBjb25zdCBoZXhXaXRob3V0UHJlZml4ID0gcmVtb3ZlSGV4UHJlZml4KHRvSGV4KEJpZ0ludCh2YWx1ZSkpKTtcbiAgY29uc3QgZXZlbkhleCA9IGhleFdpdGhvdXRQcmVmaXgubGVuZ3RoICUgMiA9PT0gMCA/IGhleFdpdGhvdXRQcmVmaXggOiBgMCR7aGV4V2l0aG91dFByZWZpeH1gO1xuICByZXR1cm4gYWRkSGV4UHJlZml4KGtlY2NhayhoZXhUb0J5dGVzKGFkZEhleFByZWZpeChldmVuSGV4KSkpLnRvU3RyaW5nKDE2KSk7XG59XG5mdW5jdGlvbiBrZWNjYWtIZXgoc3RyKSB7XG4gIHJldHVybiBhZGRIZXhQcmVmaXgoa2VjY2FrKHV0ZjhUb0FycmF5KHN0cikpLnRvU3RyaW5nKDE2KSk7XG59XG5mdW5jdGlvbiBzdGFya25ldEtlY2NhayhzdHIpIHtcbiAgY29uc3QgaGFzaCA9IEJpZ0ludChrZWNjYWtIZXgoc3RyKSk7XG4gIHJldHVybiBoYXNoICYgTUFTS18yNTA7XG59XG5mdW5jdGlvbiBnZXRTZWxlY3RvckZyb21OYW1lKGZ1bmNOYW1lKSB7XG4gIHJldHVybiB0b0hleChzdGFya25ldEtlY2NhayhmdW5jTmFtZSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VsZWN0b3IodmFsdWUpIHtcbiAgaWYgKGlzSGV4KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTdHJpbmdXaG9sZU51bWJlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdG9IZXhTdHJpbmcodmFsdWUpO1xuICB9XG4gIHJldHVybiBnZXRTZWxlY3RvckZyb21OYW1lKHZhbHVlKTtcbn1cblxuLy8gc3JjL3V0aWxzL3Nob3J0U3RyaW5nLnRzXG52YXIgc2hvcnRTdHJpbmdfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc2hvcnRTdHJpbmdfZXhwb3J0cywge1xuICBkZWNvZGVTaG9ydFN0cmluZzogKCkgPT4gZGVjb2RlU2hvcnRTdHJpbmcsXG4gIGVuY29kZVNob3J0U3RyaW5nOiAoKSA9PiBlbmNvZGVTaG9ydFN0cmluZyxcbiAgaXNBU0NJSTogKCkgPT4gaXNBU0NJSSxcbiAgaXNEZWNpbWFsU3RyaW5nOiAoKSA9PiBpc0RlY2ltYWxTdHJpbmcsXG4gIGlzTG9uZ1RleHQ6ICgpID0+IGlzTG9uZ1RleHQsXG4gIGlzU2hvcnRTdHJpbmc6ICgpID0+IGlzU2hvcnRTdHJpbmcsXG4gIGlzU2hvcnRUZXh0OiAoKSA9PiBpc1Nob3J0VGV4dCxcbiAgaXNUZXh0OiAoKSA9PiBpc1RleHQsXG4gIHNwbGl0TG9uZ1N0cmluZzogKCkgPT4gc3BsaXRMb25nU3RyaW5nXG59KTtcbmZ1bmN0aW9uIGlzQVNDSUkoc3RyKSB7XG4gIHJldHVybiAvXltcXHgwMC1cXHg3Rl0qJC8udGVzdChzdHIpO1xufVxuZnVuY3Rpb24gaXNTaG9ydFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5sZW5ndGggPD0gVEVYVF9UT19GRUxUX01BWF9MRU47XG59XG5mdW5jdGlvbiBpc0RlY2ltYWxTdHJpbmcoc3RyKSB7XG4gIHJldHVybiAvXlswLTldKiQvaS50ZXN0KHN0cik7XG59XG5mdW5jdGlvbiBpc1RleHQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICYmICFpc0hleCh2YWwpICYmICFpc1N0cmluZ1dob2xlTnVtYmVyKHZhbCk7XG59XG52YXIgaXNTaG9ydFRleHQgPSAodmFsKSA9PiBpc1RleHQodmFsKSAmJiBpc1Nob3J0U3RyaW5nKHZhbCk7XG52YXIgaXNMb25nVGV4dCA9ICh2YWwpID0+IGlzVGV4dCh2YWwpICYmICFpc1Nob3J0U3RyaW5nKHZhbCk7XG5mdW5jdGlvbiBzcGxpdExvbmdTdHJpbmcobG9uZ1N0cikge1xuICBjb25zdCByZWdleCA9IFJlZ0V4cChgW15dezEsJHtURVhUX1RPX0ZFTFRfTUFYX0xFTn19YCwgXCJnXCIpO1xuICByZXR1cm4gbG9uZ1N0ci5tYXRjaChyZWdleCkgfHwgW107XG59XG5mdW5jdGlvbiBlbmNvZGVTaG9ydFN0cmluZyhzdHIpIHtcbiAgaWYgKCFpc0FTQ0lJKHN0cikpXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3N0cn0gaXMgbm90IGFuIEFTQ0lJIHN0cmluZ2ApO1xuICBpZiAoIWlzU2hvcnRTdHJpbmcoc3RyKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7c3RyfSBpcyB0b28gbG9uZ2ApO1xuICByZXR1cm4gYWRkSGV4UHJlZml4KHN0ci5yZXBsYWNlKC8uL2csIChjaGFyKSA9PiBjaGFyLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKSk7XG59XG5mdW5jdGlvbiBkZWNvZGVTaG9ydFN0cmluZyhzdHIpIHtcbiAgaWYgKCFpc0FTQ0lJKHN0cikpXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3N0cn0gaXMgbm90IGFuIEFTQ0lJIHN0cmluZ2ApO1xuICBpZiAoaXNIZXgoc3RyKSkge1xuICAgIHJldHVybiByZW1vdmVIZXhQcmVmaXgoc3RyKS5yZXBsYWNlKC8uezJ9L2csIChoZXgpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpKTtcbiAgfVxuICBpZiAoaXNEZWNpbWFsU3RyaW5nKHN0cikpIHtcbiAgICByZXR1cm4gZGVjb2RlU2hvcnRTdHJpbmcoXCIwWFwiLmNvbmNhdChCaWdJbnQoc3RyKS50b1N0cmluZygxNikpKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYCR7c3RyfSBpcyBub3QgSGV4IG9yIGRlY2ltYWxgKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL2NhaXJvLnRzXG52YXIgY2Fpcm9fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoY2Fpcm9fZXhwb3J0cywge1xuICBmZWx0OiAoKSA9PiBmZWx0LFxuICBnZXRBYmlDb250cmFjdFZlcnNpb246ICgpID0+IGdldEFiaUNvbnRyYWN0VmVyc2lvbixcbiAgZ2V0QXJyYXlUeXBlOiAoKSA9PiBnZXRBcnJheVR5cGUsXG4gIGlzQ2Fpcm8xQWJpOiAoKSA9PiBpc0NhaXJvMUFiaSxcbiAgaXNDYWlybzFUeXBlOiAoKSA9PiBpc0NhaXJvMVR5cGUsXG4gIGlzTGVuOiAoKSA9PiBpc0xlbixcbiAgaXNUeXBlQXJyYXk6ICgpID0+IGlzVHlwZUFycmF5LFxuICBpc1R5cGVCb29sOiAoKSA9PiBpc1R5cGVCb29sLFxuICBpc1R5cGVDb250cmFjdEFkZHJlc3M6ICgpID0+IGlzVHlwZUNvbnRyYWN0QWRkcmVzcyxcbiAgaXNUeXBlRW51bTogKCkgPT4gaXNUeXBlRW51bSxcbiAgaXNUeXBlRXRoQWRkcmVzczogKCkgPT4gaXNUeXBlRXRoQWRkcmVzcyxcbiAgaXNUeXBlRmVsdDogKCkgPT4gaXNUeXBlRmVsdCxcbiAgaXNUeXBlTGl0dGVyYWw6ICgpID0+IGlzVHlwZUxpdHRlcmFsLFxuICBpc1R5cGVOYW1lZFR1cGxlOiAoKSA9PiBpc1R5cGVOYW1lZFR1cGxlLFxuICBpc1R5cGVPcHRpb246ICgpID0+IGlzVHlwZU9wdGlvbixcbiAgaXNUeXBlUmVzdWx0OiAoKSA9PiBpc1R5cGVSZXN1bHQsXG4gIGlzVHlwZVN0cnVjdDogKCkgPT4gaXNUeXBlU3RydWN0LFxuICBpc1R5cGVUdXBsZTogKCkgPT4gaXNUeXBlVHVwbGUsXG4gIGlzVHlwZVVpbnQ6ICgpID0+IGlzVHlwZVVpbnQsXG4gIGlzVHlwZVVpbnQyNTY6ICgpID0+IGlzVHlwZVVpbnQyNTYsXG4gIHR1cGxlOiAoKSA9PiB0dXBsZSxcbiAgdWludDI1NjogKCkgPT4gdWludDI1NlxufSk7XG5cbi8vIHNyYy91dGlscy91aW50MjU2LnRzXG52YXIgdWludDI1Nl9leHBvcnRzID0ge307XG5fX2V4cG9ydCh1aW50MjU2X2V4cG9ydHMsIHtcbiAgVUlOVF8xMjhfTUFYOiAoKSA9PiBVSU5UXzEyOF9NQVgsXG4gIFVJTlRfMjU2X01BWDogKCkgPT4gVUlOVF8yNTZfTUFYLFxuICBiblRvVWludDI1NjogKCkgPT4gYm5Ub1VpbnQyNTYsXG4gIGlzVWludDI1NjogKCkgPT4gaXNVaW50MjU2LFxuICB1aW50MjU2VG9CTjogKCkgPT4gdWludDI1NlRvQk5cbn0pO1xudmFyIFVJTlRfMTI4X01BWCA9ICgxbiA8PCAxMjhuKSAtIDFuO1xudmFyIFVJTlRfMjU2X01BWCA9ICgxbiA8PCAyNTZuKSAtIDFuO1xuZnVuY3Rpb24gdWludDI1NlRvQk4odWludDI1NjIpIHtcbiAgcmV0dXJuICh0b0JpZ0ludCh1aW50MjU2Mi5oaWdoKSA8PCAxMjhuKSArIHRvQmlnSW50KHVpbnQyNTYyLmxvdyk7XG59XG5mdW5jdGlvbiBpc1VpbnQyNTYoYm4pIHtcbiAgcmV0dXJuIHRvQmlnSW50KGJuKSA8PSBVSU5UXzI1Nl9NQVg7XG59XG5mdW5jdGlvbiBiblRvVWludDI1Nihibikge1xuICBjb25zdCBiaSA9IHRvQmlnSW50KGJuKTtcbiAgaWYgKCFpc1VpbnQyNTYoYmkpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciBpcyB0b28gbGFyZ2VcIik7XG4gIHJldHVybiB7XG4gICAgbG93OiBhZGRIZXhQcmVmaXgoKGJpICYgVUlOVF8xMjhfTUFYKS50b1N0cmluZygxNikpLFxuICAgIGhpZ2g6IGFkZEhleFByZWZpeCgoYmkgPj4gMTI4bikudG9TdHJpbmcoMTYpKVxuICB9O1xufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvY2Fpcm8udHNcbnZhciBpc0xlbiA9IChuYW1lKSA9PiAvX2xlbiQvLnRlc3QobmFtZSk7XG52YXIgaXNUeXBlRmVsdCA9ICh0eXBlKSA9PiB0eXBlID09PSBcImZlbHRcIiB8fCB0eXBlID09PSBcImNvcmU6OmZlbHQyNTJcIjtcbnZhciBpc1R5cGVBcnJheSA9ICh0eXBlKSA9PiAvXFwqLy50ZXN0KHR5cGUpIHx8IHR5cGUuc3RhcnRzV2l0aChcImNvcmU6OmFycmF5OjpBcnJheTo6XCIpIHx8IHR5cGUuc3RhcnRzV2l0aChcImNvcmU6OmFycmF5OjpTcGFuOjpcIik7XG52YXIgaXNUeXBlVHVwbGUgPSAodHlwZSkgPT4gL15cXCguKlxcKSQvaS50ZXN0KHR5cGUpO1xudmFyIGlzVHlwZU5hbWVkVHVwbGUgPSAodHlwZSkgPT4gL1xcKC4qXFwpL2kudGVzdCh0eXBlKSAmJiB0eXBlLmluY2x1ZGVzKFwiOlwiKTtcbnZhciBpc1R5cGVTdHJ1Y3QgPSAodHlwZSwgc3RydWN0cykgPT4gdHlwZSBpbiBzdHJ1Y3RzO1xudmFyIGlzVHlwZUVudW0gPSAodHlwZSwgZW51bXMpID0+IHR5cGUgaW4gZW51bXM7XG52YXIgaXNUeXBlT3B0aW9uID0gKHR5cGUpID0+IHR5cGUuc3RhcnRzV2l0aChcImNvcmU6Om9wdGlvbjo6T3B0aW9uOjpcIik7XG52YXIgaXNUeXBlUmVzdWx0ID0gKHR5cGUpID0+IHR5cGUuc3RhcnRzV2l0aChcImNvcmU6OnJlc3VsdDo6UmVzdWx0OjpcIik7XG52YXIgaXNUeXBlVWludCA9ICh0eXBlKSA9PiBPYmplY3QudmFsdWVzKFVpbnQpLmluY2x1ZGVzKHR5cGUpO1xudmFyIGlzVHlwZUxpdHRlcmFsID0gKHR5cGUpID0+IE9iamVjdC52YWx1ZXMoTGl0dGVyYWwpLmluY2x1ZGVzKHR5cGUpO1xudmFyIGlzVHlwZVVpbnQyNTYgPSAodHlwZSkgPT4gdHlwZSA9PT0gXCJjb3JlOjppbnRlZ2VyOjp1MjU2XCI7XG52YXIgaXNUeXBlQm9vbCA9ICh0eXBlKSA9PiB0eXBlID09PSBcImNvcmU6OmJvb2xcIjtcbnZhciBpc1R5cGVDb250cmFjdEFkZHJlc3MgPSAodHlwZSkgPT4gdHlwZSA9PT0gXCJjb3JlOjpzdGFya25ldDo6Y29udHJhY3RfYWRkcmVzczo6Q29udHJhY3RBZGRyZXNzXCI7XG52YXIgaXNUeXBlRXRoQWRkcmVzcyA9ICh0eXBlKSA9PiB0eXBlID09PSBcImNvcmU6OnN0YXJrbmV0OjpldGhfYWRkcmVzczo6RXRoQWRkcmVzc1wiO1xudmFyIGlzQ2Fpcm8xVHlwZSA9ICh0eXBlKSA9PiB0eXBlLmluY2x1ZGVzKFwiOjpcIik7XG52YXIgZ2V0QXJyYXlUeXBlID0gKHR5cGUpID0+IHtcbiAgaWYgKGlzQ2Fpcm8xVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiB0eXBlLnN1YnN0cmluZyh0eXBlLmluZGV4T2YoXCI8XCIpICsgMSwgdHlwZS5sYXN0SW5kZXhPZihcIj5cIikpO1xuICB9XG4gIHJldHVybiB0eXBlLnJlcGxhY2UoXCIqXCIsIFwiXCIpO1xufTtcbmZ1bmN0aW9uIGlzQ2Fpcm8xQWJpKGFiaSkge1xuICBjb25zdCB7IGNhaXJvIH0gPSBnZXRBYmlDb250cmFjdFZlcnNpb24oYWJpKTtcbiAgaWYgKGNhaXJvID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBkZXRlcm1pbmUgQ2Fpcm8gdmVyc2lvblwiKTtcbiAgfVxuICByZXR1cm4gY2Fpcm8gPT09IFwiMVwiO1xufVxuZnVuY3Rpb24gZ2V0QWJpQ29udHJhY3RWZXJzaW9uKGFiaSkge1xuICBpZiAoYWJpLmZpbmQoKGl0KSA9PiBpdC50eXBlID09PSBcImludGVyZmFjZVwiKSkge1xuICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IFwiMlwiIH07XG4gIH1cbiAgY29uc3QgdGVzdEZ1bmN0aW9uID0gYWJpLmZpbmQoXG4gICAgKGl0KSA9PiBpdC50eXBlID09PSBcImZ1bmN0aW9uXCIgJiYgKGl0LmlucHV0cy5sZW5ndGggfHwgaXQub3V0cHV0cy5sZW5ndGgpXG4gICk7XG4gIGlmICghdGVzdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHsgY2Fpcm86IHZvaWQgMCwgY29tcGlsZXI6IHZvaWQgMCB9O1xuICB9XG4gIGNvbnN0IGlvID0gdGVzdEZ1bmN0aW9uLmlucHV0cy5sZW5ndGggPyB0ZXN0RnVuY3Rpb24uaW5wdXRzIDogdGVzdEZ1bmN0aW9uLm91dHB1dHM7XG4gIGlmIChpc0NhaXJvMVR5cGUoaW9bMF0udHlwZSkpIHtcbiAgICByZXR1cm4geyBjYWlybzogXCIxXCIsIGNvbXBpbGVyOiBcIjFcIiB9O1xuICB9XG4gIHJldHVybiB7IGNhaXJvOiBcIjBcIiwgY29tcGlsZXI6IFwiMFwiIH07XG59XG52YXIgdWludDI1NiA9IChpdCkgPT4ge1xuICBjb25zdCBibiA9IEJpZ0ludChpdCk7XG4gIGlmICghaXNVaW50MjU2KGJuKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgaXMgdG9vIGxhcmdlXCIpO1xuICByZXR1cm4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgbG93OiAoYm4gJiBVSU5UXzEyOF9NQVgpLnRvU3RyaW5nKDEwKSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIGhpZ2g6IChibiA+PiAxMjhuKS50b1N0cmluZygxMClcbiAgfTtcbn07XG52YXIgdHVwbGUgPSAoLi4uYXJncykgPT4gKHsgLi4uYXJncyB9KTtcbmZ1bmN0aW9uIGZlbHQoaXQpIHtcbiAgaWYgKGlzQmlnSW50KGl0KSB8fCB0eXBlb2YgaXQgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzSW50ZWdlcihpdCkpIHtcbiAgICByZXR1cm4gaXQudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAoaXNUZXh0KGl0KSkge1xuICAgIGlmICghaXNTaG9ydFN0cmluZyhpdCkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke2l0fSBpcyBhIGxvbmcgc3RyaW5nID4gMzEgY2hhcnMsIGZlbHQgY2FuIHN0b3JlIHNob3J0IHN0cmluZ3MsIHNwbGl0IGl0IHRvIGFycmF5IG9mIHNob3J0IHN0cmluZ3NgXG4gICAgICApO1xuICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVTaG9ydFN0cmluZyhpdCk7XG4gICAgcmV0dXJuIEJpZ0ludChlbmNvZGVkKS50b1N0cmluZygpO1xuICB9XG4gIGlmICh0eXBlb2YgaXQgPT09IFwic3RyaW5nXCIgJiYgaXNIZXgoaXQpKSB7XG4gICAgcmV0dXJuIEJpZ0ludChpdCkudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAodHlwZW9mIGl0ID09PSBcInN0cmluZ1wiICYmIGlzU3RyaW5nV2hvbGVOdW1iZXIoaXQpKSB7XG4gICAgcmV0dXJuIGl0O1xuICB9XG4gIGlmICh0eXBlb2YgaXQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIGAkeytpdH1gO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgJHtpdH0gY2FuJ3QgYmUgY29tcHV0ZWQgYnkgZmVsdCgpYCk7XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9lbnVtL0NhaXJvQ3VzdG9tRW51bS50c1xudmFyIENhaXJvQ3VzdG9tRW51bSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBlbnVtQ29udGVudCBhbiBvYmplY3Qgd2l0aCB0aGUgdmFyaWFudHMgYXMga2V5cyBhbmQgdGhlIGNvbnRlbnQgYXMgdmFsdWUuIE9ubHkgb25lIGNvbnRlbnQgc2hhbGwgYmUgZGVmaW5lZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVudW1Db250ZW50KSB7XG4gICAgY29uc3QgdmFyaWFudHNMaXN0ID0gT2JqZWN0LnZhbHVlcyhlbnVtQ29udGVudCk7XG4gICAgaWYgKHZhcmlhbnRzTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRW51bSBtdXN0IGhhdmUgYSBsZWFzdCAxIHZhcmlhbnRcIik7XG4gICAgfVxuICAgIGNvbnN0IG5iQWN0aXZlVmFyaWFudHMgPSB2YXJpYW50c0xpc3QuZmlsdGVyKFxuICAgICAgKGNvbnRlbnQpID0+IHR5cGVvZiBjb250ZW50ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgKS5sZW5ndGg7XG4gICAgaWYgKG5iQWN0aXZlVmFyaWFudHMgIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRW51bSBtdXN0IGhhdmUgZXhhY3RseSBvbmUgYWN0aXZlIHZhcmlhbnRcIik7XG4gICAgfVxuICAgIHRoaXMudmFyaWFudCA9IGVudW1Db250ZW50O1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgY29udGVudCBvZiB0aGUgdmFsaWQgdmFyaWFudCBvZiBhIENhaXJvIGN1c3RvbSBFbnVtLlxuICAgKi9cbiAgdW53cmFwKCkge1xuICAgIGNvbnN0IHZhcmlhbnRzID0gT2JqZWN0LmVudHJpZXModGhpcy52YXJpYW50KTtcbiAgICBjb25zdCBhY3RpdmVWYXJpYW50ID0gdmFyaWFudHMuZmluZCgoaXRlbSkgPT4gdHlwZW9mIGl0ZW1bMV0gIT09IFwidW5kZWZpbmVkXCIpO1xuICAgIGlmICh0eXBlb2YgYWN0aXZlVmFyaWFudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZVZhcmlhbnRbMV07XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSB2YWxpZCB2YXJpYW50IG9mIGEgQ2Fpcm8gY3VzdG9tIEVudW0uXG4gICAqL1xuICBhY3RpdmVWYXJpYW50KCkge1xuICAgIGNvbnN0IHZhcmlhbnRzID0gT2JqZWN0LmVudHJpZXModGhpcy52YXJpYW50KTtcbiAgICBjb25zdCBhY3RpdmVWYXJpYW50ID0gdmFyaWFudHMuZmluZCgoaXRlbSkgPT4gdHlwZW9mIGl0ZW1bMV0gIT09IFwidW5kZWZpbmVkXCIpO1xuICAgIGlmICh0eXBlb2YgYWN0aXZlVmFyaWFudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVWYXJpYW50WzBdO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvZW51bS9DYWlyb09wdGlvbi50c1xudmFyIENhaXJvT3B0aW9uVmFyaWFudCA9IC8qIEBfX1BVUkVfXyAqLyAoKENhaXJvT3B0aW9uVmFyaWFudDIpID0+IHtcbiAgQ2Fpcm9PcHRpb25WYXJpYW50MltDYWlyb09wdGlvblZhcmlhbnQyW1wiU29tZVwiXSA9IDBdID0gXCJTb21lXCI7XG4gIENhaXJvT3B0aW9uVmFyaWFudDJbQ2Fpcm9PcHRpb25WYXJpYW50MltcIk5vbmVcIl0gPSAxXSA9IFwiTm9uZVwiO1xuICByZXR1cm4gQ2Fpcm9PcHRpb25WYXJpYW50Mjtcbn0pKENhaXJvT3B0aW9uVmFyaWFudCB8fCB7fSk7XG52YXIgQ2Fpcm9PcHRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHZhcmlhbnQsIHNvbWVDb250ZW50KSB7XG4gICAgaWYgKCEodmFyaWFudCBpbiBDYWlyb09wdGlvblZhcmlhbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyB2YXJpYW50IDogc2hvdWxkIGJlIENhaXJvT3B0aW9uVmFyaWFudC5Tb21lIG9yIC5Ob25lLlwiKTtcbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPT09IDAgLyogU29tZSAqLykge1xuICAgICAgaWYgKHR5cGVvZiBzb21lQ29udGVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RoZSBjcmVhdGlvbiBvZiBhIENhaXJvIE9wdGlvbiB3aXRoIFwiU29tZVwiIHZhcmlhbnQgbmVlZHMgYSBjb250ZW50IGFzIGlucHV0LidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuU29tZSA9IHNvbWVDb250ZW50O1xuICAgICAgdGhpcy5Ob25lID0gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLlNvbWUgPSB2b2lkIDA7XG4gICAgICB0aGlzLk5vbmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdGhlIGNvbnRlbnQgb2YgdGhlIHZhbGlkIHZhcmlhbnQgb2YgYSBDYWlybyBjdXN0b20gRW51bS5cbiAgICogIElmIE5vbmUsIHJldHVybnMgJ3VuZGVmaW5lZCcuXG4gICAqL1xuICB1bndyYXAoKSB7XG4gICAgaWYgKHRoaXMuTm9uZSkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuU29tZTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsaWQgdmFyaWFudCBpcyAnaXNTb21lJy5cbiAgICovXG4gIGlzU29tZSgpIHtcbiAgICByZXR1cm4gISh0eXBlb2YgdGhpcy5Tb21lID09PSBcInVuZGVmaW5lZFwiKTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsaWQgdmFyaWFudCBpcyAnaXNOb25lJy5cbiAgICovXG4gIGlzTm9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5Ob25lID09PSB0cnVlO1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvZW51bS9DYWlyb1Jlc3VsdC50c1xudmFyIENhaXJvUmVzdWx0VmFyaWFudCA9IC8qIEBfX1BVUkVfXyAqLyAoKENhaXJvUmVzdWx0VmFyaWFudDIpID0+IHtcbiAgQ2Fpcm9SZXN1bHRWYXJpYW50MltDYWlyb1Jlc3VsdFZhcmlhbnQyW1wiT2tcIl0gPSAwXSA9IFwiT2tcIjtcbiAgQ2Fpcm9SZXN1bHRWYXJpYW50MltDYWlyb1Jlc3VsdFZhcmlhbnQyW1wiRXJyXCJdID0gMV0gPSBcIkVyclwiO1xuICByZXR1cm4gQ2Fpcm9SZXN1bHRWYXJpYW50Mjtcbn0pKENhaXJvUmVzdWx0VmFyaWFudCB8fCB7fSk7XG52YXIgQ2Fpcm9SZXN1bHQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHZhcmlhbnQsIHJlc3VsdENvbnRlbnQpIHtcbiAgICBpZiAoISh2YXJpYW50IGluIENhaXJvUmVzdWx0VmFyaWFudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIHZhcmlhbnQgOiBzaG91bGQgYmUgQ2Fpcm9SZXN1bHRWYXJpYW50Lk9rIG9yIC5FcnIuXCIpO1xuICAgIH1cbiAgICBpZiAodmFyaWFudCA9PT0gMCAvKiBPayAqLykge1xuICAgICAgdGhpcy5PayA9IHJlc3VsdENvbnRlbnQ7XG4gICAgICB0aGlzLkVyciA9IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5PayA9IHZvaWQgMDtcbiAgICAgIHRoaXMuRXJyID0gcmVzdWx0Q29udGVudDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoZSB2YWxpZCB2YXJpYW50IG9mIGEgQ2Fpcm8gUmVzdWx0LlxuICAgKi9cbiAgdW53cmFwKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5PayAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHRoaXMuT2s7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5FcnIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLkVycjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQm90aCBSZXN1bHQuT2sgYW5kIC5FcnIgYXJlIHVuZGVmaW5lZC4gTm90IGF1dGhvcml6ZWQuXCIpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB2YWxpZCB2YXJpYW50IGlzICdPaycuXG4gICAqL1xuICBpc09rKCkge1xuICAgIHJldHVybiAhKHR5cGVvZiB0aGlzLk9rID09PSBcInVuZGVmaW5lZFwiKTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsaWQgdmFyaWFudCBpcyAnaXNFcnInLlxuICAgKi9cbiAgaXNFcnIoKSB7XG4gICAgcmV0dXJuICEodHlwZW9mIHRoaXMuRXJyID09PSBcInVuZGVmaW5lZFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL2Zvcm1hdHRlci50c1xudmFyIGd1YXJkID0ge1xuICBpc0JOOiAoZGF0YSwgdHlwZSwga2V5KSA9PiB7XG4gICAgaWYgKCFpc0JpZ0ludChkYXRhW2tleV0pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRGF0YSBhbmQgZm9ybWF0dGVyIG1pc21hdGNoIG9uICR7a2V5fToke3R5cGVba2V5XX0sIGV4cGVjdGVkIHJlc3BvbnNlIGRhdGEgJHtrZXl9OiR7ZGF0YVtrZXldfSB0byBiZSBCTiBpbnN0ZWFkIGl0IGlzICR7dHlwZW9mIGRhdGFba2V5XX1gXG4gICAgICApO1xuICB9LFxuICB1bmtub3duOiAoZGF0YSwgdHlwZSwga2V5KSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmhhbmRsZWQgZm9ybWF0dGVyIHR5cGUgb24gJHtrZXl9OiR7dHlwZVtrZXldfSBmb3IgZGF0YSAke2tleX06JHtkYXRhW2tleV19YCk7XG4gIH1cbn07XG5mdW5jdGlvbiBmb3JtYXR0ZXIoZGF0YSwgdHlwZSwgc2FtZVR5cGUpIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBjb25zdCBlbFR5cGUgPSBzYW1lVHlwZSA/PyB0eXBlW2tleV07XG4gICAgaWYgKCEoa2V5IGluIHR5cGUpICYmICFzYW1lVHlwZSkge1xuICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGlmIChlbFR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFba2V5XSkpIHtcbiAgICAgICAgY29uc3QgYXJyYXlTdHIgPSBmb3JtYXR0ZXIoXG4gICAgICAgICAgZGF0YVtrZXldLFxuICAgICAgICAgIGRhdGFba2V5XS5tYXAoKF8pID0+IGVsVHlwZSlcbiAgICAgICAgKTtcbiAgICAgICAgYWNjW2tleV0gPSBPYmplY3QudmFsdWVzKGFycmF5U3RyKS5qb2luKFwiXCIpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgZ3VhcmQuaXNCTihkYXRhLCB0eXBlLCBrZXkpO1xuICAgICAgYWNjW2tleV0gPSBkZWNvZGVTaG9ydFN0cmluZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBpZiAoZWxUeXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICBndWFyZC5pc0JOKGRhdGEsIHR5cGUsIGtleSk7XG4gICAgICBhY2Nba2V5XSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVsVHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBhY2Nba2V5XSA9IGVsVHlwZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbFR5cGUpKSB7XG4gICAgICBjb25zdCBhcnJheU9iaiA9IGZvcm1hdHRlcihkYXRhW2tleV0sIGVsVHlwZSwgZWxUeXBlWzBdKTtcbiAgICAgIGFjY1trZXldID0gT2JqZWN0LnZhbHVlcyhhcnJheU9iaik7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVsVHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgYWNjW2tleV0gPSBmb3JtYXR0ZXIoZGF0YVtrZXldLCBlbFR5cGUpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgZ3VhcmQudW5rbm93bihkYXRhLCB0eXBlLCBrZXkpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3BhcnNlci9wYXJzZXItMC0xLjEuMC50c1xudmFyIEFiaVBhcnNlcjEgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFiaSkge1xuICAgIHRoaXMuYWJpID0gYWJpO1xuICB9XG4gIC8qKlxuICAgKiBhYmkgbWV0aG9kIGlucHV0cyBsZW5ndGggd2l0aG91dCAnX2xlbicgaW5wdXRzXG4gICAqIGNhaXJvIDAgcmVkdWNlclxuICAgKiBAcGFyYW0gYWJpTWV0aG9kIEZ1bmN0aW9uQWJpXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgbWV0aG9kSW5wdXRzTGVuZ3RoKGFiaU1ldGhvZCkge1xuICAgIHJldHVybiBhYmlNZXRob2QuaW5wdXRzLnJlZHVjZSgoYWNjLCBpbnB1dCkgPT4gIWlzTGVuKGlucHV0Lm5hbWUpID8gYWNjICsgMSA6IGFjYywgMCk7XG4gIH1cbiAgLyoqXG4gICAqIGdldCBtZXRob2QgZGVmaW5pdGlvbiBmcm9tIGFiaVxuICAgKiBAcGFyYW0gbmFtZSBzdHJpbmdcbiAgICogQHJldHVybnMgRnVuY3Rpb25BYmkgfCB1bmRlZmluZWRcbiAgICovXG4gIGdldE1ldGhvZChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYWJpLmZpbmQoKGl0KSA9PiBpdC5uYW1lID09PSBuYW1lKTtcbiAgfVxuICAvKipcbiAgICogR2V0IEFiaSBpbiBsZWdhY3kgZm9ybWF0XG4gICAqIEByZXR1cm5zIEFiaVxuICAgKi9cbiAgZ2V0TGVnYWN5Rm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmFiaTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3BhcnNlci9wYXJzZXItMi4wLjAudHNcbnZhciBBYmlQYXJzZXIyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhYmkpIHtcbiAgICB0aGlzLmFiaSA9IGFiaTtcbiAgfVxuICAvKipcbiAgICogYWJpIG1ldGhvZCBpbnB1dHMgbGVuZ3RoXG4gICAqIEBwYXJhbSBhYmlNZXRob2QgRnVuY3Rpb25BYmlcbiAgICogQHJldHVybnMgbnVtYmVyXG4gICAqL1xuICBtZXRob2RJbnB1dHNMZW5ndGgoYWJpTWV0aG9kKSB7XG4gICAgcmV0dXJuIGFiaU1ldGhvZC5pbnB1dHMubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBnZXQgbWV0aG9kIGRlZmluaXRpb24gZnJvbSBhYmlcbiAgICogQHBhcmFtIG5hbWUgc3RyaW5nXG4gICAqIEByZXR1cm5zIEZ1bmN0aW9uQWJpIHwgdW5kZWZpbmVkXG4gICAqL1xuICBnZXRNZXRob2QobmFtZSkge1xuICAgIGNvbnN0IGludGYgPSB0aGlzLmFiaS5maW5kKChpdCkgPT4gaXQudHlwZSA9PT0gXCJpbnRlcmZhY2VcIik7XG4gICAgcmV0dXJuIGludGYuaXRlbXMuZmluZCgoaXQpID0+IGl0Lm5hbWUgPT09IG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgQWJpIGluIGxlZ2FjeSBmb3JtYXRcbiAgICogQHJldHVybnMgQWJpXG4gICAqL1xuICBnZXRMZWdhY3lGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWJpLmZsYXRNYXAoKGUpID0+IHtcbiAgICAgIGlmIChlLnR5cGUgPT09IFwiaW50ZXJmYWNlXCIpIHtcbiAgICAgICAgcmV0dXJuIGUuaXRlbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3BhcnNlci9pbmRleC50c1xuZnVuY3Rpb24gY3JlYXRlQWJpUGFyc2VyKGFiaSkge1xuICBjb25zdCB2ZXJzaW9uID0gZ2V0QWJpVmVyc2lvbihhYmkpO1xuICBpZiAodmVyc2lvbiA9PT0gMCB8fCB2ZXJzaW9uID09PSAxKSB7XG4gICAgcmV0dXJuIG5ldyBBYmlQYXJzZXIxKGFiaSk7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDIpIHtcbiAgICByZXR1cm4gbmV3IEFiaVBhcnNlcjIoYWJpKTtcbiAgfVxuICB0aHJvdyBFcnJvcihgVW5zdXBwb3J0ZWQgQUJJIHZlcnNpb24gJHt2ZXJzaW9ufWApO1xufVxuZnVuY3Rpb24gZ2V0QWJpVmVyc2lvbihhYmkpIHtcbiAgaWYgKGFiaS5maW5kKChpdCkgPT4gaXQudHlwZSA9PT0gXCJpbnRlcmZhY2VcIikpXG4gICAgcmV0dXJuIDI7XG4gIGlmIChpc0NhaXJvMUFiaShhYmkpKVxuICAgIHJldHVybiAxO1xuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzTm9Db25zdHJ1Y3RvclZhbGlkKG1ldGhvZCwgYXJnc0NhbGxkYXRhLCBhYmlNZXRob2QpIHtcbiAgcmV0dXJuIG1ldGhvZCA9PT0gXCJjb25zdHJ1Y3RvclwiICYmICFhYmlNZXRob2QgJiYgIWFyZ3NDYWxsZGF0YS5sZW5ndGg7XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS90dXBsZS50c1xuZnVuY3Rpb24gcGFyc2VOYW1lZFR1cGxlKG5hbWVkVHVwbGUpIHtcbiAgY29uc3QgbmFtZSA9IG5hbWVkVHVwbGUuc3Vic3RyaW5nKDAsIG5hbWVkVHVwbGUuaW5kZXhPZihcIjpcIikpO1xuICBjb25zdCB0eXBlID0gbmFtZWRUdXBsZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyBcIjpcIi5sZW5ndGgpO1xuICByZXR1cm4geyBuYW1lLCB0eXBlIH07XG59XG5mdW5jdGlvbiBwYXJzZVN1YlR1cGxlKHMpIHtcbiAgaWYgKCFzLmluY2x1ZGVzKFwiKFwiKSlcbiAgICByZXR1cm4geyBzdWJUdXBsZTogW10sIHJlc3VsdDogcyB9O1xuICBjb25zdCBzdWJUdXBsZSA9IFtdO1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IHMubGVuZ3RoKSB7XG4gICAgaWYgKHNbaV0gPT09IFwiKFwiKSB7XG4gICAgICBsZXQgY291bnRlciA9IDE7XG4gICAgICBjb25zdCBsQnJhY2tldCA9IGk7XG4gICAgICBpKys7XG4gICAgICB3aGlsZSAoY291bnRlcikge1xuICAgICAgICBpZiAoc1tpXSA9PT0gXCIpXCIpXG4gICAgICAgICAgY291bnRlci0tO1xuICAgICAgICBpZiAoc1tpXSA9PT0gXCIoXCIpXG4gICAgICAgICAgY291bnRlcisrO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBzdWJUdXBsZS5wdXNoKHMuc3Vic3RyaW5nKGxCcmFja2V0LCBpKSk7XG4gICAgICByZXN1bHQgKz0gXCIgXCI7XG4gICAgICBpLS07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSBzW2ldO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdWJUdXBsZSxcbiAgICByZXN1bHRcbiAgfTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RDYWlybzBUdXBsZSh0eXBlKSB7XG4gIGNvbnN0IGNsZWFuVHlwZSA9IHR5cGUucmVwbGFjZSgvXFxzL2csIFwiXCIpLnNsaWNlKDEsIC0xKTtcbiAgY29uc3QgeyBzdWJUdXBsZSwgcmVzdWx0IH0gPSBwYXJzZVN1YlR1cGxlKGNsZWFuVHlwZSk7XG4gIGxldCByZWNvbXBvc2VkID0gcmVzdWx0LnNwbGl0KFwiLFwiKS5tYXAoKGl0KSA9PiB7XG4gICAgcmV0dXJuIHN1YlR1cGxlLmxlbmd0aCA/IGl0LnJlcGxhY2UoXCIgXCIsIHN1YlR1cGxlLnNoaWZ0KCkpIDogaXQ7XG4gIH0pO1xuICBpZiAoaXNUeXBlTmFtZWRUdXBsZSh0eXBlKSkge1xuICAgIHJlY29tcG9zZWQgPSByZWNvbXBvc2VkLnJlZHVjZSgoYWNjLCBpdCkgPT4ge1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQocGFyc2VOYW1lZFR1cGxlKGl0KSk7XG4gICAgfSwgW10pO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VkO1xufVxuZnVuY3Rpb24gZXh0cmFjdENhaXJvMVR1cGxlKHR5cGUpIHtcbiAgY29uc3QgY2xlYW5UeXBlID0gdHlwZS5yZXBsYWNlKC9cXHMvZywgXCJcIikuc2xpY2UoMSwgLTEpO1xuICBjb25zdCB7IHN1YlR1cGxlLCByZXN1bHQgfSA9IHBhcnNlU3ViVHVwbGUoY2xlYW5UeXBlKTtcbiAgY29uc3QgcmVjb21wb3NlZCA9IHJlc3VsdC5zcGxpdChcIixcIikubWFwKChpdCkgPT4ge1xuICAgIHJldHVybiBzdWJUdXBsZS5sZW5ndGggPyBpdC5yZXBsYWNlKFwiIFwiLCBzdWJUdXBsZS5zaGlmdCgpKSA6IGl0O1xuICB9KTtcbiAgcmV0dXJuIHJlY29tcG9zZWQ7XG59XG5mdW5jdGlvbiBleHRyYWN0VHVwbGVNZW1iZXJUeXBlcyh0eXBlKSB7XG4gIGlmIChpc0NhaXJvMVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gZXh0cmFjdENhaXJvMVR1cGxlKHR5cGUpO1xuICB9XG4gIHJldHVybiBleHRyYWN0Q2Fpcm8wVHVwbGUodHlwZSk7XG59XG5cbi8vIHNyYy91dGlscy9jYWxsZGF0YS9wcm9wZXJ0eU9yZGVyLnRzXG5mdW5jdGlvbiBlcnJvclUyNTYoa2V5KSB7XG4gIHJldHVybiBFcnJvcihcbiAgICBgWW91ciBvYmplY3QgaW5jbHVkZXMgdGhlIHByb3BlcnR5IDogJHtrZXl9LCBjb250YWluaW5nIGFuIFVpbnQyNTYgb2JqZWN0IHdpdGhvdXQgdGhlICdsb3cnIGFuZCAnaGlnaCcga2V5cy5gXG4gICk7XG59XG5mdW5jdGlvbiBvcmRlclByb3BzQnlBYmkodW5vcmRlcmVkT2JqZWN0LCBhYmlPZk9iamVjdCwgc3RydWN0cywgZW51bXMpIHtcbiAgY29uc3Qgb3JkZXJJbnB1dCA9ICh1bm9yZGVyZWRJdGVtLCBhYmlUeXBlKSA9PiB7XG4gICAgaWYgKGlzVHlwZUFycmF5KGFiaVR5cGUpKSB7XG4gICAgICByZXR1cm4gb3JkZXJBcnJheSh1bm9yZGVyZWRJdGVtLCBhYmlUeXBlKTtcbiAgICB9XG4gICAgaWYgKGlzVHlwZUVudW0oYWJpVHlwZSwgZW51bXMpKSB7XG4gICAgICBjb25zdCBhYmlPYmogPSBlbnVtc1thYmlUeXBlXTtcbiAgICAgIHJldHVybiBvcmRlckVudW0odW5vcmRlcmVkSXRlbSwgYWJpT2JqKTtcbiAgICB9XG4gICAgaWYgKGlzVHlwZVR1cGxlKGFiaVR5cGUpKSB7XG4gICAgICByZXR1cm4gb3JkZXJUdXBsZSh1bm9yZGVyZWRJdGVtLCBhYmlUeXBlKTtcbiAgICB9XG4gICAgaWYgKGlzVHlwZUV0aEFkZHJlc3MoYWJpVHlwZSkpIHtcbiAgICAgIHJldHVybiB1bm9yZGVyZWRJdGVtO1xuICAgIH1cbiAgICBpZiAoaXNUeXBlVWludDI1NihhYmlUeXBlKSkge1xuICAgICAgY29uc3QgdTI1NiA9IHVub3JkZXJlZEl0ZW07XG4gICAgICBpZiAodHlwZW9mIHUyNTYgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIHUyNTY7XG4gICAgICB9XG4gICAgICBpZiAoIShcImxvd1wiIGluIHUyNTYgJiYgXCJoaWdoXCIgaW4gdTI1NikpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JVMjU2KGFiaVR5cGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgbG93OiB1MjU2LmxvdywgaGlnaDogdTI1Ni5oaWdoIH07XG4gICAgfVxuICAgIGlmIChpc1R5cGVTdHJ1Y3QoYWJpVHlwZSwgc3RydWN0cykpIHtcbiAgICAgIGNvbnN0IGFiaU9mU3RydWN0ID0gc3RydWN0c1thYmlUeXBlXS5tZW1iZXJzO1xuICAgICAgcmV0dXJuIG9yZGVyU3RydWN0KHVub3JkZXJlZEl0ZW0sIGFiaU9mU3RydWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIHVub3JkZXJlZEl0ZW07XG4gIH07XG4gIGNvbnN0IG9yZGVyU3RydWN0ID0gKHVub3JkZXJlZE9iamVjdDIsIGFiaU9iamVjdCkgPT4ge1xuICAgIGNvbnN0IG9yZGVyZWRPYmplY3QyID0gYWJpT2JqZWN0LnJlZHVjZSgob3JkZXJlZE9iamVjdCwgYWJpUGFyYW0pID0+IHtcbiAgICAgIGNvbnN0IHNldFByb3BlcnR5ID0gKHZhbHVlKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkob3JkZXJlZE9iamVjdCwgYWJpUGFyYW0ubmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdmFsdWUgPz8gdW5vcmRlcmVkT2JqZWN0MlthYmlQYXJhbS5uYW1lXVxuICAgICAgfSk7XG4gICAgICBpZiAodW5vcmRlcmVkT2JqZWN0MlthYmlQYXJhbS5uYW1lXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoaXNDYWlybzFUeXBlKGFiaVBhcmFtLnR5cGUpIHx8ICFpc0xlbihhYmlQYXJhbS5uYW1lKSkge1xuICAgICAgICAgIHRocm93IEVycm9yKGBZb3VyIG9iamVjdCBuZWVkcyBhIHByb3BlcnR5IHdpdGgga2V5IDogJHthYmlQYXJhbS5uYW1lfSAuYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFByb3BlcnR5KG9yZGVySW5wdXQodW5vcmRlcmVkT2JqZWN0MlthYmlQYXJhbS5uYW1lXSwgYWJpUGFyYW0udHlwZSkpO1xuICAgICAgcmV0dXJuIG9yZGVyZWRPYmplY3Q7XG4gICAgfSwge30pO1xuICAgIHJldHVybiBvcmRlcmVkT2JqZWN0MjtcbiAgfTtcbiAgZnVuY3Rpb24gb3JkZXJBcnJheShteUFycmF5LCBhYmlQYXJhbSkge1xuICAgIGNvbnN0IHR5cGVJbkFycmF5ID0gZ2V0QXJyYXlUeXBlKGFiaVBhcmFtKTtcbiAgICBpZiAodHlwZW9mIG15QXJyYXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBteUFycmF5O1xuICAgIH1cbiAgICByZXR1cm4gbXlBcnJheS5tYXAoKG15RWxlbSkgPT4gb3JkZXJJbnB1dChteUVsZW0sIHR5cGVJbkFycmF5KSk7XG4gIH1cbiAgZnVuY3Rpb24gb3JkZXJUdXBsZSh1bm9yZGVyZWRPYmplY3QyLCBhYmlQYXJhbSkge1xuICAgIGNvbnN0IHR5cGVMaXN0ID0gZXh0cmFjdFR1cGxlTWVtYmVyVHlwZXMoYWJpUGFyYW0pO1xuICAgIGNvbnN0IG9yZGVyZWRPYmplY3QyID0gdHlwZUxpc3QucmVkdWNlKChvcmRlcmVkT2JqZWN0LCBhYmlUeXBlQ2Fpcm9YLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgbXlPYmpLZXlzID0gT2JqZWN0LmtleXModW5vcmRlcmVkT2JqZWN0Mik7XG4gICAgICBjb25zdCBzZXRQcm9wZXJ0eSA9ICh2YWx1ZSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9yZGVyZWRPYmplY3QsIGluZGV4LnRvU3RyaW5nKCksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlID8/IHVub3JkZXJlZE9iamVjdDJbbXlPYmpLZXlzW2luZGV4XV1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgYWJpVHlwZSA9IGFiaVR5cGVDYWlyb1g/LnR5cGUgPyBhYmlUeXBlQ2Fpcm9YLnR5cGUgOiBhYmlUeXBlQ2Fpcm9YO1xuICAgICAgc2V0UHJvcGVydHkob3JkZXJJbnB1dCh1bm9yZGVyZWRPYmplY3QyW215T2JqS2V5c1tpbmRleF1dLCBhYmlUeXBlKSk7XG4gICAgICByZXR1cm4gb3JkZXJlZE9iamVjdDtcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIG9yZGVyZWRPYmplY3QyO1xuICB9XG4gIGNvbnN0IG9yZGVyRW51bSA9ICh1bm9yZGVyZWRPYmplY3QyLCBhYmlPYmplY3QpID0+IHtcbiAgICBpZiAoaXNUeXBlUmVzdWx0KGFiaU9iamVjdC5uYW1lKSkge1xuICAgICAgY29uc3QgdW5vcmRlcmVkUmVzdWx0ID0gdW5vcmRlcmVkT2JqZWN0MjtcbiAgICAgIGNvbnN0IHJlc3VsdE9rVHlwZSA9IGFiaU9iamVjdC5uYW1lLnN1YnN0cmluZyhcbiAgICAgICAgYWJpT2JqZWN0Lm5hbWUuaW5kZXhPZihcIjxcIikgKyAxLFxuICAgICAgICBhYmlPYmplY3QubmFtZS5sYXN0SW5kZXhPZihcIixcIilcbiAgICAgICk7XG4gICAgICBjb25zdCByZXN1bHRFcnJUeXBlID0gYWJpT2JqZWN0Lm5hbWUuc3Vic3RyaW5nKFxuICAgICAgICBhYmlPYmplY3QubmFtZS5pbmRleE9mKFwiLFwiKSArIDEsXG4gICAgICAgIGFiaU9iamVjdC5uYW1lLmxhc3RJbmRleE9mKFwiPlwiKVxuICAgICAgKTtcbiAgICAgIGlmICh1bm9yZGVyZWRSZXN1bHQuaXNPaygpKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2Fpcm9SZXN1bHQoXG4gICAgICAgICAgMCAvKiBPayAqLyxcbiAgICAgICAgICBvcmRlcklucHV0KHVub3JkZXJlZE9iamVjdDIudW53cmFwKCksIHJlc3VsdE9rVHlwZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ2Fpcm9SZXN1bHQoXG4gICAgICAgIDEgLyogRXJyICovLFxuICAgICAgICBvcmRlcklucHV0KHVub3JkZXJlZE9iamVjdDIudW53cmFwKCksIHJlc3VsdEVyclR5cGUpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoaXNUeXBlT3B0aW9uKGFiaU9iamVjdC5uYW1lKSkge1xuICAgICAgY29uc3QgdW5vcmRlcmVkT3B0aW9uID0gdW5vcmRlcmVkT2JqZWN0MjtcbiAgICAgIGNvbnN0IHJlc3VsdFNvbWVUeXBlID0gYWJpT2JqZWN0Lm5hbWUuc3Vic3RyaW5nKFxuICAgICAgICBhYmlPYmplY3QubmFtZS5pbmRleE9mKFwiPFwiKSArIDEsXG4gICAgICAgIGFiaU9iamVjdC5uYW1lLmxhc3RJbmRleE9mKFwiPlwiKVxuICAgICAgKTtcbiAgICAgIGlmICh1bm9yZGVyZWRPcHRpb24uaXNTb21lKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDYWlyb09wdGlvbihcbiAgICAgICAgICAwIC8qIFNvbWUgKi8sXG4gICAgICAgICAgb3JkZXJJbnB1dCh1bm9yZGVyZWRPcHRpb24udW53cmFwKCksIHJlc3VsdFNvbWVUeXBlKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDYWlyb09wdGlvbigxIC8qIE5vbmUgKi8sIHt9KTtcbiAgICB9XG4gICAgY29uc3QgdW5vcmRlcmVkQ3VzdG9tRW51bSA9IHVub3JkZXJlZE9iamVjdDI7XG4gICAgY29uc3QgdmFyaWFudHMgPSBPYmplY3QuZW50cmllcyh1bm9yZGVyZWRDdXN0b21FbnVtLnZhcmlhbnQpO1xuICAgIGNvbnN0IG5ld0VudHJpZXMgPSB2YXJpYW50cy5tYXAoKHZhcmlhbnQpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFyaWFudFsxXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gdmFyaWFudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhcmlhbnRUeXBlID0gYWJpT2JqZWN0LnR5cGUuc3Vic3RyaW5nKFxuICAgICAgICBhYmlPYmplY3QudHlwZS5sYXN0SW5kZXhPZihcIjxcIikgKyAxLFxuICAgICAgICBhYmlPYmplY3QudHlwZS5sYXN0SW5kZXhPZihcIj5cIilcbiAgICAgICk7XG4gICAgICBpZiAodmFyaWFudFR5cGUgPT09IFwiKClcIikge1xuICAgICAgICByZXR1cm4gdmFyaWFudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbdmFyaWFudFswXSwgb3JkZXJJbnB1dCh1bm9yZGVyZWRDdXN0b21FbnVtLnVud3JhcCgpLCB2YXJpYW50VHlwZSldO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQ2Fpcm9DdXN0b21FbnVtKE9iamVjdC5mcm9tRW50cmllcyhuZXdFbnRyaWVzKSk7XG4gIH07XG4gIGNvbnN0IGZpbmFsT3JkZXJlZE9iamVjdCA9IGFiaU9mT2JqZWN0LnJlZHVjZSgob3JkZXJlZE9iamVjdCwgYWJpUGFyYW0pID0+IHtcbiAgICBjb25zdCBzZXRQcm9wZXJ0eSA9ICh2YWx1ZSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9yZGVyZWRPYmplY3QsIGFiaVBhcmFtLm5hbWUsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICAgIGlmIChpc0xlbihhYmlQYXJhbS5uYW1lKSAmJiAhaXNDYWlybzFUeXBlKGFiaVBhcmFtLnR5cGUpKSB7XG4gICAgICByZXR1cm4gb3JkZXJlZE9iamVjdDtcbiAgICB9XG4gICAgc2V0UHJvcGVydHkob3JkZXJJbnB1dCh1bm9yZGVyZWRPYmplY3RbYWJpUGFyYW0ubmFtZV0sIGFiaVBhcmFtLnR5cGUpKTtcbiAgICByZXR1cm4gb3JkZXJlZE9iamVjdDtcbiAgfSwge30pO1xuICByZXR1cm4gZmluYWxPcmRlcmVkT2JqZWN0O1xufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvcmVxdWVzdFBhcnNlci50c1xuZnVuY3Rpb24gcGFyc2VCYXNlVHlwZXModHlwZSwgdmFsKSB7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNUeXBlVWludDI1Nih0eXBlKTpcbiAgICAgIGNvbnN0IGVsX3VpbnQyNTYgPSB1aW50MjU2KHZhbCk7XG4gICAgICByZXR1cm4gW2ZlbHQoZWxfdWludDI1Ni5sb3cpLCBmZWx0KGVsX3VpbnQyNTYuaGlnaCldO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmVsdCh2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZVR1cGxlKGVsZW1lbnQsIHR5cGVTdHIpIHtcbiAgY29uc3QgbWVtYmVyVHlwZXMgPSBleHRyYWN0VHVwbGVNZW1iZXJUeXBlcyh0eXBlU3RyKTtcbiAgY29uc3QgZWxlbWVudHMgPSBPYmplY3QudmFsdWVzKGVsZW1lbnQpO1xuICBpZiAoZWxlbWVudHMubGVuZ3RoICE9PSBtZW1iZXJUeXBlcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGBQYXJzZVR1cGxlOiBwcm92aWRlZCBhbmQgZXhwZWN0ZWQgYWJpIHR1cGxlIHNpemUgZG8gbm90IG1hdGNoLlxuICAgICAgcHJvdmlkZWQ6ICR7ZWxlbWVudHN9IFxuICAgICAgZXhwZWN0ZWQ6ICR7bWVtYmVyVHlwZXN9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG1lbWJlclR5cGVzLm1hcCgoaXQsIGR4KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnRzW2R4XSxcbiAgICAgIHR5cGU6IGl0LnR5cGUgPz8gaXRcbiAgICB9O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlVWludDI1NihlbGVtZW50KSB7XG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IHsgbG93LCBoaWdoIH0gPSBlbGVtZW50O1xuICAgIHJldHVybiBbZmVsdChsb3cpLCBmZWx0KGhpZ2gpXTtcbiAgfVxuICBjb25zdCBlbF91aW50MjU2ID0gdWludDI1NihlbGVtZW50KTtcbiAgcmV0dXJuIFtmZWx0KGVsX3VpbnQyNTYubG93KSwgZmVsdChlbF91aW50MjU2LmhpZ2gpXTtcbn1cbmZ1bmN0aW9uIHBhcnNlQ2FsbGRhdGFWYWx1ZShlbGVtZW50LCB0eXBlLCBzdHJ1Y3RzLCBlbnVtcykge1xuICBpZiAoZWxlbWVudCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgRXJyb3IoYE1pc3NpbmcgcGFyYW1ldGVyIGZvciB0eXBlICR7dHlwZX1gKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5wdXNoKGZlbHQoZWxlbWVudC5sZW5ndGgpKTtcbiAgICBjb25zdCBhcnJheVR5cGUgPSBnZXRBcnJheVR5cGUodHlwZSk7XG4gICAgcmV0dXJuIGVsZW1lbnQucmVkdWNlKChhY2MsIGl0KSA9PiB7XG4gICAgICByZXR1cm4gYWNjLmNvbmNhdChwYXJzZUNhbGxkYXRhVmFsdWUoaXQsIGFycmF5VHlwZSwgc3RydWN0cywgZW51bXMpKTtcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIGlmIChzdHJ1Y3RzW3R5cGVdICYmIHN0cnVjdHNbdHlwZV0ubWVtYmVycy5sZW5ndGgpIHtcbiAgICBpZiAoaXNUeXBlVWludDI1Nih0eXBlKSkge1xuICAgICAgcmV0dXJuIHBhcnNlVWludDI1NihlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiY29yZTo6c3RhcmtuZXQ6OmV0aF9hZGRyZXNzOjpFdGhBZGRyZXNzXCIpXG4gICAgICByZXR1cm4gcGFyc2VCYXNlVHlwZXModHlwZSwgZWxlbWVudCk7XG4gICAgY29uc3QgeyBtZW1iZXJzIH0gPSBzdHJ1Y3RzW3R5cGVdO1xuICAgIGNvbnN0IHN1YkVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHJldHVybiBtZW1iZXJzLnJlZHVjZSgoYWNjLCBpdCkgPT4ge1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQocGFyc2VDYWxsZGF0YVZhbHVlKHN1YkVsZW1lbnRbaXQubmFtZV0sIGl0LnR5cGUsIHN0cnVjdHMsIGVudW1zKSk7XG4gICAgfSwgW10pO1xuICB9XG4gIGlmIChpc1R5cGVUdXBsZSh0eXBlKSkge1xuICAgIGNvbnN0IHR1cGxlZCA9IHBhcnNlVHVwbGUoZWxlbWVudCwgdHlwZSk7XG4gICAgcmV0dXJuIHR1cGxlZC5yZWR1Y2UoKGFjYywgaXQpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBwYXJzZUNhbGxkYXRhVmFsdWUoaXQuZWxlbWVudCwgaXQudHlwZSwgc3RydWN0cywgZW51bXMpO1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQocGFyc2VkRGF0YSk7XG4gICAgfSwgW10pO1xuICB9XG4gIGlmIChpc1R5cGVVaW50MjU2KHR5cGUpKSB7XG4gICAgcmV0dXJuIHBhcnNlVWludDI1NihlbGVtZW50KTtcbiAgfVxuICBpZiAoaXNUeXBlRW51bSh0eXBlLCBlbnVtcykpIHtcbiAgICBjb25zdCB7IHZhcmlhbnRzIH0gPSBlbnVtc1t0eXBlXTtcbiAgICBpZiAoaXNUeXBlT3B0aW9uKHR5cGUpKSB7XG4gICAgICBjb25zdCBteU9wdGlvbiA9IGVsZW1lbnQ7XG4gICAgICBpZiAobXlPcHRpb24uaXNTb21lKCkpIHtcbiAgICAgICAgY29uc3QgbGlzdFR5cGVWYXJpYW50MiA9IHZhcmlhbnRzLmZpbmQoKHZhcmlhbnQpID0+IHZhcmlhbnQubmFtZSA9PT0gXCJTb21lXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RUeXBlVmFyaWFudDIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgRXJyb3IgaW4gYWJpIDogT3B0aW9uIGhhcyBubyAnU29tZScgdmFyaWFudC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlVmFyaWFudFNvbWUgPSBsaXN0VHlwZVZhcmlhbnQyLnR5cGU7XG4gICAgICAgIGlmICh0eXBlVmFyaWFudFNvbWUgPT09IFwiKClcIikge1xuICAgICAgICAgIHJldHVybiAwIC8qIFNvbWUgKi8udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRQYXJhbWV0ZXIyID0gcGFyc2VDYWxsZGF0YVZhbHVlKFxuICAgICAgICAgIG15T3B0aW9uLnVud3JhcCgpLFxuICAgICAgICAgIHR5cGVWYXJpYW50U29tZSxcbiAgICAgICAgICBzdHJ1Y3RzLFxuICAgICAgICAgIGVudW1zXG4gICAgICAgICk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFBhcmFtZXRlcjIpKSB7XG4gICAgICAgICAgcmV0dXJuIFswIC8qIFNvbWUgKi8udG9TdHJpbmcoKSwgLi4ucGFyc2VkUGFyYW1ldGVyMl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFswIC8qIFNvbWUgKi8udG9TdHJpbmcoKSwgcGFyc2VkUGFyYW1ldGVyMl07XG4gICAgICB9XG4gICAgICByZXR1cm4gMSAvKiBOb25lICovLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChpc1R5cGVSZXN1bHQodHlwZSkpIHtcbiAgICAgIGNvbnN0IG15UmVzdWx0ID0gZWxlbWVudDtcbiAgICAgIGlmIChteVJlc3VsdC5pc09rKCkpIHtcbiAgICAgICAgY29uc3QgbGlzdFR5cGVWYXJpYW50MyA9IHZhcmlhbnRzLmZpbmQoKHZhcmlhbnQpID0+IHZhcmlhbnQubmFtZSA9PT0gXCJPa1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0VHlwZVZhcmlhbnQzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoYEVycm9yIGluIGFiaSA6IFJlc3VsdCBoYXMgbm8gJ09rJyB2YXJpYW50LmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR5cGVWYXJpYW50T2sgPSBsaXN0VHlwZVZhcmlhbnQzLnR5cGU7XG4gICAgICAgIGlmICh0eXBlVmFyaWFudE9rID09PSBcIigpXCIpIHtcbiAgICAgICAgICByZXR1cm4gMCAvKiBPayAqLy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFBhcmFtZXRlcjMgPSBwYXJzZUNhbGxkYXRhVmFsdWUoXG4gICAgICAgICAgbXlSZXN1bHQudW53cmFwKCksXG4gICAgICAgICAgdHlwZVZhcmlhbnRPayxcbiAgICAgICAgICBzdHJ1Y3RzLFxuICAgICAgICAgIGVudW1zXG4gICAgICAgICk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFBhcmFtZXRlcjMpKSB7XG4gICAgICAgICAgcmV0dXJuIFswIC8qIE9rICovLnRvU3RyaW5nKCksIC4uLnBhcnNlZFBhcmFtZXRlcjNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbMCAvKiBPayAqLy50b1N0cmluZygpLCBwYXJzZWRQYXJhbWV0ZXIzXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3RUeXBlVmFyaWFudDIgPSB2YXJpYW50cy5maW5kKCh2YXJpYW50KSA9PiB2YXJpYW50Lm5hbWUgPT09IFwiRXJyXCIpO1xuICAgICAgaWYgKHR5cGVvZiBsaXN0VHlwZVZhcmlhbnQyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBFcnJvciBpbiBhYmkgOiBSZXN1bHQgaGFzIG5vICdFcnInIHZhcmlhbnQuYCk7XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlVmFyaWFudEVyciA9IGxpc3RUeXBlVmFyaWFudDIudHlwZTtcbiAgICAgIGlmICh0eXBlVmFyaWFudEVyciA9PT0gXCIoKVwiKSB7XG4gICAgICAgIHJldHVybiAxIC8qIEVyciAqLy50b1N0cmluZygpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyc2VkUGFyYW1ldGVyMiA9IHBhcnNlQ2FsbGRhdGFWYWx1ZShteVJlc3VsdC51bndyYXAoKSwgdHlwZVZhcmlhbnRFcnIsIHN0cnVjdHMsIGVudW1zKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFBhcmFtZXRlcjIpKSB7XG4gICAgICAgIHJldHVybiBbMSAvKiBFcnIgKi8udG9TdHJpbmcoKSwgLi4ucGFyc2VkUGFyYW1ldGVyMl07XG4gICAgICB9XG4gICAgICByZXR1cm4gWzEgLyogRXJyICovLnRvU3RyaW5nKCksIHBhcnNlZFBhcmFtZXRlcjJdO1xuICAgIH1cbiAgICBjb25zdCBteUVudW0gPSBlbGVtZW50O1xuICAgIGNvbnN0IGFjdGl2ZVZhcmlhbnQgPSBteUVudW0uYWN0aXZlVmFyaWFudCgpO1xuICAgIGNvbnN0IGxpc3RUeXBlVmFyaWFudCA9IHZhcmlhbnRzLmZpbmQoKHZhcmlhbnQpID0+IHZhcmlhbnQubmFtZSA9PT0gYWN0aXZlVmFyaWFudCk7XG4gICAgaWYgKHR5cGVvZiBsaXN0VHlwZVZhcmlhbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IEVycm9yKGBOb3QgZmluZCBpbiBhYmkgOiBFbnVtIGhhcyBubyAnJHthY3RpdmVWYXJpYW50fScgdmFyaWFudC5gKTtcbiAgICB9XG4gICAgY29uc3QgdHlwZUFjdGl2ZVZhcmlhbnQgPSBsaXN0VHlwZVZhcmlhbnQudHlwZTtcbiAgICBjb25zdCBudW1BY3RpdmVWYXJpYW50ID0gdmFyaWFudHMuZmluZEluZGV4KCh2YXJpYW50KSA9PiB2YXJpYW50Lm5hbWUgPT09IGFjdGl2ZVZhcmlhbnQpO1xuICAgIGlmICh0eXBlQWN0aXZlVmFyaWFudCA9PT0gXCIoKVwiKSB7XG4gICAgICByZXR1cm4gbnVtQWN0aXZlVmFyaWFudC50b1N0cmluZygpO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWRQYXJhbWV0ZXIgPSBwYXJzZUNhbGxkYXRhVmFsdWUobXlFbnVtLnVud3JhcCgpLCB0eXBlQWN0aXZlVmFyaWFudCwgc3RydWN0cywgZW51bXMpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFBhcmFtZXRlcikpIHtcbiAgICAgIHJldHVybiBbbnVtQWN0aXZlVmFyaWFudC50b1N0cmluZygpLCAuLi5wYXJzZWRQYXJhbWV0ZXJdO1xuICAgIH1cbiAgICByZXR1cm4gW251bUFjdGl2ZVZhcmlhbnQudG9TdHJpbmcoKSwgcGFyc2VkUGFyYW1ldGVyXTtcbiAgfVxuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBFcnJvcihgUGFyYW1ldGVyICR7ZWxlbWVudH0gZG8gbm90IGFsaWduIHdpdGggYWJpIHBhcmFtZXRlciAke3R5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlQmFzZVR5cGVzKHR5cGUsIGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gcGFyc2VDYWxsZGF0YUZpZWxkKGFyZ3NJdGVyYXRvciwgaW5wdXQsIHN0cnVjdHMsIGVudW1zKSB7XG4gIGNvbnN0IHsgbmFtZSwgdHlwZSB9ID0gaW5wdXQ7XG4gIGxldCB7IHZhbHVlIH0gPSBhcmdzSXRlcmF0b3IubmV4dCgpO1xuICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIGlzVHlwZUFycmF5KHR5cGUpOlxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiAhaXNUZXh0KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihgQUJJIGV4cGVjdGVkIHBhcmFtZXRlciAke25hbWV9IHRvIGJlIGFycmF5IG9yIGxvbmcgc3RyaW5nLCBnb3QgJHt2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsdWUgPSBzcGxpdExvbmdTdHJpbmcodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlQ2FsbGRhdGFWYWx1ZSh2YWx1ZSwgaW5wdXQudHlwZSwgc3RydWN0cywgZW51bXMpO1xuICAgIGNhc2UgdHlwZSA9PT0gXCJjb3JlOjpzdGFya25ldDo6ZXRoX2FkZHJlc3M6OkV0aEFkZHJlc3NcIjpcbiAgICAgIHJldHVybiBwYXJzZUJhc2VUeXBlcyh0eXBlLCB2YWx1ZSk7XG4gICAgY2FzZSAoaXNUeXBlU3RydWN0KHR5cGUsIHN0cnVjdHMpIHx8IGlzVHlwZVR1cGxlKHR5cGUpIHx8IGlzVHlwZVVpbnQyNTYodHlwZSkpOlxuICAgICAgcmV0dXJuIHBhcnNlQ2FsbGRhdGFWYWx1ZSh2YWx1ZSwgdHlwZSwgc3RydWN0cywgZW51bXMpO1xuICAgIGNhc2UgaXNUeXBlRW51bSh0eXBlLCBlbnVtcyk6XG4gICAgICByZXR1cm4gcGFyc2VDYWxsZGF0YVZhbHVlKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3RydWN0cyxcbiAgICAgICAgZW51bXNcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZUJhc2VUeXBlcyh0eXBlLCB2YWx1ZSk7XG4gIH1cbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL3Jlc3BvbnNlUGFyc2VyLnRzXG5mdW5jdGlvbiBwYXJzZUJhc2VUeXBlczIodHlwZSwgaXQpIHtcbiAgbGV0IHRlbXA7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNUeXBlQm9vbCh0eXBlKTpcbiAgICAgIHRlbXAgPSBpdC5uZXh0KCkudmFsdWU7XG4gICAgICByZXR1cm4gQm9vbGVhbihCaWdJbnQodGVtcCkpO1xuICAgIGNhc2UgaXNUeXBlVWludDI1Nih0eXBlKTpcbiAgICAgIGNvbnN0IGxvdyA9IGl0Lm5leHQoKS52YWx1ZTtcbiAgICAgIGNvbnN0IGhpZ2ggPSBpdC5uZXh0KCkudmFsdWU7XG4gICAgICByZXR1cm4gdWludDI1NlRvQk4oeyBsb3csIGhpZ2ggfSk7XG4gICAgY2FzZSB0eXBlID09PSBcImNvcmU6OnN0YXJrbmV0OjpldGhfYWRkcmVzczo6RXRoQWRkcmVzc1wiOlxuICAgICAgdGVtcCA9IGl0Lm5leHQoKS52YWx1ZTtcbiAgICAgIHJldHVybiBCaWdJbnQodGVtcCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRlbXAgPSBpdC5uZXh0KCkudmFsdWU7XG4gICAgICByZXR1cm4gQmlnSW50KHRlbXApO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZVJlc3BvbnNlVmFsdWUocmVzcG9uc2VJdGVyYXRvciwgZWxlbWVudCwgc3RydWN0cywgZW51bXMpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gXCIoKVwiKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGlmIChpc1R5cGVVaW50MjU2KGVsZW1lbnQudHlwZSkpIHtcbiAgICBjb25zdCBsb3cgPSByZXNwb25zZUl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICBjb25zdCBoaWdoID0gcmVzcG9uc2VJdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgcmV0dXJuIHVpbnQyNTZUb0JOKHsgbG93LCBoaWdoIH0pO1xuICB9XG4gIGlmIChpc1R5cGVBcnJheShlbGVtZW50LnR5cGUpKSB7XG4gICAgY29uc3QgcGFyc2VkRGF0YUFyciA9IFtdO1xuICAgIGNvbnN0IGVsID0geyBuYW1lOiBcIlwiLCB0eXBlOiBnZXRBcnJheVR5cGUoZWxlbWVudC50eXBlKSB9O1xuICAgIGNvbnN0IGxlbiA9IEJpZ0ludChyZXNwb25zZUl0ZXJhdG9yLm5leHQoKS52YWx1ZSk7XG4gICAgd2hpbGUgKHBhcnNlZERhdGFBcnIubGVuZ3RoIDwgbGVuKSB7XG4gICAgICBwYXJzZWREYXRhQXJyLnB1c2gocGFyc2VSZXNwb25zZVZhbHVlKHJlc3BvbnNlSXRlcmF0b3IsIGVsLCBzdHJ1Y3RzLCBlbnVtcykpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkRGF0YUFycjtcbiAgfVxuICBpZiAoc3RydWN0cyAmJiBlbGVtZW50LnR5cGUgaW4gc3RydWN0cyAmJiBzdHJ1Y3RzW2VsZW1lbnQudHlwZV0pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBcImNvcmU6OnN0YXJrbmV0OjpldGhfYWRkcmVzczo6RXRoQWRkcmVzc1wiKSB7XG4gICAgICByZXR1cm4gcGFyc2VCYXNlVHlwZXMyKGVsZW1lbnQudHlwZSwgcmVzcG9uc2VJdGVyYXRvcik7XG4gICAgfVxuICAgIHJldHVybiBzdHJ1Y3RzW2VsZW1lbnQudHlwZV0ubWVtYmVycy5yZWR1Y2UoKGFjYywgZWwpID0+IHtcbiAgICAgIGFjY1tlbC5uYW1lXSA9IHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBlbCwgc3RydWN0cywgZW51bXMpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgaWYgKGVudW1zICYmIGVsZW1lbnQudHlwZSBpbiBlbnVtcyAmJiBlbnVtc1tlbGVtZW50LnR5cGVdKSB7XG4gICAgY29uc3QgdmFyaWFudE51bSA9IE51bWJlcihyZXNwb25zZUl0ZXJhdG9yLm5leHQoKS52YWx1ZSk7XG4gICAgY29uc3QgcmF3RW51bSA9IGVudW1zW2VsZW1lbnQudHlwZV0udmFyaWFudHMucmVkdWNlKChhY2MsIHZhcmlhbnQsIG51bSkgPT4ge1xuICAgICAgaWYgKG51bSA9PT0gdmFyaWFudE51bSkge1xuICAgICAgICBhY2NbdmFyaWFudC5uYW1lXSA9IHBhcnNlUmVzcG9uc2VWYWx1ZShcbiAgICAgICAgICByZXNwb25zZUl0ZXJhdG9yLFxuICAgICAgICAgIHsgbmFtZTogXCJcIiwgdHlwZTogdmFyaWFudC50eXBlIH0sXG4gICAgICAgICAgc3RydWN0cyxcbiAgICAgICAgICBlbnVtc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgYWNjW3ZhcmlhbnQubmFtZV0gPSB2b2lkIDA7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBpZiAoZWxlbWVudC50eXBlLnN0YXJ0c1dpdGgoXCJjb3JlOjpvcHRpb246Ok9wdGlvblwiKSkge1xuICAgICAgY29uc3QgY29udGVudCA9IHZhcmlhbnROdW0gPT09IDAgLyogU29tZSAqLyA/IHJhd0VudW0uU29tZSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBuZXcgQ2Fpcm9PcHRpb24odmFyaWFudE51bSwgY29udGVudCk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LnR5cGUuc3RhcnRzV2l0aChcImNvcmU6OnJlc3VsdDo6UmVzdWx0XCIpKSB7XG4gICAgICBsZXQgY29udGVudDtcbiAgICAgIGlmICh2YXJpYW50TnVtID09PSAwIC8qIE9rICovKSB7XG4gICAgICAgIGNvbnRlbnQgPSByYXdFbnVtLk9rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudCA9IHJhd0VudW0uRXJyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDYWlyb1Jlc3VsdCh2YXJpYW50TnVtLCBjb250ZW50KTtcbiAgICB9XG4gICAgY29uc3QgY3VzdG9tRW51bSA9IG5ldyBDYWlyb0N1c3RvbUVudW0ocmF3RW51bSk7XG4gICAgcmV0dXJuIGN1c3RvbUVudW07XG4gIH1cbiAgaWYgKGlzVHlwZVR1cGxlKGVsZW1lbnQudHlwZSkpIHtcbiAgICBjb25zdCBtZW1iZXJUeXBlcyA9IGV4dHJhY3RUdXBsZU1lbWJlclR5cGVzKGVsZW1lbnQudHlwZSk7XG4gICAgcmV0dXJuIG1lbWJlclR5cGVzLnJlZHVjZSgoYWNjLCBpdCwgaWR4KSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gaXQ/Lm5hbWUgPyBpdC5uYW1lIDogaWR4O1xuICAgICAgY29uc3QgdHlwZSA9IGl0Py50eXBlID8gaXQudHlwZSA6IGl0O1xuICAgICAgY29uc3QgZWwgPSB7IG5hbWUsIHR5cGUgfTtcbiAgICAgIGFjY1tuYW1lXSA9IHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBlbCwgc3RydWN0cywgZW51bXMpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgaWYgKGlzVHlwZUFycmF5KGVsZW1lbnQudHlwZSkpIHtcbiAgICBjb25zdCBwYXJzZWREYXRhQXJyID0gW107XG4gICAgY29uc3QgZWwgPSB7IG5hbWU6IFwiXCIsIHR5cGU6IGdldEFycmF5VHlwZShlbGVtZW50LnR5cGUpIH07XG4gICAgY29uc3QgbGVuID0gQmlnSW50KHJlc3BvbnNlSXRlcmF0b3IubmV4dCgpLnZhbHVlKTtcbiAgICB3aGlsZSAocGFyc2VkRGF0YUFyci5sZW5ndGggPCBsZW4pIHtcbiAgICAgIHBhcnNlZERhdGFBcnIucHVzaChwYXJzZVJlc3BvbnNlVmFsdWUocmVzcG9uc2VJdGVyYXRvciwgZWwsIHN0cnVjdHMsIGVudW1zKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWREYXRhQXJyO1xuICB9XG4gIHJldHVybiBwYXJzZUJhc2VUeXBlczIoZWxlbWVudC50eXBlLCByZXNwb25zZUl0ZXJhdG9yKTtcbn1cbmZ1bmN0aW9uIHJlc3BvbnNlUGFyc2VyKHJlc3BvbnNlSXRlcmF0b3IsIG91dHB1dCwgc3RydWN0cywgZW51bXMsIHBhcnNlZFJlc3VsdCkge1xuICBjb25zdCB7IG5hbWUsIHR5cGUgfSA9IG91dHB1dDtcbiAgbGV0IHRlbXA7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNMZW4obmFtZSk6XG4gICAgICB0ZW1wID0gcmVzcG9uc2VJdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgICByZXR1cm4gQmlnSW50KHRlbXApO1xuICAgIGNhc2UgKHN0cnVjdHMgJiYgdHlwZSBpbiBzdHJ1Y3RzIHx8IGlzVHlwZVR1cGxlKHR5cGUpKTpcbiAgICAgIHJldHVybiBwYXJzZVJlc3BvbnNlVmFsdWUocmVzcG9uc2VJdGVyYXRvciwgb3V0cHV0LCBzdHJ1Y3RzLCBlbnVtcyk7XG4gICAgY2FzZSAoZW51bXMgJiYgaXNUeXBlRW51bSh0eXBlLCBlbnVtcykpOlxuICAgICAgcmV0dXJuIHBhcnNlUmVzcG9uc2VWYWx1ZShyZXNwb25zZUl0ZXJhdG9yLCBvdXRwdXQsIHN0cnVjdHMsIGVudW1zKTtcbiAgICBjYXNlIGlzVHlwZUFycmF5KHR5cGUpOlxuICAgICAgaWYgKGlzQ2Fpcm8xVHlwZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VSZXNwb25zZVZhbHVlKHJlc3BvbnNlSXRlcmF0b3IsIG91dHB1dCwgc3RydWN0cywgZW51bXMpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyc2VkRGF0YUFyciA9IFtdO1xuICAgICAgaWYgKHBhcnNlZFJlc3VsdCAmJiBwYXJzZWRSZXN1bHRbYCR7bmFtZX1fbGVuYF0pIHtcbiAgICAgICAgY29uc3QgYXJyTGVuID0gcGFyc2VkUmVzdWx0W2Ake25hbWV9X2xlbmBdO1xuICAgICAgICB3aGlsZSAocGFyc2VkRGF0YUFyci5sZW5ndGggPCBhcnJMZW4pIHtcbiAgICAgICAgICBwYXJzZWREYXRhQXJyLnB1c2goXG4gICAgICAgICAgICBwYXJzZVJlc3BvbnNlVmFsdWUoXG4gICAgICAgICAgICAgIHJlc3BvbnNlSXRlcmF0b3IsXG4gICAgICAgICAgICAgIHsgbmFtZSwgdHlwZTogb3V0cHV0LnR5cGUucmVwbGFjZShcIipcIiwgXCJcIikgfSxcbiAgICAgICAgICAgICAgc3RydWN0cyxcbiAgICAgICAgICAgICAgZW51bXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VkRGF0YUFycjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBhcnNlQmFzZVR5cGVzMih0eXBlLCByZXNwb25zZUl0ZXJhdG9yKTtcbiAgfVxufVxuXG4vLyBzcmMvdXRpbHMvY2FsbGRhdGEvdmFsaWRhdGUudHNcbnZhciB2YWxpZGF0ZUZlbHQgPSAocGFyYW1ldGVyLCBpbnB1dCkgPT4ge1xuICBhc3NlcnQoXG4gICAgdHlwZW9mIHBhcmFtZXRlciA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwiYmlnaW50XCIsXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBzaG91bGQgYmUgYSBmZWx0IHR5cGVkIGFzIChTdHJpbmcsIE51bWJlciBvciBCaWdJbnQpYFxuICApO1xuICBpZiAodHlwZW9mIHBhcmFtZXRlciA9PT0gXCJzdHJpbmdcIiAmJiAhaXNIZXgocGFyYW1ldGVyKSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHBhcmFtID0gQmlnSW50KHBhcmFtZXRlci50b1N0cmluZygxMCkpO1xuICBhc3NlcnQoXG4gICAgLy8gZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFya3dhcmUtbGlicy9zdGFya25ldC1zcGVjcy9ibG9iLzI5YmFiNjUwYmU2YjE4NDdjOTJkNDQ2MWQ0YzMzMDA4YjVlNTBiMWEvYXBpL3N0YXJrbmV0X2FwaV9vcGVucnBjLmpzb24jTDEyNjZcbiAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSAybiAqKiAyNTJuIC0gMW4sXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgMl4yNTItMV1gXG4gICk7XG59O1xudmFyIHZhbGlkYXRlVWludCA9IChwYXJhbWV0ZXIsIGlucHV0KSA9PiB7XG4gIGlmICh0eXBlb2YgcGFyYW1ldGVyID09PSBcIm51bWJlclwiKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgcGFyYW1ldGVyIDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgYFZhbGlkYXRpb246IFBhcmFtZXRlciBpcyB0byBsYXJnZSB0byBiZSB0eXBlZCBhcyBOdW1iZXIgdXNlIChCaWdJbnQgb3IgU3RyaW5nKWBcbiAgICApO1xuICB9XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHBhcmFtZXRlciA9PT0gXCJiaWdpbnRcIiB8fCB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiICYmIFwibG93XCIgaW4gcGFyYW1ldGVyICYmIFwiaGlnaFwiIGluIHBhcmFtZXRlcixcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IG9mIGNhaXJvIHR5cGUgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgdHlwZSAoU3RyaW5nLCBOdW1iZXIgb3IgQmlnSW50KSwgYnV0IGlzICR7dHlwZW9mIHBhcmFtZXRlcn0gJHtwYXJhbWV0ZXJ9LmBcbiAgKTtcbiAgY29uc3QgcGFyYW0gPSB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiID8gdWludDI1NlRvQk4ocGFyYW1ldGVyKSA6IHRvQmlnSW50KHBhcmFtZXRlcik7XG4gIHN3aXRjaCAoaW5wdXQudHlwZSkge1xuICAgIGNhc2UgXCJjb3JlOjppbnRlZ2VyOjp1OFwiIC8qIHU4ICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSAyNTVuLFxuICAgICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGNhaXJvIHR5cGVkICR7aW5wdXQudHlwZX0gc2hvdWxkIGJlIGluIHJhbmdlIFswIC0gMjU1XWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6aW50ZWdlcjo6dTE2XCIgLyogdTE2ICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSA2NTUzNW4sXG4gICAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAsIDY1NTM1XWBcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29yZTo6aW50ZWdlcjo6dTMyXCIgLyogdTMyICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSA0Mjk0OTY3Mjk1bixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgNDI5NDk2NzI5NV1gXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvcmU6OmludGVnZXI6OnU2NFwiIC8qIHU2NCAqLzpcbiAgICAgIGFzc2VydChcbiAgICAgICAgcGFyYW0gPj0gMG4gJiYgcGFyYW0gPD0gMm4gKiogNjRuIC0gMW4sXG4gICAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAsIDJeNjQtMV1gXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvcmU6OmludGVnZXI6OnUxMjhcIiAvKiB1MTI4ICovOlxuICAgICAgYXNzZXJ0KFxuICAgICAgICBwYXJhbSA+PSAwbiAmJiBwYXJhbSA8PSAybiAqKiAxMjhuIC0gMW4sXG4gICAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAsIDJeMTI4LTFdYFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb3JlOjppbnRlZ2VyOjp1MjU2XCIgLyogdTI1NiAqLzpcbiAgICAgIGFzc2VydChcbiAgICAgICAgcGFyYW0gPj0gMG4gJiYgcGFyYW0gPD0gMm4gKiogMjU2biAtIDFuLFxuICAgICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGlzICR7aW5wdXQudHlwZX0gMCAtIDJeMjU2LTFgXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvcmU6OnN0YXJrbmV0OjpjbGFzc19oYXNoOjpDbGFzc0hhc2hcIiAvKiBDbGFzc0hhc2ggKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIC8vIGZyb20gOiBodHRwczovL2dpdGh1Yi5jb20vc3Rhcmt3YXJlLWxpYnMvc3RhcmtuZXQtc3BlY3MvYmxvYi8yOWJhYjY1MGJlNmIxODQ3YzkyZDQ0NjFkNGMzMzAwOGI1ZTUwYjFhL2FwaS9zdGFya25ldF9hcGlfb3BlbnJwYy5qc29uI0wxNjcwXG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDI1Mm4gLSAxbixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgMl4yNTItMV1gXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvcmU6OnN0YXJrbmV0Ojpjb250cmFjdF9hZGRyZXNzOjpDb250cmFjdEFkZHJlc3NcIiAvKiBDb250cmFjdEFkZHJlc3MgKi86XG4gICAgICBhc3NlcnQoXG4gICAgICAgIC8vIGZyb20gOiBodHRwczovL2dpdGh1Yi5jb20vc3Rhcmt3YXJlLWxpYnMvc3RhcmtuZXQtc3BlY3MvYmxvYi8yOWJhYjY1MGJlNmIxODQ3YzkyZDQ0NjFkNGMzMzAwOGI1ZTUwYjFhL2FwaS9zdGFya25ldF9hcGlfb3BlbnJwYy5qc29uI0wxMjQ1XG4gICAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDI1Mm4gLSAxbixcbiAgICAgICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBjYWlybyB0eXBlZCAke2lucHV0LnR5cGV9IHNob3VsZCBiZSBpbiByYW5nZSBbMCwgMl4yNTItMV1gXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG59O1xudmFyIHZhbGlkYXRlQm9vbCA9IChwYXJhbWV0ZXIsIGlucHV0KSA9PiB7XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcImJvb2xlYW5cIixcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IG9mIGNhaXJvIHR5cGUgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgdHlwZSAoQm9vbGVhbilgXG4gICk7XG59O1xudmFyIHZhbGlkYXRlU3RydWN0ID0gKHBhcmFtZXRlciwgaW5wdXQsIHN0cnVjdHMpID0+IHtcbiAgaWYgKGlucHV0LnR5cGUgPT09IFwiY29yZTo6aW50ZWdlcjo6dTI1NlwiIC8qIHUyNTYgKi8pIHtcbiAgICB2YWxpZGF0ZVVpbnQocGFyYW1ldGVyLCBpbnB1dCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbnB1dC50eXBlID09PSBcImNvcmU6OnN0YXJrbmV0OjpldGhfYWRkcmVzczo6RXRoQWRkcmVzc1wiKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZW9mIHBhcmFtZXRlciAhPT0gXCJvYmplY3RcIixcbiAgICAgIGBFdGhBZHJlc3MgdHlwZSBpcyB3YWl0aW5nIGEgQmlnTnVtYmVyaXNoLiBHb3QgJHtwYXJhbWV0ZXJ9YFxuICAgICk7XG4gICAgY29uc3QgcGFyYW0gPSBCaWdJbnQocGFyYW1ldGVyLnRvU3RyaW5nKDEwKSk7XG4gICAgYXNzZXJ0KFxuICAgICAgLy8gZnJvbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFya3dhcmUtbGlicy9zdGFya25ldC1zcGVjcy9ibG9iLzI5YmFiNjUwYmU2YjE4NDdjOTJkNDQ2MWQ0YzMzMDA4YjVlNTBiMWEvYXBpL3N0YXJrbmV0X2FwaV9vcGVucnBjLmpzb24jTDEyNTlcbiAgICAgIHBhcmFtID49IDBuICYmIHBhcmFtIDw9IDJuICoqIDE2MG4gLSAxbixcbiAgICAgIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gY2Fpcm8gdHlwZWQgJHtpbnB1dC50eXBlfSBzaG91bGQgYmUgaW4gcmFuZ2UgWzAsIDJeMTYwLTFdYFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHBhcmFtZXRlciksXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBpcyBjYWlybyB0eXBlIHN0cnVjdCAoJHtpbnB1dC50eXBlfSksIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBhcyBqcyBvYmplY3QgKG5vdCBhcnJheSlgXG4gICk7XG4gIHN0cnVjdHNbaW5wdXQudHlwZV0ubWVtYmVycy5mb3JFYWNoKCh7IG5hbWUgfSkgPT4ge1xuICAgIGFzc2VydChcbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcikuaW5jbHVkZXMobmFtZSksXG4gICAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IHNob3VsZCBoYXZlIGEgcHJvcGVydHkgJHtuYW1lfWBcbiAgICApO1xuICB9KTtcbn07XG52YXIgdmFsaWRhdGVFbnVtID0gKHBhcmFtZXRlciwgaW5wdXQpID0+IHtcbiAgYXNzZXJ0KFxuICAgIHR5cGVvZiBwYXJhbWV0ZXIgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1ldGVyKSxcbiAgICBgVmFsaWRhdGU6IGFyZyAke2lucHV0Lm5hbWV9IGlzIGNhaXJvIHR5cGUgRW51bSAoJHtpbnB1dC50eXBlfSksIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBhcyBqcyBvYmplY3QgKG5vdCBhcnJheSlgXG4gICk7XG4gIGNvbnN0IG1ldGhvZHNLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmFtZXRlcikpO1xuICBjb25zdCBrZXlzID0gWy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHBhcmFtZXRlciksIC4uLm1ldGhvZHNLZXlzXTtcbiAgaWYgKGlzVHlwZU9wdGlvbihpbnB1dC50eXBlKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNTb21lXCIpICYmIGtleXMuaW5jbHVkZXMoXCJpc05vbmVcIikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzVHlwZVJlc3VsdChpbnB1dC50eXBlKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNPa1wiKSAmJiBrZXlzLmluY2x1ZGVzKFwiaXNFcnJcIikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGtleXMuaW5jbHVkZXMoXCJ2YXJpYW50XCIpICYmIGtleXMuaW5jbHVkZXMoXCJhY3RpdmVWYXJpYW50XCIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgVmFsaWRhdGUgRW51bTogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSByZWNlaXZlZCAke3BhcmFtZXRlcn0sIGlzIG5vdCBhbiBFbnVtLmBcbiAgKTtcbn07XG52YXIgdmFsaWRhdGVUdXBsZSA9IChwYXJhbWV0ZXIsIGlucHV0KSA9PiB7XG4gIGFzc2VydChcbiAgICB0eXBlb2YgcGFyYW1ldGVyID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHBhcmFtZXRlciksXG4gICAgYFZhbGlkYXRlOiBhcmcgJHtpbnB1dC5uYW1lfSBzaG91bGQgYmUgYSB0dXBsZSAoZGVmaW5lZCBhcyBvYmplY3QpYFxuICApO1xufTtcbnZhciB2YWxpZGF0ZUFycmF5ID0gKHBhcmFtZXRlciwgaW5wdXQsIHN0cnVjdHMsIGVudW1zKSA9PiB7XG4gIGNvbnN0IGJhc2VUeXBlID0gZ2V0QXJyYXlUeXBlKGlucHV0LnR5cGUpO1xuICBpZiAoaXNUeXBlRmVsdChiYXNlVHlwZSkgJiYgaXNMb25nVGV4dChwYXJhbWV0ZXIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFzc2VydChBcnJheS5pc0FycmF5KHBhcmFtZXRlciksIGBWYWxpZGF0ZTogYXJnICR7aW5wdXQubmFtZX0gc2hvdWxkIGJlIGFuIEFycmF5YCk7XG4gIHN3aXRjaCAodHJ1ZSkge1xuICAgIGNhc2UgaXNUeXBlRmVsdChiYXNlVHlwZSk6XG4gICAgICBwYXJhbWV0ZXIuZm9yRWFjaCgocGFyYW0pID0+IHZhbGlkYXRlRmVsdChwYXJhbSwgaW5wdXQpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlVHVwbGUoYmFzZVR5cGUpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goKGl0KSA9PiB2YWxpZGF0ZVR1cGxlKGl0LCB7IG5hbWU6IGlucHV0Lm5hbWUsIHR5cGU6IGJhc2VUeXBlIH0pKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlQXJyYXkoYmFzZVR5cGUpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goXG4gICAgICAgIChwYXJhbSkgPT4gdmFsaWRhdGVBcnJheShwYXJhbSwgeyBuYW1lOiBcIlwiLCB0eXBlOiBiYXNlVHlwZSB9LCBzdHJ1Y3RzLCBlbnVtcylcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGlzVHlwZVN0cnVjdChiYXNlVHlwZSwgc3RydWN0cyk6XG4gICAgICBwYXJhbWV0ZXIuZm9yRWFjaChcbiAgICAgICAgKGl0KSA9PiB2YWxpZGF0ZVN0cnVjdChpdCwgeyBuYW1lOiBpbnB1dC5uYW1lLCB0eXBlOiBiYXNlVHlwZSB9LCBzdHJ1Y3RzKVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgaXNUeXBlRW51bShiYXNlVHlwZSwgZW51bXMpOlxuICAgICAgcGFyYW1ldGVyLmZvckVhY2goKGl0KSA9PiB2YWxpZGF0ZUVudW0oaXQsIHsgbmFtZTogaW5wdXQubmFtZSwgdHlwZTogYmFzZVR5cGUgfSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAoaXNUeXBlVWludChiYXNlVHlwZSkgfHwgaXNUeXBlTGl0dGVyYWwoYmFzZVR5cGUpKTpcbiAgICAgIHBhcmFtZXRlci5mb3JFYWNoKChwYXJhbSkgPT4gdmFsaWRhdGVVaW50KHBhcmFtLCBpbnB1dCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBpc1R5cGVCb29sKGJhc2VUeXBlKTpcbiAgICAgIHBhcmFtZXRlci5mb3JFYWNoKChwYXJhbSkgPT4gdmFsaWRhdGVCb29sKHBhcmFtLCBpbnB1dCkpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFZhbGlkYXRlIFVuaGFuZGxlZDogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSAke3BhcmFtZXRlcn1gXG4gICAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gdmFsaWRhdGVGaWVsZHMoYWJpTWV0aG9kLCBhcmdzLCBzdHJ1Y3RzLCBlbnVtcykge1xuICBhYmlNZXRob2QuaW5wdXRzLnJlZHVjZSgoYWNjLCBpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlciA9IGFyZ3NbYWNjXTtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgaXNMZW4oaW5wdXQubmFtZSk6XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICBjYXNlIGlzVHlwZUZlbHQoaW5wdXQudHlwZSk6XG4gICAgICAgIHZhbGlkYXRlRmVsdChwYXJhbWV0ZXIsIGlucHV0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIChpc1R5cGVVaW50KGlucHV0LnR5cGUpIHx8IGlzVHlwZUxpdHRlcmFsKGlucHV0LnR5cGUpKTpcbiAgICAgICAgdmFsaWRhdGVVaW50KHBhcmFtZXRlciwgaW5wdXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlQm9vbChpbnB1dC50eXBlKTpcbiAgICAgICAgdmFsaWRhdGVCb29sKHBhcmFtZXRlciwgaW5wdXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlQXJyYXkoaW5wdXQudHlwZSk6XG4gICAgICAgIHZhbGlkYXRlQXJyYXkocGFyYW1ldGVyLCBpbnB1dCwgc3RydWN0cywgZW51bXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgaXNUeXBlU3RydWN0KGlucHV0LnR5cGUsIHN0cnVjdHMpOlxuICAgICAgICB2YWxpZGF0ZVN0cnVjdChwYXJhbWV0ZXIsIGlucHV0LCBzdHJ1Y3RzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGlzVHlwZUVudW0oaW5wdXQudHlwZSwgZW51bXMpOlxuICAgICAgICB2YWxpZGF0ZUVudW0ocGFyYW1ldGVyLCBpbnB1dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBpc1R5cGVUdXBsZShpbnB1dC50eXBlKTpcbiAgICAgICAgdmFsaWRhdGVUdXBsZShwYXJhbWV0ZXIsIGlucHV0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFZhbGlkYXRlIFVuaGFuZGxlZDogYXJndW1lbnQgJHtpbnB1dC5uYW1lfSwgdHlwZSAke2lucHV0LnR5cGV9LCB2YWx1ZSAke3BhcmFtZXRlcn1gXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhY2MgKyAxO1xuICB9LCAwKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NhbGxkYXRhL2luZGV4LnRzXG52YXIgQ2FsbERhdGEgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGFiaSkge1xuICAgIHRoaXMuc3RydWN0cyA9IENhbGxEYXRhLmdldEFiaVN0cnVjdChhYmkpO1xuICAgIHRoaXMuZW51bXMgPSBDYWxsRGF0YS5nZXRBYmlFbnVtKGFiaSk7XG4gICAgdGhpcy5wYXJzZXIgPSBjcmVhdGVBYmlQYXJzZXIoYWJpKTtcbiAgICB0aGlzLmFiaSA9IHRoaXMucGFyc2VyLmdldExlZ2FjeUZvcm1hdCgpO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBtZXRob2QgYXMgY29ycmVzcG9uZGluZyB0byB0aGUgb25lcyBpbiB0aGUgYWJpXG4gICAqIEBwYXJhbSB0eXBlIFZhbGlkYXRlVHlwZSAtIHR5cGUgb2YgdGhlIG1ldGhvZFxuICAgKiBAcGFyYW0gbWV0aG9kIHN0cmluZyAtIG5hbWUgb2YgdGhlIG1ldGhvZFxuICAgKiBAcGFyYW0gYXJncyBBcmdzT3JDYWxsZGF0YSAtIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICAgKi9cbiAgdmFsaWRhdGUodHlwZSwgbWV0aG9kLCBhcmdzID0gW10pIHtcbiAgICBpZiAodHlwZSAhPT0gXCJERVBMT1lcIiAvKiBERVBMT1kgKi8pIHtcbiAgICAgIGNvbnN0IGludm9jYWJsZUZ1bmN0aW9uTmFtZXMgPSB0aGlzLmFiaS5maWx0ZXIoKGFiaSkgPT4ge1xuICAgICAgICBpZiAoYWJpLnR5cGUgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGlzVmlldyA9IGFiaS5zdGF0ZU11dGFiaWxpdHkgPT09IFwidmlld1wiIHx8IGFiaS5zdGF0ZV9tdXRhYmlsaXR5ID09PSBcInZpZXdcIjtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiSU5WT0tFXCIgLyogSU5WT0tFICovID8gIWlzVmlldyA6IGlzVmlldztcbiAgICAgIH0pLm1hcCgoYWJpKSA9PiBhYmkubmFtZSk7XG4gICAgICBhc3NlcnQoXG4gICAgICAgIGludm9jYWJsZUZ1bmN0aW9uTmFtZXMuaW5jbHVkZXMobWV0aG9kKSxcbiAgICAgICAgYCR7dHlwZSA9PT0gXCJJTlZPS0VcIiAvKiBJTlZPS0UgKi8gPyBcImludm9jYWJsZVwiIDogXCJ2aWV3YWJsZVwifSBtZXRob2Qgbm90IGZvdW5kIGluIGFiaWBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGFiaU1ldGhvZCA9IHRoaXMuYWJpLmZpbmQoXG4gICAgICAoYWJpKSA9PiB0eXBlID09PSBcIkRFUExPWVwiIC8qIERFUExPWSAqLyA/IGFiaS5uYW1lID09PSBtZXRob2QgJiYgYWJpLnR5cGUgPT09IFwiY29uc3RydWN0b3JcIiA6IGFiaS5uYW1lID09PSBtZXRob2QgJiYgYWJpLnR5cGUgPT09IFwiZnVuY3Rpb25cIlxuICAgICk7XG4gICAgaWYgKGlzTm9Db25zdHJ1Y3RvclZhbGlkKG1ldGhvZCwgYXJncywgYWJpTWV0aG9kKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dHNMZW5ndGggPSB0aGlzLnBhcnNlci5tZXRob2RJbnB1dHNMZW5ndGgoYWJpTWV0aG9kKTtcbiAgICBpZiAoYXJncy5sZW5ndGggIT09IGlucHV0c0xlbmd0aCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMsIGV4cGVjdGVkICR7aW5wdXRzTGVuZ3RofSBhcmd1bWVudHMsIGJ1dCBnb3QgJHthcmdzLmxlbmd0aH1gXG4gICAgICApO1xuICAgIH1cbiAgICB2YWxpZGF0ZUZpZWxkcyhhYmlNZXRob2QsIGFyZ3MsIHRoaXMuc3RydWN0cywgdGhpcy5lbnVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXBpbGUgY29udHJhY3QgY2FsbERhdGEgd2l0aCBhYmlcbiAgICogUGFyc2UgdGhlIGNhbGxkYXRhIGJ5IHVzaW5nIGlucHV0IGZpZWxkcyBmcm9tIHRoZSBhYmkgZm9yIHRoYXQgbWV0aG9kXG4gICAqIEBwYXJhbSBtZXRob2Qgc3RyaW5nIC0gbWV0aG9kIG5hbWVcbiAgICogQHBhcmFtIGFyZ3MgUmF3QXJncyAtIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG1ldGhvZC4gQ2FuIGJlIGFuIGFycmF5IG9mIGFyZ3VtZW50cyAoaW4gdGhlIG9yZGVyIG9mIGFiaSBkZWZpbml0aW9uKSwgb3IgYW4gb2JqZWN0IGNvbnN0cnVjdGVkIGluIGNvbmZvcm1pdHkgd2l0aCBhYmkgKGluIHRoaXMgY2FzZSwgdGhlIHBhcmFtZXRlciBjYW4gYmUgaW4gYSB3cm9uZyBvcmRlcikuXG4gICAqIEByZXR1cm4gQ2FsbGRhdGEgLSBwYXJzZWQgYXJndW1lbnRzIGluIGZvcm1hdCB0aGF0IGNvbnRyYWN0IGlzIGV4cGVjdGluZ1xuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGNhbGxkYXRhID0gbXlDYWxsRGF0YS5jb21waWxlKFwiY29uc3RydWN0b3JcIiwgW1wiMHgzNGFcIiwgWzEsIDNuXV0pO1xuICAgKiBgYGBcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBjYWxsZGF0YTIgPSBteUNhbGxEYXRhLmNvbXBpbGUoXCJjb25zdHJ1Y3RvclwiLCB7bGlzdDpbMSwgM25dLCBiYWxhbmNlOlwiMHgzNFwifSk7IC8vIHdyb25nIG9yZGVyIGlzIHZhbGlkXG4gICAqIGBgYFxuICAgKi9cbiAgY29tcGlsZShtZXRob2QsIGFyZ3NDYWxsZGF0YSkge1xuICAgIGNvbnN0IGFiaU1ldGhvZCA9IHRoaXMuYWJpLmZpbmQoKGFiaUZ1bmN0aW9uKSA9PiBhYmlGdW5jdGlvbi5uYW1lID09PSBtZXRob2QpO1xuICAgIGlmIChpc05vQ29uc3RydWN0b3JWYWxpZChtZXRob2QsIGFyZ3NDYWxsZGF0YSwgYWJpTWV0aG9kKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgYXJncztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzQ2FsbGRhdGEpKSB7XG4gICAgICBhcmdzID0gYXJnc0NhbGxkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvcmRlcmVkT2JqZWN0ID0gb3JkZXJQcm9wc0J5QWJpKFxuICAgICAgICBhcmdzQ2FsbGRhdGEsXG4gICAgICAgIGFiaU1ldGhvZC5pbnB1dHMsXG4gICAgICAgIHRoaXMuc3RydWN0cyxcbiAgICAgICAgdGhpcy5lbnVtc1xuICAgICAgKTtcbiAgICAgIGFyZ3MgPSBPYmplY3QudmFsdWVzKG9yZGVyZWRPYmplY3QpO1xuICAgICAgdmFsaWRhdGVGaWVsZHMoYWJpTWV0aG9kLCBhcmdzLCB0aGlzLnN0cnVjdHMsIHRoaXMuZW51bXMpO1xuICAgIH1cbiAgICBjb25zdCBhcmdzSXRlcmF0b3IgPSBhcmdzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBjb25zdCBjYWxsQXJyYXkgPSBhYmlNZXRob2QuaW5wdXRzLnJlZHVjZShcbiAgICAgIChhY2MsIGlucHV0KSA9PiBpc0xlbihpbnB1dC5uYW1lKSAmJiAhaXNDYWlybzFUeXBlKGlucHV0LnR5cGUpID8gYWNjIDogYWNjLmNvbmNhdChwYXJzZUNhbGxkYXRhRmllbGQoYXJnc0l0ZXJhdG9yLCBpbnB1dCwgdGhpcy5zdHJ1Y3RzLCB0aGlzLmVudW1zKSksXG4gICAgICBbXVxuICAgICk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhbGxBcnJheSwgXCJfX2NvbXBpbGVkX19cIiwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBjYWxsQXJyYXk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXBpbGUgY29udHJhY3QgY2FsbERhdGEgd2l0aG91dCBhYmlcbiAgICogQHBhcmFtIHJhd0FyZ3MgUmF3QXJncyByZXByZXNlbnRpbmcgY2Fpcm8gbWV0aG9kIGFyZ3VtZW50cyBvciBzdHJpbmcgYXJyYXkgb2YgY29tcGlsZWQgZGF0YVxuICAgKiBAcmV0dXJucyBDYWxsZGF0YVxuICAgKi9cbiAgc3RhdGljIGNvbXBpbGUocmF3QXJncykge1xuICAgIGNvbnN0IGNyZWF0ZVRyZWUgPSAob2JqKSA9PiB7XG4gICAgICBjb25zdCBnZXRFbnRyaWVzID0gKG8sIHByZWZpeCA9IFwiLlwiKSA9PiB7XG4gICAgICAgIGNvbnN0IG9lID0gQXJyYXkuaXNBcnJheShvKSA/IFtvLmxlbmd0aC50b1N0cmluZygpLCAuLi5vXSA6IG87XG4gICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhvZSkuZmxhdE1hcCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdjtcbiAgICAgICAgICBpZiAoaXNMb25nVGV4dCh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IHNwbGl0TG9uZ1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGsgPT09IFwiZW50cnlwb2ludFwiKVxuICAgICAgICAgICAgdmFsdWUgPSBnZXRTZWxlY3RvckZyb21OYW1lKHZhbHVlKTtcbiAgICAgICAgICBjb25zdCBrayA9IEFycmF5LmlzQXJyYXkob2UpICYmIGsgPT09IFwiMFwiID8gXCIkJGxlblwiIDogaztcbiAgICAgICAgICBpZiAoaXNCaWdJbnQodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIFtbYCR7cHJlZml4fSR7a2t9YCwgZmVsdCh2YWx1ZSldXTtcbiAgICAgICAgICBpZiAoT2JqZWN0KHZhbHVlKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZHNLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSk7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gWy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKSwgLi4ubWV0aG9kc0tleXNdO1xuICAgICAgICAgICAgaWYgKGtleXMuaW5jbHVkZXMoXCJpc1NvbWVcIikgJiYga2V5cy5pbmNsdWRlcyhcImlzTm9uZVwiKSkge1xuICAgICAgICAgICAgICBjb25zdCBteU9wdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICBjb25zdCB2YXJpYW50TmIgPSBteU9wdGlvbi5pc1NvbWUoKSA/IDAgLyogU29tZSAqLyA6IDEgLyogTm9uZSAqLztcbiAgICAgICAgICAgICAgaWYgKG15T3B0aW9uLmlzU29tZSgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRFbnRyaWVzKHsgMDogdmFyaWFudE5iLCAxOiBteU9wdGlvbi51bndyYXAoKSB9LCBgJHtwcmVmaXh9JHtra30uYCk7XG4gICAgICAgICAgICAgIHJldHVybiBbW2Ake3ByZWZpeH0ke2trfWAsIGZlbHQodmFyaWFudE5iKV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleXMuaW5jbHVkZXMoXCJpc09rXCIpICYmIGtleXMuaW5jbHVkZXMoXCJpc0VyclwiKSkge1xuICAgICAgICAgICAgICBjb25zdCBteVJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICBjb25zdCB2YXJpYW50TmIgPSBteVJlc3VsdC5pc09rKCkgPyAwIC8qIE9rICovIDogMSAvKiBFcnIgKi87XG4gICAgICAgICAgICAgIHJldHVybiBnZXRFbnRyaWVzKHsgMDogdmFyaWFudE5iLCAxOiBteVJlc3VsdC51bndyYXAoKSB9LCBgJHtwcmVmaXh9JHtra30uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhcInZhcmlhbnRcIikgJiYga2V5cy5pbmNsdWRlcyhcImFjdGl2ZVZhcmlhbnRcIikpIHtcbiAgICAgICAgICAgICAgY29uc3QgbXlFbnVtID0gdmFsdWU7XG4gICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZhcmlhbnQgPSBteUVudW0uYWN0aXZlVmFyaWFudCgpO1xuICAgICAgICAgICAgICBjb25zdCBsaXN0VmFyaWFudHMgPSBPYmplY3Qua2V5cyhteUVudW0udmFyaWFudCk7XG4gICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZhcmlhbnROYiA9IGxpc3RWYXJpYW50cy5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgKHZhcmlhbnQpID0+IHZhcmlhbnQgPT09IGFjdGl2ZVZhcmlhbnRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBteUVudW0udW53cmFwKCkgPT09IFwib2JqZWN0XCIgJiYgT2JqZWN0LmtleXMobXlFbnVtLnVud3JhcCgpKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1tgJHtwcmVmaXh9JHtra31gLCBmZWx0KGFjdGl2ZVZhcmlhbnROYildXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZ2V0RW50cmllcyh7IDA6IGFjdGl2ZVZhcmlhbnROYiwgMTogbXlFbnVtLnVud3JhcCgpIH0sIGAke3ByZWZpeH0ke2trfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRFbnRyaWVzKHZhbHVlLCBgJHtwcmVmaXh9JHtra30uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbW2Ake3ByZWZpeH0ke2trfWAsIGZlbHQodmFsdWUpXV07XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5mcm9tRW50cmllcyhnZXRFbnRyaWVzKG9iaikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIGxldCBjYWxsVHJlZUFycmF5O1xuICAgIGlmICghQXJyYXkuaXNBcnJheShyYXdBcmdzKSkge1xuICAgICAgY29uc3QgY2FsbFRyZWUgPSBjcmVhdGVUcmVlKHJhd0FyZ3MpO1xuICAgICAgY2FsbFRyZWVBcnJheSA9IE9iamVjdC52YWx1ZXMoY2FsbFRyZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjYWxsT2JqID0geyAuLi5yYXdBcmdzIH07XG4gICAgICBjb25zdCBjYWxsVHJlZSA9IGNyZWF0ZVRyZWUoY2FsbE9iaik7XG4gICAgICBjYWxsVHJlZUFycmF5ID0gT2JqZWN0LnZhbHVlcyhjYWxsVHJlZSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYWxsVHJlZUFycmF5LCBcIl9fY29tcGlsZWRfX1wiLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbGxUcmVlQXJyYXk7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIGVsZW1lbnRzIG9mIHRoZSByZXNwb25zZSBhcnJheSBhbmQgc3RydWN0dXJpbmcgdGhlbSBpbnRvIHJlc3BvbnNlIG9iamVjdFxuICAgKiBAcGFyYW0gbWV0aG9kIHN0cmluZyAtIG1ldGhvZCBuYW1lXG4gICAqIEBwYXJhbSByZXNwb25zZSBzdHJpbmdbXSAtIHJlc3BvbnNlIGZyb20gdGhlIG1ldGhvZFxuICAgKiBAcmV0dXJuIFJlc3VsdCAtIHBhcnNlZCByZXNwb25zZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBhYmlcbiAgICovXG4gIHBhcnNlKG1ldGhvZCwgcmVzcG9uc2UpIHtcbiAgICBjb25zdCB7IG91dHB1dHMgfSA9IHRoaXMuYWJpLmZpbmQoKGFiaSkgPT4gYWJpLm5hbWUgPT09IG1ldGhvZCk7XG4gICAgY29uc3QgcmVzcG9uc2VJdGVyYXRvciA9IHJlc3BvbnNlLmZsYXQoKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgY29uc3QgcGFyc2VkID0gb3V0cHV0cy5mbGF0KCkucmVkdWNlKChhY2MsIG91dHB1dCwgaWR4KSA9PiB7XG4gICAgICBjb25zdCBwcm9wTmFtZSA9IG91dHB1dC5uYW1lID8/IGlkeDtcbiAgICAgIGFjY1twcm9wTmFtZV0gPSByZXNwb25zZVBhcnNlcihyZXNwb25zZUl0ZXJhdG9yLCBvdXRwdXQsIHRoaXMuc3RydWN0cywgdGhpcy5lbnVtcywgYWNjKTtcbiAgICAgIGlmIChhY2NbcHJvcE5hbWVdICYmIGFjY1tgJHtwcm9wTmFtZX1fbGVuYF0pIHtcbiAgICAgICAgZGVsZXRlIGFjY1tgJHtwcm9wTmFtZX1fbGVuYF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggPT09IDEgJiYgMCBpbiBwYXJzZWQgPyBwYXJzZWRbMF0gOiBwYXJzZWQ7XG4gIH1cbiAgLyoqXG4gICAqIEZvcm1hdCBjYWlybyBtZXRob2QgcmVzcG9uc2UgZGF0YSB0byBuYXRpdmUganMgdmFsdWVzIGJhc2VkIG9uIHByb3ZpZGVkIGZvcm1hdCBzY2hlbWFcbiAgICogQHBhcmFtIG1ldGhvZCBzdHJpbmcgLSBjYWlybyBtZXRob2QgbmFtZVxuICAgKiBAcGFyYW0gcmVzcG9uc2Ugc3RyaW5nW10gLSBjYWlybyBtZXRob2QgcmVzcG9uc2VcbiAgICogQHBhcmFtIGZvcm1hdCBvYmplY3QgLSBmb3JtYXR0ZXIgb2JqZWN0IHNjaGVtYVxuICAgKiBAcmV0dXJucyBSZXN1bHQgLSBwYXJzZWQgYW5kIGZvcm1hdHRlZCByZXNwb25zZSBvYmplY3RcbiAgICovXG4gIGZvcm1hdChtZXRob2QsIHJlc3BvbnNlLCBmb3JtYXQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlKG1ldGhvZCwgcmVzcG9uc2UpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIocGFyc2VkLCBmb3JtYXQpO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gZXh0cmFjdCBzdHJ1Y3RzIGZyb20gYWJpXG4gICAqIEBwYXJhbSBhYmkgQWJpXG4gICAqIEByZXR1cm5zIEFiaVN0cnVjdHMgLSBzdHJ1Y3RzIGZyb20gYWJpXG4gICAqL1xuICBzdGF0aWMgZ2V0QWJpU3RydWN0KGFiaSkge1xuICAgIHJldHVybiBhYmkuZmlsdGVyKChhYmlFbnRyeSkgPT4gYWJpRW50cnkudHlwZSA9PT0gXCJzdHJ1Y3RcIikucmVkdWNlKFxuICAgICAgKGFjYywgYWJpRW50cnkpID0+ICh7XG4gICAgICAgIC4uLmFjYyxcbiAgICAgICAgW2FiaUVudHJ5Lm5hbWVdOiBhYmlFbnRyeVxuICAgICAgfSksXG4gICAgICB7fVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRyYWN0IGVudW1zIGZyb20gYWJpXG4gICAqIEBwYXJhbSBhYmkgQWJpXG4gICAqIEByZXR1cm5zIEFiaUVudW1zIC0gZW51bXMgZnJvbSBhYmlcbiAgICovXG4gIHN0YXRpYyBnZXRBYmlFbnVtKGFiaSkge1xuICAgIGNvbnN0IGZ1bGxFbnVtTGlzdCA9IGFiaS5maWx0ZXIoKGFiaUVudHJ5KSA9PiBhYmlFbnRyeS50eXBlID09PSBcImVudW1cIikucmVkdWNlKFxuICAgICAgKGFjYywgYWJpRW50cnkpID0+ICh7XG4gICAgICAgIC4uLmFjYyxcbiAgICAgICAgW2FiaUVudHJ5Lm5hbWVdOiBhYmlFbnRyeVxuICAgICAgfSksXG4gICAgICB7fVxuICAgICk7XG4gICAgZGVsZXRlIGZ1bGxFbnVtTGlzdFtcImNvcmU6OmJvb2xcIl07XG4gICAgcmV0dXJuIGZ1bGxFbnVtTGlzdDtcbiAgfVxuICAvKipcbiAgICogSGVscGVyOiBDb21waWxlIEhleENhbGxkYXRhIHwgUmF3Q2FsbGRhdGEgfCBSYXdBcmdzXG4gICAqIEBwYXJhbSByYXdDYWxsZGF0YSBIZXhDYWxsZGF0YSB8IFJhd0NhbGxkYXRhIHwgUmF3QXJnc1xuICAgKiBAcmV0dXJucyBDYWxsZGF0YVxuICAgKi9cbiAgc3RhdGljIHRvQ2FsbGRhdGEocmF3Q2FsbGRhdGEgPSBbXSkge1xuICAgIHJldHVybiBDYWxsRGF0YS5jb21waWxlKHJhd0NhbGxkYXRhKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyOiBDb252ZXJ0IHJhdyB0byBIZXhDYWxsZGF0YVxuICAgKiBAcGFyYW0gcmF3IEhleENhbGxkYXRhIHwgUmF3Q2FsbGRhdGEgfCBSYXdBcmdzXG4gICAqIEByZXR1cm5zIEhleENhbGxkYXRhXG4gICAqL1xuICBzdGF0aWMgdG9IZXgocmF3ID0gW10pIHtcbiAgICBjb25zdCBjYWxsZGF0YSA9IENhbGxEYXRhLmNvbXBpbGUocmF3KTtcbiAgICByZXR1cm4gY2FsbGRhdGEubWFwKChpdCkgPT4gdG9IZXgoaXQpKTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL2hhc2gudHNcbnZhciBoYXNoX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGhhc2hfZXhwb3J0cywge1xuICBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaDogKCkgPT4gY2FsY3VsYXRlQ29udHJhY3RBZGRyZXNzRnJvbUhhc2gsXG4gIGNhbGN1bGF0ZURlY2xhcmVUcmFuc2FjdGlvbkhhc2g6ICgpID0+IGNhbGN1bGF0ZURlY2xhcmVUcmFuc2FjdGlvbkhhc2gsXG4gIGNhbGN1bGF0ZURlcGxveUFjY291bnRUcmFuc2FjdGlvbkhhc2g6ICgpID0+IGNhbGN1bGF0ZURlcGxveUFjY291bnRUcmFuc2FjdGlvbkhhc2gsXG4gIGNhbGN1bGF0ZURlcGxveVRyYW5zYWN0aW9uSGFzaDogKCkgPT4gY2FsY3VsYXRlRGVwbG95VHJhbnNhY3Rpb25IYXNoLFxuICBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2g6ICgpID0+IGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaCxcbiAgY2FsY3VsYXRlVHJhbnNhY3Rpb25IYXNoQ29tbW9uOiAoKSA9PiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb24sXG4gIGNvbXB1dGVDb21waWxlZENsYXNzSGFzaDogKCkgPT4gY29tcHV0ZUNvbXBpbGVkQ2xhc3NIYXNoLFxuICBjb21wdXRlQ29udHJhY3RDbGFzc0hhc2g6ICgpID0+IGNvbXB1dGVDb250cmFjdENsYXNzSGFzaCxcbiAgY29tcHV0ZUhhc2hPbkVsZW1lbnRzOiAoKSA9PiBjb21wdXRlSGFzaE9uRWxlbWVudHMsXG4gIGNvbXB1dGVMZWdhY3lDb250cmFjdENsYXNzSGFzaDogKCkgPT4gY29tcHV0ZUxlZ2FjeUNvbnRyYWN0Q2xhc3NIYXNoLFxuICBjb21wdXRlU2llcnJhQ29udHJhY3RDbGFzc0hhc2g6ICgpID0+IGNvbXB1dGVTaWVycmFDb250cmFjdENsYXNzSGFzaCxcbiAgZGVmYXVsdDogKCkgPT4gY29tcHV0ZUhpbnRlZENsYXNzSGFzaCxcbiAgZmVlVHJhbnNhY3Rpb25WZXJzaW9uOiAoKSA9PiBmZWVUcmFuc2FjdGlvblZlcnNpb24sXG4gIGZlZVRyYW5zYWN0aW9uVmVyc2lvbl8yOiAoKSA9PiBmZWVUcmFuc2FjdGlvblZlcnNpb25fMixcbiAgZm9ybWF0U3BhY2VzOiAoKSA9PiBmb3JtYXRTcGFjZXMsXG4gIGdldFNlbGVjdG9yOiAoKSA9PiBnZXRTZWxlY3RvcixcbiAgZ2V0U2VsZWN0b3JGcm9tTmFtZTogKCkgPT4gZ2V0U2VsZWN0b3JGcm9tTmFtZSxcbiAgZ2V0VmVyc2lvbnNCeVR5cGU6ICgpID0+IGdldFZlcnNpb25zQnlUeXBlLFxuICBrZWNjYWtCbjogKCkgPT4ga2VjY2FrQm4sXG4gIHBvc2VpZG9uOiAoKSA9PiBwb3NlaWRvbixcbiAgc3RhcmtuZXRLZWNjYWs6ICgpID0+IHN0YXJrbmV0S2VjY2FrLFxuICB0cmFuc2FjdGlvblZlcnNpb246ICgpID0+IHRyYW5zYWN0aW9uVmVyc2lvbixcbiAgdHJhbnNhY3Rpb25WZXJzaW9uXzI6ICgpID0+IHRyYW5zYWN0aW9uVmVyc2lvbl8yXG59KTtcbmltcG9ydCB7IHBvc2VpZG9uSGFzaE1hbnkgfSBmcm9tIFwiQHNjdXJlL3N0YXJrbmV0XCI7XG5cbi8vIHNyYy91dGlscy9lYy50c1xudmFyIGVjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVjX2V4cG9ydHMsIHtcbiAgc3RhcmtDdXJ2ZTogKCkgPT4gc3RhcmtDdXJ2ZSxcbiAgd2VpZXJzdHJhc3M6ICgpID0+IHdlaWVyc3RyYXNzXG59KTtcbmltcG9ydCAqIGFzIHN0YXJrQ3VydmUgZnJvbSBcIkBzY3VyZS9zdGFya25ldFwiO1xuaW1wb3J0ICogYXMgd2VpZXJzdHJhc3MgZnJvbSBcIkBub2JsZS9jdXJ2ZXMvYWJzdHJhY3Qvd2VpZXJzdHJhc3NcIjtcblxuLy8gc3JjL3V0aWxzL2pzb24udHNcbnZhciBqc29uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGpzb25fZXhwb3J0cywge1xuICBwYXJzZTogKCkgPT4gcGFyc2UyLFxuICBwYXJzZUFsd2F5c0FzQmlnOiAoKSA9PiBwYXJzZUFsd2F5c0FzQmlnLFxuICBzdHJpbmdpZnk6ICgpID0+IHN0cmluZ2lmeTIsXG4gIHN0cmluZ2lmeUFsd2F5c0FzQmlnOiAoKSA9PiBzdHJpbmdpZnlBbHdheXNBc0JpZ1xufSk7XG5pbXBvcnQgKiBhcyBqc29uIGZyb20gXCJsb3NzbGVzcy1qc29uXCI7XG52YXIgcGFyc2VJbnRBc051bWJlck9yQmlnSW50ID0gKHgpID0+IHtcbiAgaWYgKCFqc29uLmlzSW50ZWdlcih4KSlcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh4KTtcbiAgY29uc3QgdiA9IHBhcnNlSW50KHgsIDEwKTtcbiAgcmV0dXJuIE51bWJlci5pc1NhZmVJbnRlZ2VyKHYpID8gdiA6IEJpZ0ludCh4KTtcbn07XG52YXIgcGFyc2UyID0gKHgpID0+IGpzb24ucGFyc2UoU3RyaW5nKHgpLCB2b2lkIDAsIHBhcnNlSW50QXNOdW1iZXJPckJpZ0ludCk7XG52YXIgcGFyc2VBbHdheXNBc0JpZyA9ICh4KSA9PiBqc29uLnBhcnNlKFN0cmluZyh4KSwgdm9pZCAwLCBqc29uLnBhcnNlTnVtYmVyQW5kQmlnSW50KTtcbnZhciBzdHJpbmdpZnkyID0gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UsIG51bWJlclN0cmluZ2lmaWVycykgPT4ganNvbi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSwgbnVtYmVyU3RyaW5naWZpZXJzKTtcbnZhciBzdHJpbmdpZnlBbHdheXNBc0JpZyA9IHN0cmluZ2lmeTI7XG5cbi8vIHNyYy91dGlscy9oYXNoLnRzXG5pbXBvcnQgKiBhcyBwb3NlaWRvbiBmcm9tIFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC9wb3NlaWRvblwiO1xudmFyIHRyYW5zYWN0aW9uVmVyc2lvbiA9IEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMTtcbnZhciB0cmFuc2FjdGlvblZlcnNpb25fMiA9IEJOX1RSQU5TQUNUSU9OX1ZFUlNJT05fMjtcbnZhciBmZWVUcmFuc2FjdGlvblZlcnNpb24gPSBCTl9GRUVfVFJBTlNBQ1RJT05fVkVSU0lPTl8xO1xudmFyIGZlZVRyYW5zYWN0aW9uVmVyc2lvbl8yID0gQk5fRkVFX1RSQU5TQUNUSU9OX1ZFUlNJT05fMjtcbmZ1bmN0aW9uIGdldFZlcnNpb25zQnlUeXBlKHZlcnNpb25UeXBlKSB7XG4gIHJldHVybiB2ZXJzaW9uVHlwZSA9PT0gXCJmZWVcIiA/IHsgdjE6IGZlZVRyYW5zYWN0aW9uVmVyc2lvbiwgdjI6IGZlZVRyYW5zYWN0aW9uVmVyc2lvbl8yIH0gOiB7IHYxOiB0cmFuc2FjdGlvblZlcnNpb24sIHYyOiB0cmFuc2FjdGlvblZlcnNpb25fMiB9O1xufVxuZnVuY3Rpb24gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKGRhdGEpIHtcbiAgcmV0dXJuIFsuLi5kYXRhLCBkYXRhLmxlbmd0aF0ucmVkdWNlKCh4LCB5KSA9PiBzdGFya0N1cnZlLnBlZGVyc2VuKHRvQmlnSW50KHgpLCB0b0JpZ0ludCh5KSksIDApLnRvU3RyaW5nKCk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb24odHhIYXNoUHJlZml4LCB2ZXJzaW9uLCBjb250cmFjdEFkZHJlc3MsIGVudHJ5UG9pbnRTZWxlY3RvciwgY2FsbGRhdGEsIG1heEZlZSwgY2hhaW5JZCwgYWRkaXRpb25hbERhdGEgPSBbXSkge1xuICBjb25zdCBjYWxsZGF0YUhhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoY2FsbGRhdGEpO1xuICBjb25zdCBkYXRhVG9IYXNoID0gW1xuICAgIHR4SGFzaFByZWZpeCxcbiAgICB2ZXJzaW9uLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICBlbnRyeVBvaW50U2VsZWN0b3IsXG4gICAgY2FsbGRhdGFIYXNoLFxuICAgIG1heEZlZSxcbiAgICBjaGFpbklkLFxuICAgIC4uLmFkZGl0aW9uYWxEYXRhXG4gIF07XG4gIHJldHVybiBjb21wdXRlSGFzaE9uRWxlbWVudHMoZGF0YVRvSGFzaCk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVEZXBsb3lUcmFuc2FjdGlvbkhhc2goY29udHJhY3RBZGRyZXNzLCBjb25zdHJ1Y3RvckNhbGxkYXRhLCB2ZXJzaW9uLCBjaGFpbklkLCBjb25zdHJ1Y3Rvck5hbWUgPSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgcmV0dXJuIGNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaENvbW1vbihcbiAgICBcIjB4NjQ2NTcwNmM2Zjc5XCIgLyogREVQTE9ZICovLFxuICAgIHZlcnNpb24sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICAgIGdldFNlbGVjdG9yRnJvbU5hbWUoY29uc3RydWN0b3JOYW1lKSxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgIDAsXG4gICAgY2hhaW5JZFxuICApO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlRGVjbGFyZVRyYW5zYWN0aW9uSGFzaChjbGFzc0hhc2gsIHNlbmRlckFkZHJlc3MsIHZlcnNpb24sIG1heEZlZSwgY2hhaW5JZCwgbm9uY2UsIGNvbXBpbGVkQ2xhc3NIYXNoKSB7XG4gIHJldHVybiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2hDb21tb24oXG4gICAgXCIweDY0NjU2MzZjNjE3MjY1XCIgLyogREVDTEFSRSAqLyxcbiAgICB2ZXJzaW9uLFxuICAgIHNlbmRlckFkZHJlc3MsXG4gICAgMCxcbiAgICBbY2xhc3NIYXNoXSxcbiAgICBtYXhGZWUsXG4gICAgY2hhaW5JZCxcbiAgICBbbm9uY2UsIC4uLmNvbXBpbGVkQ2xhc3NIYXNoID8gW2NvbXBpbGVkQ2xhc3NIYXNoXSA6IFtdXVxuICApO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlRGVwbG95QWNjb3VudFRyYW5zYWN0aW9uSGFzaChjb250cmFjdEFkZHJlc3MsIGNsYXNzSGFzaCwgY29uc3RydWN0b3JDYWxsZGF0YSwgc2FsdCwgdmVyc2lvbiwgbWF4RmVlLCBjaGFpbklkLCBub25jZSkge1xuICBjb25zdCBjYWxsZGF0YSA9IFtjbGFzc0hhc2gsIHNhbHQsIC4uLmNvbnN0cnVjdG9yQ2FsbGRhdGFdO1xuICByZXR1cm4gY2FsY3VsYXRlVHJhbnNhY3Rpb25IYXNoQ29tbW9uKFxuICAgIFwiMHg2NDY1NzA2YzZmNzk1ZjYxNjM2MzZmNzU2ZTc0XCIgLyogREVQTE9ZX0FDQ09VTlQgKi8sXG4gICAgdmVyc2lvbixcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgMCxcbiAgICBjYWxsZGF0YSxcbiAgICBtYXhGZWUsXG4gICAgY2hhaW5JZCxcbiAgICBbbm9uY2VdXG4gICk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2goY29udHJhY3RBZGRyZXNzLCB2ZXJzaW9uLCBjYWxsZGF0YSwgbWF4RmVlLCBjaGFpbklkLCBub25jZSkge1xuICByZXR1cm4gY2FsY3VsYXRlVHJhbnNhY3Rpb25IYXNoQ29tbW9uKFxuICAgIFwiMHg2OTZlNzY2ZjZiNjVcIiAvKiBJTlZPS0UgKi8sXG4gICAgdmVyc2lvbixcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgMCxcbiAgICBjYWxsZGF0YSxcbiAgICBtYXhGZWUsXG4gICAgY2hhaW5JZCxcbiAgICBbbm9uY2VdXG4gICk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaChzYWx0LCBjbGFzc0hhc2gsIGNvbnN0cnVjdG9yQ2FsbGRhdGEsIGRlcGxveWVyQWRkcmVzcykge1xuICBjb25zdCBjb21waWxlZENhbGxkYXRhID0gQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgY29uc3QgY29uc3RydWN0b3JDYWxsZGF0YUhhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoY29tcGlsZWRDYWxsZGF0YSk7XG4gIGNvbnN0IENPTlRSQUNUX0FERFJFU1NfUFJFRklYID0gZmVsdChcIjB4NTM1NDQxNTI0YjRlNDU1NDVmNDM0ZjRlNTQ1MjQxNDM1NDVmNDE0NDQ0NTI0NTUzNTNcIik7XG4gIHJldHVybiBjb21wdXRlSGFzaE9uRWxlbWVudHMoW1xuICAgIENPTlRSQUNUX0FERFJFU1NfUFJFRklYLFxuICAgIGRlcGxveWVyQWRkcmVzcyxcbiAgICBzYWx0LFxuICAgIGNsYXNzSGFzaCxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhSGFzaFxuICBdKTtcbn1cbmZ1bmN0aW9uIG51bGxTa2lwUmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09PSBcImF0dHJpYnV0ZXNcIiB8fCBrZXkgPT09IFwiYWNjZXNzaWJsZV9zY29wZXNcIikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDAgPyB2b2lkIDAgOiB2YWx1ZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcImRlYnVnX2luZm9cIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZm9ybWF0U3BhY2VzKGpzb24yKSB7XG4gIGxldCBpbnNpZGVRdW90ZXMgPSBmYWxzZTtcbiAgY29uc3QgbmV3U3RyaW5nID0gW107XG4gIGZvciAoY29uc3QgY2hhciBvZiBqc29uMikge1xuICAgIGlmIChjaGFyID09PSAnXCInICYmIChuZXdTdHJpbmcubGVuZ3RoID4gMCAmJiBuZXdTdHJpbmcuc2xpY2UoLTEpWzBdID09PSBcIlxcXFxcIikgPT09IGZhbHNlKSB7XG4gICAgICBpbnNpZGVRdW90ZXMgPSAhaW5zaWRlUXVvdGVzO1xuICAgIH1cbiAgICBpZiAoaW5zaWRlUXVvdGVzKSB7XG4gICAgICBuZXdTdHJpbmcucHVzaChjaGFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3RyaW5nLnB1c2goY2hhciA9PT0gXCI6XCIgPyBcIjogXCIgOiBjaGFyID09PSBcIixcIiA/IFwiLCBcIiA6IGNoYXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3U3RyaW5nLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBjb21wdXRlSGludGVkQ2xhc3NIYXNoKGNvbXBpbGVkQ29udHJhY3QpIHtcbiAgY29uc3QgeyBhYmksIHByb2dyYW0gfSA9IGNvbXBpbGVkQ29udHJhY3Q7XG4gIGNvbnN0IGNvbnRyYWN0Q2xhc3MgPSB7IGFiaSwgcHJvZ3JhbSB9O1xuICBjb25zdCBzZXJpYWxpemVkSnNvbiA9IGZvcm1hdFNwYWNlcyhzdHJpbmdpZnkyKGNvbnRyYWN0Q2xhc3MsIG51bGxTa2lwUmVwbGFjZXIpKTtcbiAgcmV0dXJuIGFkZEhleFByZWZpeChzdGFya0N1cnZlLmtlY2Nhayh1dGY4VG9BcnJheShzZXJpYWxpemVkSnNvbikpLnRvU3RyaW5nKDE2KSk7XG59XG5mdW5jdGlvbiBjb21wdXRlTGVnYWN5Q29udHJhY3RDbGFzc0hhc2goY29udHJhY3QpIHtcbiAgY29uc3QgY29tcGlsZWRDb250cmFjdCA9IHR5cGVvZiBjb250cmFjdCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlMihjb250cmFjdCkgOiBjb250cmFjdDtcbiAgY29uc3QgYXBpVmVyc2lvbiA9IHRvSGV4KEFQSV9WRVJTSU9OKTtcbiAgY29uc3QgZXh0ZXJuYWxFbnRyeVBvaW50c0hhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoXG4gICAgY29tcGlsZWRDb250cmFjdC5lbnRyeV9wb2ludHNfYnlfdHlwZS5FWFRFUk5BTC5mbGF0TWFwKChlKSA9PiBbZS5zZWxlY3RvciwgZS5vZmZzZXRdKVxuICApO1xuICBjb25zdCBsMUhhbmRsZXJFbnRyeVBvaW50c0hhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoXG4gICAgY29tcGlsZWRDb250cmFjdC5lbnRyeV9wb2ludHNfYnlfdHlwZS5MMV9IQU5ETEVSLmZsYXRNYXAoKGUpID0+IFtlLnNlbGVjdG9yLCBlLm9mZnNldF0pXG4gICk7XG4gIGNvbnN0IGNvbnN0cnVjdG9yRW50cnlQb2ludEhhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoXG4gICAgY29tcGlsZWRDb250cmFjdC5lbnRyeV9wb2ludHNfYnlfdHlwZS5DT05TVFJVQ1RPUi5mbGF0TWFwKChlKSA9PiBbZS5zZWxlY3RvciwgZS5vZmZzZXRdKVxuICApO1xuICBjb25zdCBidWlsdGluc0hhc2ggPSBjb21wdXRlSGFzaE9uRWxlbWVudHMoXG4gICAgY29tcGlsZWRDb250cmFjdC5wcm9ncmFtLmJ1aWx0aW5zLm1hcCgocykgPT4gZW5jb2RlU2hvcnRTdHJpbmcocykpXG4gICk7XG4gIGNvbnN0IGhpbnRlZENsYXNzSGFzaCA9IGNvbXB1dGVIaW50ZWRDbGFzc0hhc2goY29tcGlsZWRDb250cmFjdCk7XG4gIGNvbnN0IGRhdGFIYXNoID0gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKGNvbXBpbGVkQ29udHJhY3QucHJvZ3JhbS5kYXRhKTtcbiAgcmV0dXJuIGNvbXB1dGVIYXNoT25FbGVtZW50cyhbXG4gICAgYXBpVmVyc2lvbixcbiAgICBleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCxcbiAgICBsMUhhbmRsZXJFbnRyeVBvaW50c0hhc2gsXG4gICAgY29uc3RydWN0b3JFbnRyeVBvaW50SGFzaCxcbiAgICBidWlsdGluc0hhc2gsXG4gICAgaGludGVkQ2xhc3NIYXNoLFxuICAgIGRhdGFIYXNoXG4gIF0pO1xufVxuZnVuY3Rpb24gaGFzaEJ1aWx0aW5zKGJ1aWx0aW5zKSB7XG4gIHJldHVybiBwb3NlaWRvbkhhc2hNYW55KFxuICAgIGJ1aWx0aW5zLmZsYXRNYXAoKGl0KSA9PiB7XG4gICAgICByZXR1cm4gQmlnSW50KGVuY29kZVNob3J0U3RyaW5nKGl0KSk7XG4gICAgfSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGhhc2hFbnRyeVBvaW50KGRhdGEpIHtcbiAgY29uc3QgYmFzZSA9IGRhdGEuZmxhdE1hcCgoaXQpID0+IHtcbiAgICByZXR1cm4gW0JpZ0ludChpdC5zZWxlY3RvciksIEJpZ0ludChpdC5vZmZzZXQpLCBoYXNoQnVpbHRpbnMoaXQuYnVpbHRpbnMpXTtcbiAgfSk7XG4gIHJldHVybiBwb3NlaWRvbkhhc2hNYW55KGJhc2UpO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNvbXBpbGVkQ2xhc3NIYXNoKGNhc20pIHtcbiAgY29uc3QgQ09NUElMRURfQ0xBU1NfVkVSU0lPTiA9IFwiQ09NUElMRURfQ0xBU1NfVjFcIjtcbiAgY29uc3QgY29tcGlsZWRDbGFzc1ZlcnNpb24gPSBCaWdJbnQoZW5jb2RlU2hvcnRTdHJpbmcoQ09NUElMRURfQ0xBU1NfVkVSU0lPTikpO1xuICBjb25zdCBleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCA9IGhhc2hFbnRyeVBvaW50KGNhc20uZW50cnlfcG9pbnRzX2J5X3R5cGUuRVhURVJOQUwpO1xuICBjb25zdCBsMUhhbmRsZXJzID0gaGFzaEVudHJ5UG9pbnQoY2FzbS5lbnRyeV9wb2ludHNfYnlfdHlwZS5MMV9IQU5ETEVSKTtcbiAgY29uc3QgY29uc3RydWN0b3IgPSBoYXNoRW50cnlQb2ludChjYXNtLmVudHJ5X3BvaW50c19ieV90eXBlLkNPTlNUUlVDVE9SKTtcbiAgY29uc3QgYnl0ZWNvZGUgPSBwb3NlaWRvbkhhc2hNYW55KGNhc20uYnl0ZWNvZGUubWFwKChpdCkgPT4gQmlnSW50KGl0KSkpO1xuICByZXR1cm4gdG9IZXgoXG4gICAgcG9zZWlkb25IYXNoTWFueShbXG4gICAgICBjb21waWxlZENsYXNzVmVyc2lvbixcbiAgICAgIGV4dGVybmFsRW50cnlQb2ludHNIYXNoLFxuICAgICAgbDFIYW5kbGVycyxcbiAgICAgIGNvbnN0cnVjdG9yLFxuICAgICAgYnl0ZWNvZGVcbiAgICBdKVxuICApO1xufVxuZnVuY3Rpb24gaGFzaEVudHJ5UG9pbnRTaWVycmEoZGF0YSkge1xuICBjb25zdCBiYXNlID0gZGF0YS5mbGF0TWFwKChpdCkgPT4ge1xuICAgIHJldHVybiBbQmlnSW50KGl0LnNlbGVjdG9yKSwgQmlnSW50KGl0LmZ1bmN0aW9uX2lkeCldO1xuICB9KTtcbiAgcmV0dXJuIHBvc2VpZG9uSGFzaE1hbnkoYmFzZSk7XG59XG5mdW5jdGlvbiBoYXNoQWJpKHNpZXJyYSkge1xuICBjb25zdCBpbmRlbnRTdHJpbmcgPSBmb3JtYXRTcGFjZXMoc3RyaW5naWZ5MihzaWVycmEuYWJpLCBudWxsKSk7XG4gIHJldHVybiBCaWdJbnQoYWRkSGV4UHJlZml4KHN0YXJrQ3VydmUua2VjY2FrKHV0ZjhUb0FycmF5KGluZGVudFN0cmluZykpLnRvU3RyaW5nKDE2KSkpO1xufVxuZnVuY3Rpb24gY29tcHV0ZVNpZXJyYUNvbnRyYWN0Q2xhc3NIYXNoKHNpZXJyYSkge1xuICBjb25zdCBDT05UUkFDVF9DTEFTU19WRVJTSU9OID0gXCJDT05UUkFDVF9DTEFTU19WMC4xLjBcIjtcbiAgY29uc3QgY29tcGlsZWRDbGFzc1ZlcnNpb24gPSBCaWdJbnQoZW5jb2RlU2hvcnRTdHJpbmcoQ09OVFJBQ1RfQ0xBU1NfVkVSU0lPTikpO1xuICBjb25zdCBleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCA9IGhhc2hFbnRyeVBvaW50U2llcnJhKHNpZXJyYS5lbnRyeV9wb2ludHNfYnlfdHlwZS5FWFRFUk5BTCk7XG4gIGNvbnN0IGwxSGFuZGxlcnMgPSBoYXNoRW50cnlQb2ludFNpZXJyYShzaWVycmEuZW50cnlfcG9pbnRzX2J5X3R5cGUuTDFfSEFORExFUik7XG4gIGNvbnN0IGNvbnN0cnVjdG9yID0gaGFzaEVudHJ5UG9pbnRTaWVycmEoc2llcnJhLmVudHJ5X3BvaW50c19ieV90eXBlLkNPTlNUUlVDVE9SKTtcbiAgY29uc3QgYWJpSGFzaCA9IGhhc2hBYmkoc2llcnJhKTtcbiAgY29uc3Qgc2llcnJhUHJvZ3JhbSA9IHBvc2VpZG9uSGFzaE1hbnkoc2llcnJhLnNpZXJyYV9wcm9ncmFtLm1hcCgoaXQpID0+IEJpZ0ludChpdCkpKTtcbiAgcmV0dXJuIHRvSGV4KFxuICAgIHBvc2VpZG9uSGFzaE1hbnkoW1xuICAgICAgY29tcGlsZWRDbGFzc1ZlcnNpb24sXG4gICAgICBleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCxcbiAgICAgIGwxSGFuZGxlcnMsXG4gICAgICBjb25zdHJ1Y3RvcixcbiAgICAgIGFiaUhhc2gsXG4gICAgICBzaWVycmFQcm9ncmFtXG4gICAgXSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVDb250cmFjdENsYXNzSGFzaChjb250cmFjdCkge1xuICBjb25zdCBjb21waWxlZENvbnRyYWN0ID0gdHlwZW9mIGNvbnRyYWN0ID09PSBcInN0cmluZ1wiID8gcGFyc2UyKGNvbnRyYWN0KSA6IGNvbnRyYWN0O1xuICBpZiAoXCJzaWVycmFfcHJvZ3JhbVwiIGluIGNvbXBpbGVkQ29udHJhY3QpIHtcbiAgICByZXR1cm4gY29tcHV0ZVNpZXJyYUNvbnRyYWN0Q2xhc3NIYXNoKGNvbXBpbGVkQ29udHJhY3QpO1xuICB9XG4gIHJldHVybiBjb21wdXRlTGVnYWN5Q29udHJhY3RDbGFzc0hhc2goY29tcGlsZWRDb250cmFjdCk7XG59XG5cbi8vIHNyYy91dGlscy9zdGFyay50c1xudmFyIHN0YXJrX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXJrX2V4cG9ydHMsIHtcbiAgY29tcHJlc3NQcm9ncmFtOiAoKSA9PiBjb21wcmVzc1Byb2dyYW0sXG4gIGRlY29tcHJlc3NQcm9ncmFtOiAoKSA9PiBkZWNvbXByZXNzUHJvZ3JhbSxcbiAgZXN0aW1hdGVkRmVlVG9NYXhGZWU6ICgpID0+IGVzdGltYXRlZEZlZVRvTWF4RmVlLFxuICBmb3JtYXRTaWduYXR1cmU6ICgpID0+IGZvcm1hdFNpZ25hdHVyZSxcbiAgbWFrZUFkZHJlc3M6ICgpID0+IG1ha2VBZGRyZXNzLFxuICByYW5kb21BZGRyZXNzOiAoKSA9PiByYW5kb21BZGRyZXNzLFxuICBzaWduYXR1cmVUb0RlY2ltYWxBcnJheTogKCkgPT4gc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXksXG4gIHNpZ25hdHVyZVRvSGV4QXJyYXk6ICgpID0+IHNpZ25hdHVyZVRvSGV4QXJyYXlcbn0pO1xuaW1wb3J0IHsgZ2V0U3RhcmtLZXksIHV0aWxzIH0gZnJvbSBcIkBzY3VyZS9zdGFya25ldFwiO1xuaW1wb3J0IHsgZ3ppcCwgdW5nemlwIH0gZnJvbSBcInBha29cIjtcbmZ1bmN0aW9uIGNvbXByZXNzUHJvZ3JhbShqc29uUHJvZ3JhbSkge1xuICBjb25zdCBzdHJpbmdpZmllZCA9IHR5cGVvZiBqc29uUHJvZ3JhbSA9PT0gXCJzdHJpbmdcIiA/IGpzb25Qcm9ncmFtIDogc3RyaW5naWZ5Mihqc29uUHJvZ3JhbSk7XG4gIGNvbnN0IGNvbXByZXNzZWRQcm9ncmFtID0gZ3ppcChzdHJpbmdpZmllZCk7XG4gIHJldHVybiBidG9hVW5pdmVyc2FsKGNvbXByZXNzZWRQcm9ncmFtKTtcbn1cbmZ1bmN0aW9uIGRlY29tcHJlc3NQcm9ncmFtKGJhc2U2NDIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmFzZTY0MikpXG4gICAgcmV0dXJuIGJhc2U2NDI7XG4gIGNvbnN0IGRlY29tcHJlc3NlZCA9IGFycmF5QnVmZmVyVG9TdHJpbmcodW5nemlwKGF0b2JVbml2ZXJzYWwoYmFzZTY0MikpKTtcbiAgcmV0dXJuIHBhcnNlMihkZWNvbXByZXNzZWQpO1xufVxuZnVuY3Rpb24gcmFuZG9tQWRkcmVzcygpIHtcbiAgY29uc3QgcmFuZG9tS2V5UGFpciA9IHV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAgcmV0dXJuIGdldFN0YXJrS2V5KHJhbmRvbUtleVBhaXIpO1xufVxuZnVuY3Rpb24gbWFrZUFkZHJlc3MoaW5wdXQpIHtcbiAgcmV0dXJuIGFkZEhleFByZWZpeChpbnB1dCkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFNpZ25hdHVyZShzaWcpIHtcbiAgaWYgKCFzaWcpXG4gICAgdGhyb3cgRXJyb3IoXCJmb3JtYXRTaWduYXR1cmU6IHByb3ZpZGVkIHNpZ25hdHVyZSBpcyB1bmRlZmluZWRcIik7XG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICByZXR1cm4gc2lnLm1hcCgoaXQpID0+IHRvSGV4KGl0KSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCB7IHIsIHMgfSA9IHNpZztcbiAgICByZXR1cm4gW3RvSGV4KHIpLCB0b0hleChzKV07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbmVlZCB0byBiZSB3ZWllcnN0cmFzcy5TaWduYXR1cmVUeXBlIG9yIGFuIGFycmF5IGZvciBjdXN0b21cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIHNpZ25hdHVyZVRvRGVjaW1hbEFycmF5KHNpZykge1xuICByZXR1cm4gYmlnTnVtYmVyaXNoQXJyYXlUb0RlY2ltYWxTdHJpbmdBcnJheShmb3JtYXRTaWduYXR1cmUoc2lnKSk7XG59XG5mdW5jdGlvbiBzaWduYXR1cmVUb0hleEFycmF5KHNpZykge1xuICByZXR1cm4gYmlnTnVtYmVyaXNoQXJyYXlUb0hleGFkZWNpbWFsU3RyaW5nQXJyYXkoZm9ybWF0U2lnbmF0dXJlKHNpZykpO1xufVxuZnVuY3Rpb24gZXN0aW1hdGVkRmVlVG9NYXhGZWUoZXN0aW1hdGVkRmVlLCBvdmVyaGVhZCA9IDAuNSkge1xuICBjb25zdCBvdmVySGVhZFBlcmNlbnQgPSBNYXRoLnJvdW5kKCgxICsgb3ZlcmhlYWQpICogMTAwKTtcbiAgcmV0dXJuIHRvQmlnSW50KGVzdGltYXRlZEZlZSkgKiB0b0JpZ0ludChvdmVySGVhZFBlcmNlbnQpIC8gMTAwbjtcbn1cblxuLy8gc3JjL3V0aWxzL2NvbnRyYWN0LnRzXG5mdW5jdGlvbiBpc1NpZXJyYShjb250cmFjdCkge1xuICBjb25zdCBjb21waWxlZENvbnRyYWN0ID0gdHlwZW9mIGNvbnRyYWN0ID09PSBcInN0cmluZ1wiID8gcGFyc2UyKGNvbnRyYWN0KSA6IGNvbnRyYWN0O1xuICByZXR1cm4gXCJzaWVycmFfcHJvZ3JhbVwiIGluIGNvbXBpbGVkQ29udHJhY3Q7XG59XG5mdW5jdGlvbiBleHRyYWN0Q29udHJhY3RIYXNoZXMocGF5bG9hZCkge1xuICBjb25zdCByZXNwb25zZSA9IHsgLi4ucGF5bG9hZCB9O1xuICBpZiAoaXNTaWVycmEocGF5bG9hZC5jb250cmFjdCkpIHtcbiAgICBpZiAoIXBheWxvYWQuY29tcGlsZWRDbGFzc0hhc2ggJiYgcGF5bG9hZC5jYXNtKSB7XG4gICAgICByZXNwb25zZS5jb21waWxlZENsYXNzSGFzaCA9IGNvbXB1dGVDb21waWxlZENsYXNzSGFzaChwYXlsb2FkLmNhc20pO1xuICAgIH1cbiAgICBpZiAoIXJlc3BvbnNlLmNvbXBpbGVkQ2xhc3NIYXNoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkV4dHJhY3QgY29tcGlsZWRDbGFzc0hhc2ggZmFpbGVkLCBwcm92aWRlIChDYWlyb0Fzc2VtYmx5KS5jYXNtIGZpbGUgb3IgY29tcGlsZWRDbGFzc0hhc2hcIlxuICAgICAgKTtcbiAgfVxuICByZXNwb25zZS5jbGFzc0hhc2ggPSBwYXlsb2FkLmNsYXNzSGFzaCA/PyBjb21wdXRlQ29udHJhY3RDbGFzc0hhc2gocGF5bG9hZC5jb250cmFjdCk7XG4gIGlmICghcmVzcG9uc2UuY2xhc3NIYXNoKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkV4dHJhY3QgY2xhc3NIYXNoIGZhaWxlZCwgcHJvdmlkZSAoQ29tcGlsZWRDb250cmFjdCkuanNvbiBmaWxlIG9yIGNsYXNzSGFzaFwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZnVuY3Rpb24gY29udHJhY3RDbGFzc1Jlc3BvbnNlVG9MZWdhY3lDb21waWxlZENvbnRyYWN0KGNjcikge1xuICBpZiAoaXNTaWVycmEoY2NyKSkge1xuICAgIHRocm93IEVycm9yKFwiQ29udHJhY3RDbGFzc1Jlc3BvbnNlIG5lZWQgdG8gYmUgTGVnYWN5Q29udHJhY3RDbGFzcyAoY2Fpcm8wIHJlc3BvbnNlIGNsYXNzKVwiKTtcbiAgfVxuICBjb25zdCBjb250cmFjdCA9IGNjcjtcbiAgcmV0dXJuIHsgLi4uY29udHJhY3QsIHByb2dyYW06IGRlY29tcHJlc3NQcm9ncmFtKGNvbnRyYWN0LnByb2dyYW0pIH07XG59XG5cbi8vIHNyYy91dGlscy9mZXRjaFBvbnlmaWxsLnRzXG5pbXBvcnQgaXNvbW9ycGhpY0ZldGNoIGZyb20gXCJpc29tb3JwaGljLWZldGNoXCI7XG52YXIgZmV0Y2hQb255ZmlsbF9kZWZhdWx0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZmV0Y2ggfHwgLy8gdXNlIGJ1aWxkaW4gZmV0Y2ggaW4gYnJvd3NlciBpZiBhdmFpbGFibGVcbnR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmZldGNoIHx8IC8vIHVzZSBidWlsZGluIGZldGNoIGluIG5vZGUsIHJlYWN0LW5hdGl2ZSBhbmQgc2VydmljZSB3b3JrZXIgaWYgYXZhaWxhYmxlXG5pc29tb3JwaGljRmV0Y2g7XG5cbi8vIHNyYy91dGlscy9wcm92aWRlci50c1xudmFyIHByb3ZpZGVyX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHByb3ZpZGVyX2V4cG9ydHMsIHtcbiAgY3JlYXRlU2llcnJhQ29udHJhY3RDbGFzczogKCkgPT4gY3JlYXRlU2llcnJhQ29udHJhY3RDbGFzcyxcbiAgcGFyc2VDb250cmFjdDogKCkgPT4gcGFyc2VDb250cmFjdCxcbiAgd2FpdDogKCkgPT4gd2FpdFxufSk7XG5mdW5jdGlvbiB3YWl0KGRlbGF5KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXMsIGRlbGF5KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTaWVycmFDb250cmFjdENsYXNzKGNvbnRyYWN0KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHsgLi4uY29udHJhY3QgfTtcbiAgZGVsZXRlIHJlc3VsdC5zaWVycmFfcHJvZ3JhbV9kZWJ1Z19pbmZvO1xuICByZXN1bHQuYWJpID0gZm9ybWF0U3BhY2VzKHN0cmluZ2lmeTIoY29udHJhY3QuYWJpKSk7XG4gIHJlc3VsdC5zaWVycmFfcHJvZ3JhbSA9IGZvcm1hdFNwYWNlcyhzdHJpbmdpZnkyKGNvbnRyYWN0LnNpZXJyYV9wcm9ncmFtKSk7XG4gIHJlc3VsdC5zaWVycmFfcHJvZ3JhbSA9IGNvbXByZXNzUHJvZ3JhbShyZXN1bHQuc2llcnJhX3Byb2dyYW0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGFyc2VDb250cmFjdChjb250cmFjdCkge1xuICBjb25zdCBwYXJzZWRDb250cmFjdCA9IHR5cGVvZiBjb250cmFjdCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlMihjb250cmFjdCkgOiBjb250cmFjdDtcbiAgaWYgKCFpc1NpZXJyYShjb250cmFjdCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucGFyc2VkQ29udHJhY3QsXG4gICAgICAuLi5cInByb2dyYW1cIiBpbiBwYXJzZWRDb250cmFjdCAmJiB7IHByb2dyYW06IGNvbXByZXNzUHJvZ3JhbShwYXJzZWRDb250cmFjdC5wcm9ncmFtKSB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gY3JlYXRlU2llcnJhQ29udHJhY3RDbGFzcyhwYXJzZWRDb250cmFjdCk7XG59XG5cbi8vIHNyYy91dGlscy9yZXNwb25zZVBhcnNlci9ycGMudHNcbnZhciBSUENSZXNwb25zZVBhcnNlciA9IGNsYXNzIHtcbiAgcGFyc2VHZXRCbG9ja1Jlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiB7XG4gICAgICB0aW1lc3RhbXA6IHJlcy50aW1lc3RhbXAsXG4gICAgICBibG9ja19oYXNoOiBcImJsb2NrX2hhc2hcIiBpbiByZXMgPyByZXMuYmxvY2tfaGFzaCA6IFwiXCIsXG4gICAgICBibG9ja19udW1iZXI6IFwiYmxvY2tfbnVtYmVyXCIgaW4gcmVzID8gcmVzLmJsb2NrX251bWJlciA6IC0xLFxuICAgICAgbmV3X3Jvb3Q6IFwibmV3X3Jvb3RcIiBpbiByZXMgPyByZXMubmV3X3Jvb3QgOiBcIlwiLFxuICAgICAgcGFyZW50X2hhc2g6IHJlcy5wYXJlbnRfaGFzaCxcbiAgICAgIHN0YXR1czogXCJzdGF0dXNcIiBpbiByZXMgPyByZXMuc3RhdHVzIDogXCJQRU5ESU5HXCIgLyogUEVORElORyAqLyxcbiAgICAgIHRyYW5zYWN0aW9uczogcmVzLnRyYW5zYWN0aW9uc1xuICAgIH07XG4gIH1cbiAgcGFyc2VHZXRUcmFuc2FjdGlvblJlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiB7XG4gICAgICBjYWxsZGF0YTogXCJjYWxsZGF0YVwiIGluIHJlcyA/IHJlcy5jYWxsZGF0YSA6IFtdLFxuICAgICAgY29udHJhY3RfYWRkcmVzczogXCJjb250cmFjdF9hZGRyZXNzXCIgaW4gcmVzID8gcmVzLmNvbnRyYWN0X2FkZHJlc3MgOiBcIlwiLFxuICAgICAgc2VuZGVyX2FkZHJlc3M6IFwic2VuZGVyX2FkZHJlc3NcIiBpbiByZXMgPyByZXMuc2VuZGVyX2FkZHJlc3MgOiBcIlwiLFxuICAgICAgbWF4X2ZlZTogXCJtYXhfZmVlXCIgaW4gcmVzID8gcmVzLm1heF9mZWUgOiBcIlwiLFxuICAgICAgbm9uY2U6IFwibm9uY2VcIiBpbiByZXMgPyByZXMubm9uY2UgOiBcIlwiLFxuICAgICAgc2lnbmF0dXJlOiBcInNpZ25hdHVyZVwiIGluIHJlcyA/IHJlcy5zaWduYXR1cmUgOiBbXSxcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoLFxuICAgICAgdmVyc2lvbjogcmVzLnZlcnNpb25cbiAgICB9O1xuICB9XG4gIHBhcnNlRmVlRXN0aW1hdGVSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KHJlc1swXS5vdmVyYWxsX2ZlZSksXG4gICAgICBnYXNfY29uc3VtZWQ6IHRvQmlnSW50KHJlc1swXS5nYXNfY29uc3VtZWQpLFxuICAgICAgZ2FzX3ByaWNlOiB0b0JpZ0ludChyZXNbMF0uZ2FzX3ByaWNlKVxuICAgIH07XG4gIH1cbiAgcGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4gcmVzLm1hcCgodmFsKSA9PiAoe1xuICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KHZhbC5vdmVyYWxsX2ZlZSksXG4gICAgICBnYXNfY29uc3VtZWQ6IHRvQmlnSW50KHZhbC5nYXNfY29uc3VtZWQpLFxuICAgICAgZ2FzX3ByaWNlOiB0b0JpZ0ludCh2YWwuZ2FzX3ByaWNlKVxuICAgIH0pKTtcbiAgfVxuICBwYXJzZUNhbGxDb250cmFjdFJlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IHJlc1xuICAgIH07XG4gIH1cbiAgcGFyc2VTaW11bGF0ZVRyYW5zYWN0aW9uUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHJlcy5tYXAoKGl0KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pdCxcbiAgICAgICAgc3VnZ2VzdGVkTWF4RmVlOiBlc3RpbWF0ZWRGZWVUb01heEZlZShCaWdJbnQoaXQuZmVlX2VzdGltYXRpb24ub3ZlcmFsbF9mZWUpKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBwYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzLFxuICAgICAgYWJpOiB0eXBlb2YgcmVzLmFiaSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2UocmVzLmFiaSkgOiByZXMuYWJpXG4gICAgfTtcbiAgfVxufTtcblxuLy8gc3JjL3Byb3ZpZGVyL2Vycm9ycy50c1xuZnVuY3Rpb24gZml4U3RhY2sodGFyZ2V0LCBmbiA9IHRhcmdldC5jb25zdHJ1Y3Rvcikge1xuICBjb25zdCB7IGNhcHR1cmVTdGFja1RyYWNlIH0gPSBFcnJvcjtcbiAgY2FwdHVyZVN0YWNrVHJhY2UgJiYgY2FwdHVyZVN0YWNrVHJhY2UodGFyZ2V0LCBmbik7XG59XG5mdW5jdGlvbiBmaXhQcm90byh0YXJnZXQsIHByb3RvdHlwZSkge1xuICBjb25zdCB7IHNldFByb3RvdHlwZU9mIH0gPSBPYmplY3Q7XG4gIHNldFByb3RvdHlwZU9mID8gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90b3R5cGUpIDogdGFyZ2V0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbn1cbnZhciBDdXN0b21FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICB2YWx1ZTogbmV3LnRhcmdldC5uYW1lLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBmaXhQcm90byh0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgZml4U3RhY2sodGhpcyk7XG4gIH1cbn07XG52YXIgTGlicmFyeUVycm9yID0gY2xhc3MgZXh0ZW5kcyBDdXN0b21FcnJvciB7XG59O1xudmFyIEdhdGV3YXlFcnJvciA9IGNsYXNzIGV4dGVuZHMgTGlicmFyeUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3JDb2RlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gIH1cbn07XG52YXIgSHR0cEVycm9yID0gY2xhc3MgZXh0ZW5kcyBMaWJyYXJ5RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvckNvZGUpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL3N0YXJrbmV0SWQudHNcbnZhciBzdGFya25ldElkX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHN0YXJrbmV0SWRfZXhwb3J0cywge1xuICBTdGFya25ldElkQ29udHJhY3Q6ICgpID0+IFN0YXJrbmV0SWRDb250cmFjdCxcbiAgZ2V0U3RhcmtuZXRJZENvbnRyYWN0OiAoKSA9PiBnZXRTdGFya25ldElkQ29udHJhY3QsXG4gIHVzZURlY29kZWQ6ICgpID0+IHVzZURlY29kZWQsXG4gIHVzZUVuY29kZWQ6ICgpID0+IHVzZUVuY29kZWRcbn0pO1xudmFyIGJhc2ljQWxwaGFiZXQgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1cIjtcbnZhciBiYXNpY1NpemVQbHVzT25lID0gQmlnSW50KGJhc2ljQWxwaGFiZXQubGVuZ3RoICsgMSk7XG52YXIgYmlnQWxwaGFiZXQgPSBcIlxcdThGRDlcXHU2NzY1XCI7XG52YXIgYmFzaWNBbHBoYWJldFNpemUgPSBCaWdJbnQoYmFzaWNBbHBoYWJldC5sZW5ndGgpO1xudmFyIGJpZ0FscGhhYmV0U2l6ZSA9IEJpZ0ludChiaWdBbHBoYWJldC5sZW5ndGgpO1xudmFyIGJpZ0FscGhhYmV0U2l6ZVBsdXNPbmUgPSBCaWdJbnQoYmlnQWxwaGFiZXQubGVuZ3RoICsgMSk7XG5mdW5jdGlvbiBleHRyYWN0U3RhcnMoc3RyKSB7XG4gIGxldCBrID0gMDtcbiAgd2hpbGUgKHN0ci5lbmRzV2l0aChiaWdBbHBoYWJldFtiaWdBbHBoYWJldC5sZW5ndGggLSAxXSkpIHtcbiAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcbiAgICBrICs9IDE7XG4gIH1cbiAgcmV0dXJuIFtzdHIsIGtdO1xufVxuZnVuY3Rpb24gdXNlRGVjb2RlZChlbmNvZGVkKSB7XG4gIGxldCBkZWNvZGVkID0gXCJcIjtcbiAgZW5jb2RlZC5mb3JFYWNoKChzdWJkb21haW4pID0+IHtcbiAgICB3aGlsZSAoc3ViZG9tYWluICE9PSBaRVJPKSB7XG4gICAgICBjb25zdCBjb2RlID0gc3ViZG9tYWluICUgYmFzaWNTaXplUGx1c09uZTtcbiAgICAgIHN1YmRvbWFpbiAvPSBiYXNpY1NpemVQbHVzT25lO1xuICAgICAgaWYgKGNvZGUgPT09IEJpZ0ludChiYXNpY0FscGhhYmV0Lmxlbmd0aCkpIHtcbiAgICAgICAgY29uc3QgbmV4dFN1YmRvbWFpbiA9IHN1YmRvbWFpbiAvIGJpZ0FscGhhYmV0U2l6ZVBsdXNPbmU7XG4gICAgICAgIGlmIChuZXh0U3ViZG9tYWluID09PSBaRVJPKSB7XG4gICAgICAgICAgY29uc3QgY29kZTIgPSBzdWJkb21haW4gJSBiaWdBbHBoYWJldFNpemVQbHVzT25lO1xuICAgICAgICAgIHN1YmRvbWFpbiA9IG5leHRTdWJkb21haW47XG4gICAgICAgICAgaWYgKGNvZGUyID09PSBaRVJPKVxuICAgICAgICAgICAgZGVjb2RlZCArPSBiYXNpY0FscGhhYmV0WzBdO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlY29kZWQgKz0gYmlnQWxwaGFiZXRbTnVtYmVyKGNvZGUyKSAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGNvZGUyID0gc3ViZG9tYWluICUgYmlnQWxwaGFiZXRTaXplO1xuICAgICAgICAgIGRlY29kZWQgKz0gYmlnQWxwaGFiZXRbTnVtYmVyKGNvZGUyKV07XG4gICAgICAgICAgc3ViZG9tYWluIC89IGJpZ0FscGhhYmV0U2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIGRlY29kZWQgKz0gYmFzaWNBbHBoYWJldFtOdW1iZXIoY29kZSldO1xuICAgIH1cbiAgICBjb25zdCBbc3RyLCBrXSA9IGV4dHJhY3RTdGFycyhkZWNvZGVkKTtcbiAgICBpZiAoaylcbiAgICAgIGRlY29kZWQgPSBzdHIgKyAoayAlIDIgPT09IDAgPyBiaWdBbHBoYWJldFtiaWdBbHBoYWJldC5sZW5ndGggLSAxXS5yZXBlYXQoayAvIDIgLSAxKSArIGJpZ0FscGhhYmV0WzBdICsgYmFzaWNBbHBoYWJldFsxXSA6IGJpZ0FscGhhYmV0W2JpZ0FscGhhYmV0Lmxlbmd0aCAtIDFdLnJlcGVhdCgoayAtIDEpIC8gMiArIDEpKTtcbiAgICBkZWNvZGVkICs9IFwiLlwiO1xuICB9KTtcbiAgaWYgKCFkZWNvZGVkKSB7XG4gICAgcmV0dXJuIGRlY29kZWQ7XG4gIH1cbiAgcmV0dXJuIGRlY29kZWQuY29uY2F0KFwic3RhcmtcIik7XG59XG5mdW5jdGlvbiB1c2VFbmNvZGVkKGRlY29kZWQpIHtcbiAgbGV0IGVuY29kZWQgPSBCaWdJbnQoMCk7XG4gIGxldCBtdWx0aXBsaWVyID0gQmlnSW50KDEpO1xuICBpZiAoZGVjb2RlZC5lbmRzV2l0aChiaWdBbHBoYWJldFswXSArIGJhc2ljQWxwaGFiZXRbMV0pKSB7XG4gICAgY29uc3QgW3N0ciwga10gPSBleHRyYWN0U3RhcnMoZGVjb2RlZC5zdWJzdHJpbmcoMCwgZGVjb2RlZC5sZW5ndGggLSAyKSk7XG4gICAgZGVjb2RlZCA9IHN0ciArIGJpZ0FscGhhYmV0W2JpZ0FscGhhYmV0Lmxlbmd0aCAtIDFdLnJlcGVhdCgyICogKGsgKyAxKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW3N0ciwga10gPSBleHRyYWN0U3RhcnMoZGVjb2RlZCk7XG4gICAgaWYgKGspXG4gICAgICBkZWNvZGVkID0gc3RyICsgYmlnQWxwaGFiZXRbYmlnQWxwaGFiZXQubGVuZ3RoIC0gMV0ucmVwZWF0KDEgKyAyICogKGsgLSAxKSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWNvZGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgY2hhciA9IGRlY29kZWRbaV07XG4gICAgY29uc3QgaW5kZXggPSBiYXNpY0FscGhhYmV0LmluZGV4T2YoY2hhcik7XG4gICAgY29uc3QgYm5JbmRleCA9IEJpZ0ludChiYXNpY0FscGhhYmV0LmluZGV4T2YoY2hhcikpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChpID09PSBkZWNvZGVkLmxlbmd0aCAtIDEgJiYgZGVjb2RlZFtpXSA9PT0gYmFzaWNBbHBoYWJldFswXSkge1xuICAgICAgICBlbmNvZGVkICs9IG11bHRpcGxpZXIgKiBiYXNpY0FscGhhYmV0U2l6ZTtcbiAgICAgICAgbXVsdGlwbGllciAqPSBiYXNpY1NpemVQbHVzT25lO1xuICAgICAgICBtdWx0aXBsaWVyICo9IGJhc2ljU2l6ZVBsdXNPbmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmNvZGVkICs9IG11bHRpcGxpZXIgKiBibkluZGV4O1xuICAgICAgICBtdWx0aXBsaWVyICo9IGJhc2ljU2l6ZVBsdXNPbmU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiaWdBbHBoYWJldC5pbmRleE9mKGNoYXIpICE9PSAtMSkge1xuICAgICAgZW5jb2RlZCArPSBtdWx0aXBsaWVyICogYmFzaWNBbHBoYWJldFNpemU7XG4gICAgICBtdWx0aXBsaWVyICo9IGJhc2ljU2l6ZVBsdXNPbmU7XG4gICAgICBjb25zdCBuZXdpZCA9IChpID09PSBkZWNvZGVkLmxlbmd0aCAtIDEgPyAxIDogMCkgKyBiaWdBbHBoYWJldC5pbmRleE9mKGNoYXIpO1xuICAgICAgZW5jb2RlZCArPSBtdWx0aXBsaWVyICogQmlnSW50KG5ld2lkKTtcbiAgICAgIG11bHRpcGxpZXIgKj0gYmlnQWxwaGFiZXRTaXplO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZW5jb2RlZDtcbn1cbnZhciBTdGFya25ldElkQ29udHJhY3QgPSAvKiBAX19QVVJFX18gKi8gKChTdGFya25ldElkQ29udHJhY3QyKSA9PiB7XG4gIFN0YXJrbmV0SWRDb250cmFjdDJbXCJNQUlOTkVUXCJdID0gXCIweDZhYzU5N2Y4MTE2Zjg4NmZhMWM5N2EyM2ZhNGUwODI5OTk3NWVjYWY2YjU5ODg3M2NhNjc5MmI5YmJmYjY3OFwiO1xuICBTdGFya25ldElkQ29udHJhY3QyW1wiVEVTVE5FVFwiXSA9IFwiMHgzYmFiMjY4ZTkzMmQyY2VjZDE5NDZmMTAwYWU2N2NlM2RmZjlmZDIzNDExOWVhMmY2ZGE1N2QxNmQyOWZjZVwiO1xuICByZXR1cm4gU3RhcmtuZXRJZENvbnRyYWN0Mjtcbn0pKFN0YXJrbmV0SWRDb250cmFjdCB8fCB7fSk7XG5mdW5jdGlvbiBnZXRTdGFya25ldElkQ29udHJhY3QoY2hhaW5JZCkge1xuICBzd2l0Y2ggKGNoYWluSWQpIHtcbiAgICBjYXNlIFwiMHg1MzRlNWY0ZDQxNDk0ZVwiIC8qIFNOX01BSU4gKi86XG4gICAgICByZXR1cm4gXCIweDZhYzU5N2Y4MTE2Zjg4NmZhMWM5N2EyM2ZhNGUwODI5OTk3NWVjYWY2YjU5ODg3M2NhNjc5MmI5YmJmYjY3OFwiIC8qIE1BSU5ORVQgKi87XG4gICAgY2FzZSBcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCIgLyogU05fR09FUkxJICovOlxuICAgICAgcmV0dXJuIFwiMHgzYmFiMjY4ZTkzMmQyY2VjZDE5NDZmMTAwYWU2N2NlM2RmZjlmZDIzNDExOWVhMmY2ZGE1N2QxNmQyOWZjZVwiIC8qIFRFU1RORVQgKi87XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0YXJrbmV0LmlkIGlzIG5vdCB5ZXQgZGVwbG95ZWQgb24gdGhpcyBuZXR3b3JrXCIpO1xuICB9XG59XG5cbi8vIHNyYy9wcm92aWRlci9zdGFya25ldElkLnRzXG5hc3luYyBmdW5jdGlvbiBnZXRTdGFya05hbWUocHJvdmlkZXIsIGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHByb3ZpZGVyLmdldENoYWluSWQoKTtcbiAgY29uc3QgY29udHJhY3QgPSBTdGFya25ldElkQ29udHJhY3QyID8/IGdldFN0YXJrbmV0SWRDb250cmFjdChjaGFpbklkKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBoZXhEb21haW4gPSBhd2FpdCBwcm92aWRlci5jYWxsQ29udHJhY3Qoe1xuICAgICAgY29udHJhY3RBZGRyZXNzOiBjb250cmFjdCxcbiAgICAgIGVudHJ5cG9pbnQ6IFwiYWRkcmVzc190b19kb21haW5cIixcbiAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKHtcbiAgICAgICAgYWRkcmVzc1xuICAgICAgfSlcbiAgICB9KTtcbiAgICBjb25zdCBkZWNpbWFsRG9tYWluID0gaGV4RG9tYWluLnJlc3VsdC5tYXAoKGVsZW1lbnQpID0+IEJpZ0ludChlbGVtZW50KSkuc2xpY2UoMSk7XG4gICAgY29uc3Qgc3RyaW5nRG9tYWluID0gdXNlRGVjb2RlZChkZWNpbWFsRG9tYWluKTtcbiAgICBpZiAoIXN0cmluZ0RvbWFpbikge1xuICAgICAgdGhyb3cgRXJyb3IoXCJTdGFya25hbWUgbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nRG9tYWluO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm1lc3NhZ2UgPT09IFwiU3RhcmtuYW1lIG5vdCBmb3VuZFwiKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICB0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBnZXQgc3RhcmsgbmFtZVwiKTtcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUocHJvdmlkZXIsIG5hbWUsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHByb3ZpZGVyLmdldENoYWluSWQoKTtcbiAgY29uc3QgY29udHJhY3QgPSBTdGFya25ldElkQ29udHJhY3QyID8/IGdldFN0YXJrbmV0SWRDb250cmFjdChjaGFpbklkKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBhZGRyZXNzRGF0YSA9IGF3YWl0IHByb3ZpZGVyLmNhbGxDb250cmFjdCh7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IGNvbnRyYWN0LFxuICAgICAgZW50cnlwb2ludDogXCJkb21haW5fdG9fYWRkcmVzc1wiLFxuICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoe1xuICAgICAgICBkb21haW46IFt1c2VFbmNvZGVkKG5hbWUucmVwbGFjZShcIi5zdGFya1wiLCBcIlwiKSkudG9TdHJpbmcoMTApXVxuICAgICAgfSlcbiAgICB9KTtcbiAgICByZXR1cm4gYWRkcmVzc0RhdGEucmVzdWx0WzBdO1xuICB9IGNhdGNoIHtcbiAgICB0aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBnZXQgYWRkcmVzcyBmcm9tIHN0YXJrIG5hbWVcIik7XG4gIH1cbn1cblxuLy8gc3JjL3Byb3ZpZGVyL3V0aWxzLnRzXG52YXIgdmFsaWRCbG9ja1RhZ3MgPSBPYmplY3QudmFsdWVzKEJsb2NrVGFnKTtcbnZhciBCbG9jayA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX2lkZW50aWZpZXIpIHtcbiAgICB0aGlzLmhhc2ggPSBudWxsO1xuICAgIHRoaXMubnVtYmVyID0gbnVsbDtcbiAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgdGhpcy52YWx1ZU9mID0gKCkgPT4gdGhpcy5udW1iZXI7XG4gICAgdGhpcy50b1N0cmluZyA9ICgpID0+IHRoaXMuaGFzaDtcbiAgICB0aGlzLnNldElkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICB9XG4gIHNldElkZW50aWZpZXIoX19pZGVudGlmaWVyKSB7XG4gICAgaWYgKHR5cGVvZiBfX2lkZW50aWZpZXIgPT09IFwic3RyaW5nXCIgJiYgaXNIZXgoX19pZGVudGlmaWVyKSkge1xuICAgICAgdGhpcy5oYXNoID0gX19pZGVudGlmaWVyO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF9faWRlbnRpZmllciA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgdGhpcy5oYXNoID0gdG9IZXgoX19pZGVudGlmaWVyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfX2lkZW50aWZpZXIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRoaXMubnVtYmVyID0gX19pZGVudGlmaWVyO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF9faWRlbnRpZmllciA9PT0gXCJzdHJpbmdcIiAmJiB2YWxpZEJsb2NrVGFncy5pbmNsdWRlcyhfX2lkZW50aWZpZXIpKSB7XG4gICAgICB0aGlzLnRhZyA9IF9faWRlbnRpZmllcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YWcgPSBcInBlbmRpbmdcIiAvKiBwZW5kaW5nICovO1xuICAgIH1cbiAgfVxuICAvLyBUT0RPOiBmaXggYW55XG4gIGdldCBxdWVyeUlkZW50aWZpZXIoKSB7XG4gICAgaWYgKHRoaXMubnVtYmVyICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYGJsb2NrTnVtYmVyPSR7dGhpcy5udW1iZXJ9YDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzaCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGBibG9ja0hhc2g9JHt0aGlzLmhhc2h9YDtcbiAgICB9XG4gICAgcmV0dXJuIGBibG9ja051bWJlcj0ke3RoaXMudGFnfWA7XG4gIH1cbiAgLy8gVE9ETzogZml4IGFueVxuICBnZXQgaWRlbnRpZmllcigpIHtcbiAgICBpZiAodGhpcy5udW1iZXIgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiB7IGJsb2NrX251bWJlcjogdGhpcy5udW1iZXIgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzaCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHsgYmxvY2tfaGFzaDogdGhpcy5oYXNoIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRhZztcbiAgfVxuICBzZXQgaWRlbnRpZmllcihfaWRlbnRpZmllcikge1xuICAgIHRoaXMuc2V0SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gIH1cbiAgZ2V0IHNlcXVlbmNlcklkZW50aWZpZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaCAhPT0gbnVsbCA/IHsgYmxvY2tIYXNoOiB0aGlzLmhhc2ggfSA6IHsgYmxvY2tOdW1iZXI6IHRoaXMubnVtYmVyID8/IHRoaXMudGFnIH07XG4gIH1cbn07XG5cbi8vIHNyYy9wcm92aWRlci9ycGMudHNcbnZhciBnZXREZWZhdWx0Tm9kZVVybCA9IChuZXR3b3JrTmFtZSwgbXV0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmICghbXV0ZSlcbiAgICBjb25zb2xlLndhcm4oXCJVc2luZyBkZWZhdWx0IHB1YmxpYyBub2RlIHVybCwgcGxlYXNlIHByb3ZpZGUgbm9kZVVybCBpbiBwcm92aWRlciBvcHRpb25zIVwiKTtcbiAgY29uc3Qgbm9kZXMgPSBuZXR3b3JrTmFtZSA9PT0gXCJTTl9NQUlOXCIgLyogU05fTUFJTiAqLyA/IFJQQ19NQUlOTkVUX05PREVTIDogUlBDX0dPRVJMSV9OT0RFUztcbiAgY29uc3QgcmFuZElkeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG5vZGVzLmxlbmd0aCk7XG4gIHJldHVybiBub2Rlc1tyYW5kSWR4XTtcbn07XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgYmxvY2tJZGVudGlmaWVyOiBcInBlbmRpbmdcIiAvKiBwZW5kaW5nICovLFxuICByZXRyaWVzOiAyMDBcbn07XG52YXIgUnBjUHJvdmlkZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnNPclByb3ZpZGVyKSB7XG4gICAgdGhpcy5yZXNwb25zZVBhcnNlciA9IG5ldyBSUENSZXNwb25zZVBhcnNlcigpO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHJlbmFtZWQgdG8gZ2V0QmxvY2tMYXRlc3RBY2NlcHRlZCgpOyAod2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWlub3IgdmVyc2lvbilcbiAgICAgKi9cbiAgICB0aGlzLmdldEJsb2NrSGFzaEFuZE51bWJlciA9IHRoaXMuZ2V0QmxvY2tMYXRlc3RBY2NlcHRlZDtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIGdldEJsb2NrU3RhdGVVcGRhdGUoKTtcbiAgICAgKi9cbiAgICB0aGlzLmdldFN0YXRlVXBkYXRlID0gdGhpcy5nZXRCbG9ja1N0YXRlVXBkYXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGV4ZWN1dGlvbiB0cmFjZXMgb2YgYWxsIHRyYW5zYWN0aW9ucyBpbmNsdWRlZCBpbiB0aGUgZ2l2ZW4gYmxvY2tcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIGdldEJsb2NrVHJhbnNhY3Rpb25zVHJhY2VzKClcbiAgICAgKi9cbiAgICB0aGlzLnRyYWNlQmxvY2tUcmFuc2FjdGlvbnMgPSB0aGlzLmdldEJsb2NrVHJhbnNhY3Rpb25zVHJhY2VzO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiBhIGJsb2NrIGdpdmVuIGEgYmxvY2sgaWRcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIGdldEJsb2NrVHJhbnNhY3Rpb25Db3VudCgpXG4gICAgICogQHJldHVybnMgTnVtYmVyIG9mIHRyYW5zYWN0aW9uc1xuICAgICAqL1xuICAgIHRoaXMuZ2V0VHJhbnNhY3Rpb25Db3VudCA9IHRoaXMuZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHJlbmFtZWQgdG8gZ2V0VHJhbnNhY3Rpb25UcmFjZSgpO1xuICAgICAqIEZvciBhIGdpdmVuIGV4ZWN1dGVkIHRyYW5zYWN0aW9uLCByZXR1cm4gdGhlIHRyYWNlIG9mIGl0cyBleGVjdXRpb24sIGluY2x1ZGluZyBpbnRlcm5hbCBjYWxsc1xuICAgICAqL1xuICAgIHRoaXMudHJhY2VUcmFuc2FjdGlvbiA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25UcmFjZTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCByZW5hbWVkIHRvIHNpbXVsYXRlVHJhbnNhY3Rpb24oKTtcbiAgICAgKi9cbiAgICB0aGlzLmdldFNpbXVsYXRlVHJhbnNhY3Rpb24gPSB0aGlzLnNpbXVsYXRlVHJhbnNhY3Rpb247XG4gICAgY29uc3QgeyBub2RlVXJsLCByZXRyaWVzLCBoZWFkZXJzLCBibG9ja0lkZW50aWZpZXIsIGNoYWluSWQgfSA9IG9wdGlvbnNPclByb3ZpZGVyIHx8IHt9O1xuICAgIGlmIChPYmplY3QudmFsdWVzKE5ldHdvcmtOYW1lKS5pbmNsdWRlcyhub2RlVXJsKSkge1xuICAgICAgdGhpcy5ub2RlVXJsID0gZ2V0RGVmYXVsdE5vZGVVcmwobm9kZVVybCwgb3B0aW9uc09yUHJvdmlkZXI/LmRlZmF1bHQpO1xuICAgIH0gZWxzZSBpZiAobm9kZVVybCkge1xuICAgICAgdGhpcy5ub2RlVXJsID0gbm9kZVVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub2RlVXJsID0gZ2V0RGVmYXVsdE5vZGVVcmwodm9pZCAwLCBvcHRpb25zT3JQcm92aWRlcj8uZGVmYXVsdCk7XG4gICAgfVxuICAgIHRoaXMucmV0cmllcyA9IHJldHJpZXMgfHwgZGVmYXVsdE9wdGlvbnMucmV0cmllcztcbiAgICB0aGlzLmhlYWRlcnMgPSB7IC4uLmRlZmF1bHRPcHRpb25zLmhlYWRlcnMsIC4uLmhlYWRlcnMgfTtcbiAgICB0aGlzLmJsb2NrSWRlbnRpZmllciA9IGJsb2NrSWRlbnRpZmllciB8fCBkZWZhdWx0T3B0aW9ucy5ibG9ja0lkZW50aWZpZXI7XG4gICAgdGhpcy5jaGFpbklkID0gY2hhaW5JZDtcbiAgfVxuICBmZXRjaChtZXRob2QsIHBhcmFtcywgaWQgPSAwKSB7XG4gICAgY29uc3QgcnBjUmVxdWVzdEJvZHkgPSB7XG4gICAgICBpZCxcbiAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICBtZXRob2QsXG4gICAgICAuLi5wYXJhbXMgJiYgeyBwYXJhbXMgfVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoUG9ueWZpbGxfZGVmYXVsdCh0aGlzLm5vZGVVcmwsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBib2R5OiBzdHJpbmdpZnkyKHJwY1JlcXVlc3RCb2R5KSxcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVyc1xuICAgIH0pO1xuICB9XG4gIGVycm9ySGFuZGxlcihtZXRob2QsIHBhcmFtcywgcnBjRXJyb3IsIG90aGVyRXJyb3IpIHtcbiAgICBpZiAocnBjRXJyb3IpIHtcbiAgICAgIGNvbnN0IHsgY29kZSwgbWVzc2FnZSwgZGF0YSB9ID0gcnBjRXJyb3I7XG4gICAgICB0aHJvdyBuZXcgTGlicmFyeUVycm9yKFxuICAgICAgICBgUlBDOiAke21ldGhvZH0gd2l0aCBwYXJhbXMgJHtzdHJpbmdpZnkyKHBhcmFtcyl9XG4gJHtjb2RlfTogJHttZXNzYWdlfTogJHtzdHJpbmdpZnkyKGRhdGEpfWBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChvdGhlckVycm9yIGluc3RhbmNlb2YgTGlicmFyeUVycm9yKSB7XG4gICAgICB0aHJvdyBvdGhlckVycm9yO1xuICAgIH1cbiAgICBpZiAob3RoZXJFcnJvcikge1xuICAgICAgdGhyb3cgRXJyb3Iob3RoZXJFcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hFbmRwb2ludChtZXRob2QsIHBhcmFtcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByYXdSZXN1bHQgPSBhd2FpdCB0aGlzLmZldGNoKG1ldGhvZCwgcGFyYW1zKTtcbiAgICAgIGNvbnN0IHsgZXJyb3IsIHJlc3VsdCB9ID0gYXdhaXQgcmF3UmVzdWx0Lmpzb24oKTtcbiAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKG1ldGhvZCwgcGFyYW1zLCBlcnJvcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlcihtZXRob2QsIHBhcmFtcywgZXJyb3I/LnJlc3BvbnNlPy5kYXRhLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0Q2hhaW5JZCgpIHtcbiAgICB0aGlzLmNoYWluSWQgPz8gKHRoaXMuY2hhaW5JZCA9IGF3YWl0IHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2NoYWluSWRcIikpO1xuICAgIHJldHVybiB0aGlzLmNoYWluSWQ7XG4gIH1cbiAgLyoqXG4gICAqIE5FVzogUmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGUgU3RhcmtuZXQgSlNPTi1SUEMgc3BlY2lmaWNhdGlvbiBiZWluZyB1c2VkXG4gICAqL1xuICBhc3luYyBnZXRTcGVjVmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfc3BlY1ZlcnNpb25cIik7XG4gIH1cbiAgYXN5bmMgZ2V0Tm9uY2VGb3JBZGRyZXNzKGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBjb250cmFjdF9hZGRyZXNzID0gdG9IZXgoY29udHJhY3RBZGRyZXNzKTtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldE5vbmNlXCIsIHtcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3MsXG4gICAgICBibG9ja19pZFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZ2V0QmxvY2tXaXRoVHhIYXNoZXMgb3IgZ2V0QmxvY2tXaXRoVHhzICh3aWxsIGJlIHJlbW92ZWQgb24gc2VxdWVuY2VyIGRlcHJlY2F0aW9uKVxuICAgKi9cbiAgYXN5bmMgZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCbG9ja1dpdGhUeEhhc2hlcyhibG9ja0lkZW50aWZpZXIpLnRoZW4oXG4gICAgICB0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlR2V0QmxvY2tSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbW9zdCByZWNlbnQgYWNjZXB0ZWQgYmxvY2sgaGFzaCBhbmQgbnVtYmVyXG4gICAqL1xuICBhc3luYyBnZXRCbG9ja0xhdGVzdEFjY2VwdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9ibG9ja0hhc2hBbmROdW1iZXJcIik7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHJlZHVuZGFudCB1c2UgZ2V0QmxvY2tMYXRlc3RBY2NlcHRlZCgpO1xuICAgKiBHZXQgdGhlIG1vc3QgcmVjZW50IGFjY2VwdGVkIGJsb2NrIG51bWJlclxuICAgKiBAcmV0dXJucyBOdW1iZXIgb2YgdGhlIGxhdGVzdCBibG9ja1xuICAgKi9cbiAgYXN5bmMgZ2V0QmxvY2tOdW1iZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2Jsb2NrTnVtYmVyXCIpO1xuICB9XG4gIGFzeW5jIGdldEJsb2NrV2l0aFR4SGFzaGVzKGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRCbG9ja1dpdGhUeEhhc2hlc1wiLCB7IGJsb2NrX2lkIH0pO1xuICB9XG4gIGFzeW5jIGdldEJsb2NrV2l0aFR4cyhibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0QmxvY2tXaXRoVHhzXCIsIHsgYmxvY2tfaWQgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2tTdGF0ZVVwZGF0ZShibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0U3RhdGVVcGRhdGVcIiwgeyBibG9ja19pZCB9KTtcbiAgfVxuICBhc3luYyBnZXRCbG9ja1RyYW5zYWN0aW9uc1RyYWNlcyhibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfdHJhY2VCbG9ja1RyYW5zYWN0aW9uc1wiLCB7IGJsb2NrX2lkIH0pO1xuICB9XG4gIGFzeW5jIGdldEJsb2NrVHJhbnNhY3Rpb25Db3VudChibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50XCIsIHsgYmxvY2tfaWQgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0cmFuc2FjdGlvbnMgZnJvbSBwZW5kaW5nIGJsb2NrXG4gICAqIEBkZXByZWNhdGVkIEluc3RlYWQgdXNlIGdldEJsb2NrKEJsb2NrVGFnLnBlbmRpbmcpOyAod2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWlub3IgdmVyc2lvbilcbiAgICovXG4gIGFzeW5jIGdldFBlbmRpbmdUcmFuc2FjdGlvbnMoKSB7XG4gICAgY29uc3QgeyB0cmFuc2FjdGlvbnMgfSA9IGF3YWl0IHRoaXMuZ2V0QmxvY2soXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqLyk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRyYW5zYWN0aW9ucy5tYXAoKGl0KSA9PiB0aGlzLmdldFRyYW5zYWN0aW9uQnlIYXNoKGl0KSkpO1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZ2V0VHJhbnNhY3Rpb25CeUhhc2ggb3IgZ2V0VHJhbnNhY3Rpb25CeUJsb2NrSWRBbmRJbmRleCAod2lsbCBiZSByZW1vdmVkIG9uIHNlcXVlbmNlciBkZXByZWNhdGlvbilcbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uKHR4SGFzaCkge1xuICAgIHJldHVybiB0aGlzLmdldFRyYW5zYWN0aW9uQnlIYXNoKHR4SGFzaCkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlR2V0VHJhbnNhY3Rpb25SZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25CeUhhc2godHhIYXNoKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25faGFzaCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2hcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvbkJ5QmxvY2tJZEFuZEluZGV4KGJsb2NrSWRlbnRpZmllciwgaW5kZXgpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldFRyYW5zYWN0aW9uQnlCbG9ja0lkQW5kSW5kZXhcIiwgeyBibG9ja19pZCwgaW5kZXggfSk7XG4gIH1cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uX2hhc2ggPSB0b0hleCh0eEhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRUcmFuc2FjdGlvblJlY2VpcHRcIiwgeyB0cmFuc2FjdGlvbl9oYXNoIH0pO1xuICB9XG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uVHJhY2UodHhIYXNoKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25faGFzaCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X3RyYWNlVHJhbnNhY3Rpb25cIiwgeyB0cmFuc2FjdGlvbl9oYXNoIH0pO1xuICB9XG4gIC8qKlxuICAgKiBORVc6IEdldCB0aGUgc3RhdHVzIG9mIGEgdHJhbnNhY3Rpb25cbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uU3RhdHVzKHRyYW5zYWN0aW9uSGFzaCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uX2hhc2ggPSB0b0hleCh0cmFuc2FjdGlvbkhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRUcmFuc2FjdGlvblN0YXR1c1wiLCB7IHRyYW5zYWN0aW9uX2hhc2ggfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBpbnZvY2F0aW9ucyBBY2NvdW50SW52b2NhdGlvbnNcbiAgICogQHBhcmFtIHNpbXVsYXRlVHJhbnNhY3Rpb25PcHRpb25zIGJsb2NrSWRlbnRpZmllciBhbmQgZmxhZ3MgdG8gc2tpcCB2YWxpZGF0aW9uIGFuZCBmZWUgY2hhcmdlPGJyLz5cbiAgICogLSBibG9ja0lkZW50aWZpZXI8YnIvPlxuICAgKiAtIHNraXBWYWxpZGF0ZSAoZGVmYXVsdCBmYWxzZSk8YnIvPlxuICAgKiAtIHNraXBGZWVDaGFyZ2UgKGRlZmF1bHQgdHJ1ZSk8YnIvPlxuICAgKi9cbiAgYXN5bmMgc2ltdWxhdGVUcmFuc2FjdGlvbihpbnZvY2F0aW9ucywge1xuICAgIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyLFxuICAgIHNraXBWYWxpZGF0ZSA9IGZhbHNlLFxuICAgIHNraXBGZWVDaGFyZ2UgPSB0cnVlXG4gIH0pIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgY29uc3Qgc2ltdWxhdGlvbkZsYWdzID0gW107XG4gICAgaWYgKHNraXBWYWxpZGF0ZSlcbiAgICAgIHNpbXVsYXRpb25GbGFncy5wdXNoKHJwY19leHBvcnRzLkVTaW11bGF0aW9uRmxhZy5TS0lQX1ZBTElEQVRFKTtcbiAgICBpZiAoc2tpcEZlZUNoYXJnZSlcbiAgICAgIHNpbXVsYXRpb25GbGFncy5wdXNoKHJwY19leHBvcnRzLkVTaW11bGF0aW9uRmxhZy5TS0lQX0ZFRV9DSEFSR0UpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9zaW11bGF0ZVRyYW5zYWN0aW9uc1wiLCB7XG4gICAgICBibG9ja19pZCxcbiAgICAgIHRyYW5zYWN0aW9uczogaW52b2NhdGlvbnMubWFwKChpdCkgPT4gdGhpcy5idWlsZFRyYW5zYWN0aW9uKGl0KSksXG4gICAgICBzaW11bGF0aW9uX2ZsYWdzOiBzaW11bGF0aW9uRmxhZ3NcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VTaW11bGF0ZVRyYW5zYWN0aW9uUmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIHdhaXRGb3JUcmFuc2FjdGlvbih0eEhhc2gsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbkhhc2ggPSB0b0hleCh0eEhhc2gpO1xuICAgIGxldCB7IHJldHJpZXMgfSA9IHRoaXM7XG4gICAgbGV0IG9uY2hhaW4gPSBmYWxzZTtcbiAgICBsZXQgaXNFcnJvclN0YXRlID0gZmFsc2U7XG4gICAgY29uc3QgcmV0cnlJbnRlcnZhbCA9IG9wdGlvbnM/LnJldHJ5SW50ZXJ2YWwgPz8gNWUzO1xuICAgIGNvbnN0IGVycm9yU3RhdGVzID0gb3B0aW9ucz8uZXJyb3JTdGF0ZXMgPz8gW1xuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uU3RhdHVzLlJFSkVDVEVELFxuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzLlJFVkVSVEVEXG4gICAgXTtcbiAgICBjb25zdCBzdWNjZXNzU3RhdGVzID0gb3B0aW9ucz8uc3VjY2Vzc1N0YXRlcyA/PyBbXG4gICAgICBycGNfZXhwb3J0cy5FVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMuU1VDQ0VFREVELFxuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uU3RhdHVzLkFDQ0VQVEVEX09OX0wyLFxuICAgICAgcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uU3RhdHVzLkFDQ0VQVEVEX09OX0wxXG4gICAgXTtcbiAgICBsZXQgdHhTdGF0dXM7XG4gICAgd2hpbGUgKCFvbmNoYWluKSB7XG4gICAgICBhd2FpdCB3YWl0KHJldHJ5SW50ZXJ2YWwpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdHhTdGF0dXMgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uU3RhdHVzKHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvblN0YXR1cyA9IHR4U3RhdHVzLmV4ZWN1dGlvbl9zdGF0dXM7XG4gICAgICAgIGNvbnN0IGZpbmFsaXR5U3RhdHVzID0gdHhTdGF0dXMuZmluYWxpdHlfc3RhdHVzO1xuICAgICAgICBpZiAoIWZpbmFsaXR5U3RhdHVzKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJ3YWl0aW5nIGZvciB0cmFuc2FjdGlvbiBzdGF0dXNcIik7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3NTdGF0ZXMuaW5jbHVkZXMoZXhlY3V0aW9uU3RhdHVzKSB8fCBzdWNjZXNzU3RhdGVzLmluY2x1ZGVzKGZpbmFsaXR5U3RhdHVzKSkge1xuICAgICAgICAgIG9uY2hhaW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGVycm9yU3RhdGVzLmluY2x1ZGVzKGV4ZWN1dGlvblN0YXR1cykgfHwgZXJyb3JTdGF0ZXMuaW5jbHVkZXMoZmluYWxpdHlTdGF0dXMpKSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2V4ZWN1dGlvblN0YXR1c306ICR7ZmluYWxpdHlTdGF0dXN9YDtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICBlcnJvci5yZXNwb25zZSA9IHR4U3RhdHVzO1xuICAgICAgICAgIGlzRXJyb3JTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGlzRXJyb3JTdGF0ZSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXRyaWVzIDw9IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHdhaXRGb3JUcmFuc2FjdGlvbiB0aW1lZC1vdXQgd2l0aCByZXRyaWVzICR7dGhpcy5yZXRyaWVzfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXRyaWVzIC09IDE7XG4gICAgfVxuICAgIGxldCB0eFJlY2VpcHQgPSBudWxsO1xuICAgIHdoaWxlICh0eFJlY2VpcHQgPT09IG51bGwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHR4UmVjZWlwdCA9IGF3YWl0IHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocmV0cmllcyA8PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB3YWl0Rm9yVHJhbnNhY3Rpb24gdGltZWQtb3V0IHdpdGggcmV0cmllcyAke3RoaXMucmV0cmllc31gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0cmllcyAtPSAxO1xuICAgICAgYXdhaXQgd2FpdChyZXRyeUludGVydmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHR4UmVjZWlwdDtcbiAgfVxuICBhc3luYyBnZXRTdG9yYWdlQXQoY29udHJhY3RBZGRyZXNzLCBrZXksIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgcGFyc2VkS2V5ID0gdG9TdG9yYWdlS2V5KGtleSk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRTdG9yYWdlQXRcIiwge1xuICAgICAgY29udHJhY3RfYWRkcmVzcyxcbiAgICAgIGtleTogcGFyc2VkS2V5LFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0hhc2hBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRDbGFzc0hhc2hBdFwiLCB7XG4gICAgICBibG9ja19pZCxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3NcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0J5SGFzaChjbGFzc0hhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDbGFzcyhjbGFzc0hhc2gpO1xuICB9XG4gIGFzeW5jIGdldENsYXNzKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBjbGFzc19oYXNoID0gdG9IZXgoY2xhc3NIYXNoKTtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2dldENsYXNzXCIsIHtcbiAgICAgIGNsYXNzX2hhc2gsXG4gICAgICBibG9ja19pZFxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJhY3RfYWRkcmVzcyA9IHRvSGV4KGNvbnRyYWN0QWRkcmVzcyk7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9nZXRDbGFzc0F0XCIsIHtcbiAgICAgIGJsb2NrX2lkLFxuICAgICAgY29udHJhY3RfYWRkcmVzc1xuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShfY29udHJhY3RBZGRyZXNzLCBfYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUlBDIGRvZXMgbm90IGltcGxlbWVudCBnZXRDb2RlIGZ1bmN0aW9uXCIpO1xuICB9XG4gIGFzeW5jIGdldENvbnRyYWN0VmVyc2lvbihjb250cmFjdEFkZHJlc3MsIGNsYXNzSGFzaCwgeyBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgY29tcGlsZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGxldCBjb250cmFjdENsYXNzO1xuICAgIGlmIChjb250cmFjdEFkZHJlc3MpIHtcbiAgICAgIGNvbnRyYWN0Q2xhc3MgPSBhd2FpdCB0aGlzLmdldENsYXNzQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICAgIH0gZWxzZSBpZiAoY2xhc3NIYXNoKSB7XG4gICAgICBjb250cmFjdENsYXNzID0gYXdhaXQgdGhpcy5nZXRDbGFzcyhjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKFwiZ2V0Q29udHJhY3RWZXJzaW9uIHJlcXVpcmUgY29udHJhY3RBZGRyZXNzIG9yIGNsYXNzSGFzaFwiKTtcbiAgICB9XG4gICAgaWYgKGlzU2llcnJhKGNvbnRyYWN0Q2xhc3MpKSB7XG4gICAgICBpZiAoY29tcGlsZXIpIHtcbiAgICAgICAgY29uc3QgYWJpVGVzdCA9IGdldEFiaUNvbnRyYWN0VmVyc2lvbihjb250cmFjdENsYXNzLmFiaSk7XG4gICAgICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IGFiaVRlc3QuY29tcGlsZXIgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGNhaXJvOiBcIjFcIiwgY29tcGlsZXI6IHZvaWQgMCB9O1xuICAgIH1cbiAgICByZXR1cm4geyBjYWlybzogXCIwXCIsIGNvbXBpbGVyOiBcIjBcIiB9O1xuICB9XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgZ2V0KnR5cGUqRXN0aW1hdGVGZWUgKHdpbGwgYmUgcmVmYWN0b3JlZCBiYXNlZCBvbiB0eXBlIGFmdGVyIHNlcXVlbmNlciBkZXByZWNhdGlvbilcbiAgICovXG4gIGFzeW5jIGdldEVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIC4uLmludm9jYXRpb25EZXRhaWxzXG4gICAgICB9LFxuICAgICAgXCJmZWVcIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlRmVlXCIsIHtcbiAgICAgIHJlcXVlc3Q6IFt0cmFuc2FjdGlvbl0sXG4gICAgICBibG9ja19pZFxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUZlZUVzdGltYXRlUmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGdldERlY2xhcmVFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGJsb2NrX2lkID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuaWRlbnRpZmllcjtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9lc3RpbWF0ZUZlZVwiLCB7XG4gICAgICByZXF1ZXN0OiBbdHJhbnNhY3Rpb25dLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoaW52b2NhdGlvbiwgZGV0YWlscywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiREVQTE9ZX0FDQ09VTlRcIiAvKiBERVBMT1lfQUNDT1VOVCAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9lc3RpbWF0ZUZlZVwiLCB7XG4gICAgICByZXF1ZXN0OiBbdHJhbnNhY3Rpb25dLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlIH0pIHtcbiAgICBpZiAoc2tpcFZhbGlkYXRlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJnZXRFc3RpbWF0ZUZlZUJ1bGsgUlBDIGRvZXMgbm90IHN1cHBvcnQgc2tpcFZhbGlkYXRlXCIpO1xuICAgIH1cbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlRmVlXCIsIHtcbiAgICAgIHJlcXVlc3Q6IGludm9jYXRpb25zLm1hcCgoaXQpID0+IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihpdCwgXCJmZWVcIikpLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgaW52b2tlRnVuY3Rpb24oZnVuY3Rpb25JbnZvY2F0aW9uLCBkZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2FkZEludm9rZVRyYW5zYWN0aW9uXCIsIHtcbiAgICAgIGludm9rZV90cmFuc2FjdGlvbjoge1xuICAgICAgICBzZW5kZXJfYWRkcmVzczogZnVuY3Rpb25JbnZvY2F0aW9uLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGZ1bmN0aW9uSW52b2NhdGlvbi5jYWxsZGF0YSksXG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuSU5WT0tFLFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogXCIweDFcIixcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVUb0hleEFycmF5KGZ1bmN0aW9uSW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyBkZWNsYXJlQ29udHJhY3QoeyBjb250cmFjdCwgc2lnbmF0dXJlLCBzZW5kZXJBZGRyZXNzLCBjb21waWxlZENsYXNzSGFzaCB9LCBkZXRhaWxzKSB7XG4gICAgaWYgKCFpc1NpZXJyYShjb250cmFjdCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9hZGREZWNsYXJlVHJhbnNhY3Rpb25cIiwge1xuICAgICAgICBkZWNsYXJlX3RyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgdHlwZTogcnBjX2V4cG9ydHMuRVRyYW5zYWN0aW9uVHlwZS5ERUNMQVJFLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzOiB7XG4gICAgICAgICAgICBwcm9ncmFtOiBjb250cmFjdC5wcm9ncmFtLFxuICAgICAgICAgICAgZW50cnlfcG9pbnRzX2J5X3R5cGU6IGNvbnRyYWN0LmVudHJ5X3BvaW50c19ieV90eXBlLFxuICAgICAgICAgICAgYWJpOiBjb250cmFjdC5hYmlcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZlcnNpb246IEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8xLFxuICAgICAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9IZXhBcnJheShzaWduYXR1cmUpLFxuICAgICAgICAgIHNlbmRlcl9hZGRyZXNzOiBzZW5kZXJBZGRyZXNzLFxuICAgICAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2FkZERlY2xhcmVUcmFuc2FjdGlvblwiLCB7XG4gICAgICBkZWNsYXJlX3RyYW5zYWN0aW9uOiB7XG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuREVDTEFSRSxcbiAgICAgICAgY29udHJhY3RfY2xhc3M6IHtcbiAgICAgICAgICBzaWVycmFfcHJvZ3JhbTogZGVjb21wcmVzc1Byb2dyYW0oY29udHJhY3Quc2llcnJhX3Byb2dyYW0pLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzX3ZlcnNpb246IGNvbnRyYWN0LmNvbnRyYWN0X2NsYXNzX3ZlcnNpb24sXG4gICAgICAgICAgZW50cnlfcG9pbnRzX2J5X3R5cGU6IGNvbnRyYWN0LmVudHJ5X3BvaW50c19ieV90eXBlLFxuICAgICAgICAgIGFiaTogY29udHJhY3QuYWJpXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBpbGVkX2NsYXNzX2hhc2g6IGNvbXBpbGVkQ2xhc3NIYXNoIHx8IFwiXCIsXG4gICAgICAgIHZlcnNpb246IEhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8yLFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVUb0hleEFycmF5KHNpZ25hdHVyZSksXG4gICAgICAgIHNlbmRlcl9hZGRyZXNzOiBzZW5kZXJBZGRyZXNzLFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyBkZXBsb3lBY2NvdW50Q29udHJhY3QoeyBjbGFzc0hhc2gsIGNvbnN0cnVjdG9yQ2FsbGRhdGEsIGFkZHJlc3NTYWx0LCBzaWduYXR1cmUgfSwgZGV0YWlscykge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJzdGFya25ldF9hZGREZXBsb3lBY2NvdW50VHJhbnNhY3Rpb25cIiwge1xuICAgICAgZGVwbG95X2FjY291bnRfdHJhbnNhY3Rpb246IHtcbiAgICAgICAgY29uc3RydWN0b3JfY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGNvbnN0cnVjdG9yQ2FsbGRhdGEgfHwgW10pLFxuICAgICAgICBjbGFzc19oYXNoOiB0b0hleChjbGFzc0hhc2gpLFxuICAgICAgICBjb250cmFjdF9hZGRyZXNzX3NhbHQ6IHRvSGV4KGFkZHJlc3NTYWx0IHx8IDApLFxuICAgICAgICB0eXBlOiBycGNfZXhwb3J0cy5FVHJhbnNhY3Rpb25UeXBlLkRFUExPWV9BQ0NPVU5ULFxuICAgICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogdG9IZXgoZGV0YWlscy52ZXJzaW9uIHx8IDApLFxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVRvSGV4QXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgICAgbm9uY2U6IHRvSGV4KGRldGFpbHMubm9uY2UpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgY2FsbENvbnRyYWN0KGNhbGwsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgYmxvY2tfaWQgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5pZGVudGlmaWVyO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2NhbGxcIiwge1xuICAgICAgcmVxdWVzdDoge1xuICAgICAgICBjb250cmFjdF9hZGRyZXNzOiBjYWxsLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yRnJvbU5hbWUoY2FsbC5lbnRyeXBvaW50KSxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLnRvSGV4KGNhbGwuY2FsbGRhdGEpXG4gICAgICB9LFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNhbGxDb250cmFjdFJlc3BvbnNlKHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIE5FVzogRXN0aW1hdGUgdGhlIGZlZSBmb3IgYSBtZXNzYWdlIGZyb20gTDFcbiAgICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSBGcm9tIEwxXG4gICAqL1xuICBhc3luYyBlc3RpbWF0ZU1lc3NhZ2VGZWUobWVzc2FnZSwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCB7IGZyb21fYWRkcmVzcywgdG9fYWRkcmVzcywgZW50cnlfcG9pbnRfc2VsZWN0b3IsIHBheWxvYWQgfSA9IG1lc3NhZ2U7XG4gICAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHtcbiAgICAgIGZyb21fYWRkcmVzczogdG9IZXgoZnJvbV9hZGRyZXNzKSxcbiAgICAgIHRvX2FkZHJlc3M6IHRvSGV4KHRvX2FkZHJlc3MpLFxuICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yKGVudHJ5X3BvaW50X3NlbGVjdG9yKSxcbiAgICAgIHBheWxvYWQ6IGdldEhleFN0cmluZ0FycmF5KHBheWxvYWQpXG4gICAgfTtcbiAgICBjb25zdCBibG9ja19pZCA9IG5ldyBCbG9jayhibG9ja0lkZW50aWZpZXIpLmlkZW50aWZpZXI7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcInN0YXJrbmV0X2VzdGltYXRlTWVzc2FnZUZlZVwiLCB7XG4gICAgICBtZXNzYWdlOiBmb3JtYXR0ZWRNZXNzYWdlLFxuICAgICAgYmxvY2tfaWRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgYWJvdXQgdGhlIHN5bmMgc3RhdHVzLCBvciBmYWxzZSBpZiB0aGUgbm9kZSBpcyBub3Qgc3luY2hpbmdcbiAgICogQHJldHVybnMgT2JqZWN0IHdpdGggdGhlIHN0YXRzIGRhdGFcbiAgICovXG4gIGFzeW5jIGdldFN5bmNpbmdTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfc3luY2luZ1wiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgZXZlbnRzIG1hdGNoaW5nIHRoZSBnaXZlbiBmaWx0ZXJcbiAgICogQHJldHVybnMgZXZlbnRzIGFuZCB0aGUgcGFnaW5hdGlvbiBvZiB0aGUgZXZlbnRzXG4gICAqL1xuICBhc3luYyBnZXRFdmVudHMoZXZlbnRGaWx0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwic3RhcmtuZXRfZ2V0RXZlbnRzXCIsIHsgZmlsdGVyOiBldmVudEZpbHRlciB9KTtcbiAgfVxuICAvKipcbiAgICogU3RhcmtuZXRJZCBFbmRwb2ludCAoZ2V0IG5hbWUgZnJvbSBhZGRyZXNzKVxuICAgKi9cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0U3RhcmtOYW1lKHRoaXMsIGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIC8qKlxuICAgKiBTdGFya25ldElkIEVuZHBvaW50IChnZXQgYWRkcmVzcyBmcm9tIG5hbWUpXG4gICAqL1xuICBhc3luYyBnZXRBZGRyZXNzRnJvbVN0YXJrTmFtZShuYW1lLCBTdGFya25ldElkQ29udHJhY3QyKSB7XG4gICAgcmV0dXJuIGdldEFkZHJlc3NGcm9tU3RhcmtOYW1lKHRoaXMsIG5hbWUsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIGJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbiwgdmVyc2lvblR5cGUpIHtcbiAgICBjb25zdCBkZWZhdWx0VmVyc2lvbnMgPSBnZXRWZXJzaW9uc0J5VHlwZSh2ZXJzaW9uVHlwZSk7XG4gICAgY29uc3QgZGV0YWlscyA9IHtcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9IZXhBcnJheShpbnZvY2F0aW9uLnNpZ25hdHVyZSksXG4gICAgICBub25jZTogdG9IZXgoaW52b2NhdGlvbi5ub25jZSksXG4gICAgICBtYXhfZmVlOiB0b0hleChpbnZvY2F0aW9uLm1heEZlZSB8fCAwKVxuICAgIH07XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJwY19leHBvcnRzLkVUcmFuc2FjdGlvblR5cGUuSU5WT0tFLFxuICAgICAgICAvLyBEaWZmIGJldHdlZW4gc2VxdWVuY2VyIGFuZCBycGMgaW52b2tlIHR5cGVcbiAgICAgICAgc2VuZGVyX2FkZHJlc3M6IGludm9jYXRpb24uY29udHJhY3RBZGRyZXNzLFxuICAgICAgICBjYWxsZGF0YTogQ2FsbERhdGEudG9IZXgoaW52b2NhdGlvbi5jYWxsZGF0YSksXG4gICAgICAgIHZlcnNpb246IHRvSGV4KGludm9jYXRpb24udmVyc2lvbiB8fCBkZWZhdWx0VmVyc2lvbnMudjEpLFxuICAgICAgICAuLi5kZXRhaWxzXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW52b2NhdGlvbi50eXBlID09PSBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovKSB7XG4gICAgICBpZiAoIWlzU2llcnJhKGludm9jYXRpb24uY29udHJhY3QpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogaW52b2NhdGlvbi50eXBlLFxuICAgICAgICAgIGNvbnRyYWN0X2NsYXNzOiBpbnZvY2F0aW9uLmNvbnRyYWN0LFxuICAgICAgICAgIHNlbmRlcl9hZGRyZXNzOiBpbnZvY2F0aW9uLnNlbmRlckFkZHJlc3MsXG4gICAgICAgICAgdmVyc2lvbjogdG9IZXgoaW52b2NhdGlvbi52ZXJzaW9uIHx8IGRlZmF1bHRWZXJzaW9ucy52MSksXG4gICAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gY29tcGlsZWRfY2xhc3NfaGFzaFxuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnRyYWN0X2NsYXNzOiB7XG4gICAgICAgICAgLi4uaW52b2NhdGlvbi5jb250cmFjdCxcbiAgICAgICAgICBzaWVycmFfcHJvZ3JhbTogZGVjb21wcmVzc1Byb2dyYW0oaW52b2NhdGlvbi5jb250cmFjdC5zaWVycmFfcHJvZ3JhbSlcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGlsZWRfY2xhc3NfaGFzaDogaW52b2NhdGlvbi5jb21waWxlZENsYXNzSGFzaCB8fCBcIlwiLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYyKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnN0cnVjdG9yX2NhbGxkYXRhOiBDYWxsRGF0YS50b0hleChpbnZvY2F0aW9uLmNvbnN0cnVjdG9yQ2FsbGRhdGEgfHwgW10pLFxuICAgICAgICBjbGFzc19oYXNoOiB0b0hleChpbnZvY2F0aW9uLmNsYXNzSGFzaCksXG4gICAgICAgIGNvbnRyYWN0X2FkZHJlc3Nfc2FsdDogdG9IZXgoaW52b2NhdGlvbi5hZGRyZXNzU2FsdCB8fCAwKSxcbiAgICAgICAgdmVyc2lvbjogdG9IZXgoaW52b2NhdGlvbi52ZXJzaW9uIHx8IGRlZmF1bHRWZXJzaW9ucy52MSksXG4gICAgICAgIC4uLmRldGFpbHNcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IEVycm9yKFwiUlBDIGJ1aWxkVHJhbnNhY3Rpb24gcmVjZWl2ZWQgdW5rbm93biBUcmFuc2FjdGlvblR5cGVcIik7XG4gIH1cbn07XG5cbi8vIHNyYy9wcm92aWRlci9zZXF1ZW5jZXIudHNcbmltcG9ydCB1cmxqb2luMiBmcm9tIFwidXJsLWpvaW5cIjtcblxuLy8gc3JjL3V0aWxzL3Jlc3BvbnNlUGFyc2VyL2luZGV4LnRzXG52YXIgUmVzcG9uc2VQYXJzZXIgPSBjbGFzcyB7XG59O1xuXG4vLyBzcmMvdXRpbHMvcmVzcG9uc2VQYXJzZXIvc2VxdWVuY2VyLnRzXG52YXIgU2VxdWVuY2VyQVBJUmVzcG9uc2VQYXJzZXIgPSBjbGFzcyBleHRlbmRzIFJlc3BvbnNlUGFyc2VyIHtcbiAgcGFyc2VHZXRCbG9ja1Jlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXMsXG4gICAgICBuZXdfcm9vdDogcmVzLnN0YXRlX3Jvb3QsXG4gICAgICBwYXJlbnRfaGFzaDogcmVzLnBhcmVudF9ibG9ja19oYXNoLFxuICAgICAgdHJhbnNhY3Rpb25zOiBPYmplY3QudmFsdWVzKHJlcy50cmFuc2FjdGlvbnMpLm1hcCgodmFsdWUpID0+IFwidHJhbnNhY3Rpb25faGFzaFwiIGluIHZhbHVlICYmIHZhbHVlLnRyYW5zYWN0aW9uX2hhc2gpLmZpbHRlcihCb29sZWFuKVxuICAgIH07XG4gIH1cbiAgcGFyc2VHZXRUcmFuc2FjdGlvblJlc3BvbnNlKHJlcykge1xuICAgIGlmIChyZXMuc3RhdHVzID09PSBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLyAmJiByZXMuZmluYWxpdHlfc3RhdHVzID09PSBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLykge1xuICAgICAgdGhyb3cgbmV3IExpYnJhcnlFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzLFxuICAgICAgY2FsbGRhdGE6IFwiY2FsbGRhdGFcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uY2FsbGRhdGEgOiBbXSxcbiAgICAgIGNvbnRyYWN0X2NsYXNzOiBcImNvbnRyYWN0X2NsYXNzXCIgaW4gcmVzLnRyYW5zYWN0aW9uID8gcmVzLnRyYW5zYWN0aW9uLmNvbnRyYWN0X2NsYXNzIDogdm9pZCAwLFxuICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IFwiZW50cnlfcG9pbnRfc2VsZWN0b3JcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uZW50cnlfcG9pbnRfc2VsZWN0b3IgOiB2b2lkIDAsXG4gICAgICBtYXhfZmVlOiBcIm1heF9mZWVcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24ubWF4X2ZlZSA6IHZvaWQgMCxcbiAgICAgIG5vbmNlOiByZXMudHJhbnNhY3Rpb24ubm9uY2UsXG4gICAgICBzZW5kZXJfYWRkcmVzczogXCJzZW5kZXJfYWRkcmVzc1wiIGluIHJlcy50cmFuc2FjdGlvbiA/IHJlcy50cmFuc2FjdGlvbi5zZW5kZXJfYWRkcmVzcyA6IHZvaWQgMCxcbiAgICAgIHNpZ25hdHVyZTogXCJzaWduYXR1cmVcIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24uc2lnbmF0dXJlIDogdm9pZCAwLFxuICAgICAgdHJhbnNhY3Rpb25faGFzaDogXCJ0cmFuc2FjdGlvbl9oYXNoXCIgaW4gcmVzLnRyYW5zYWN0aW9uID8gcmVzLnRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uX2hhc2ggOiB2b2lkIDAsXG4gICAgICB2ZXJzaW9uOiBcInZlcnNpb25cIiBpbiByZXMudHJhbnNhY3Rpb24gPyByZXMudHJhbnNhY3Rpb24udmVyc2lvbiA6IHZvaWQgMFxuICAgIH07XG4gIH1cbiAgcGFyc2VHZXRUcmFuc2FjdGlvblJlY2VpcHRSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzLFxuICAgICAgbWVzc2FnZXNfc2VudDogcmVzLmwyX3RvX2wxX21lc3NhZ2VzLFxuICAgICAgLi4uXCJyZXZlcnRfZXJyb3JcIiBpbiByZXMgJiYgeyByZXZlcnRfcmVhc29uOiByZXMucmV2ZXJ0X2Vycm9yIH1cbiAgICB9O1xuICB9XG4gIHBhcnNlRmVlRXN0aW1hdGVSZXNwb25zZShyZXMpIHtcbiAgICBpZiAoXCJvdmVyYWxsX2ZlZVwiIGluIHJlcykge1xuICAgICAgbGV0IGdhc0luZm8gPSB7fTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGdhc0luZm8gPSB7XG4gICAgICAgICAgZ2FzX2NvbnN1bWVkOiB0b0JpZ0ludChyZXMuZ2FzX3VzYWdlKSxcbiAgICAgICAgICBnYXNfcHJpY2U6IHRvQmlnSW50KHJlcy5nYXNfcHJpY2UpXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJhbGxfZmVlOiB0b0JpZ0ludChyZXMub3ZlcmFsbF9mZWUpLFxuICAgICAgICAuLi5nYXNJbmZvXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KHJlcy5hbW91bnQpXG4gICAgfTtcbiAgfVxuICBwYXJzZUZlZUVzdGltYXRlQnVsa1Jlc3BvbnNlKHJlcykge1xuICAgIHJldHVybiBbXS5jb25jYXQocmVzKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGlmIChcIm92ZXJhbGxfZmVlXCIgaW4gaXRlbSkge1xuICAgICAgICBsZXQgZ2FzSW5mbyA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGdhc0luZm8gPSB7XG4gICAgICAgICAgICBnYXNfY29uc3VtZWQ6IHRvQmlnSW50KGl0ZW0uZ2FzX3VzYWdlKSxcbiAgICAgICAgICAgIGdhc19wcmljZTogdG9CaWdJbnQoaXRlbS5nYXNfcHJpY2UpXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvdmVyYWxsX2ZlZTogdG9CaWdJbnQoaXRlbS5vdmVyYWxsX2ZlZSksXG4gICAgICAgICAgLi4uZ2FzSW5mb1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmFsbF9mZWU6IHRvQmlnSW50KGl0ZW0uYW1vdW50KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBwYXJzZVNpbXVsYXRlVHJhbnNhY3Rpb25SZXNwb25zZShyZXMpIHtcbiAgICBjb25zdCBzdWdnZXN0ZWRNYXhGZWUgPSBcIm92ZXJhbGxfZmVlXCIgaW4gcmVzLmZlZV9lc3RpbWF0aW9uID8gcmVzLmZlZV9lc3RpbWF0aW9uLm92ZXJhbGxfZmVlIDogcmVzLmZlZV9lc3RpbWF0aW9uLmFtb3VudDtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0cmFuc2FjdGlvbl90cmFjZTogcmVzLnRyYWNlLFxuICAgICAgICBmZWVfZXN0aW1hdGlvbjogcmVzLmZlZV9lc3RpbWF0aW9uLFxuICAgICAgICBzdWdnZXN0ZWRNYXhGZWU6IGVzdGltYXRlZEZlZVRvTWF4RmVlKEJpZ0ludChzdWdnZXN0ZWRNYXhGZWUpKVxuICAgICAgfVxuICAgIF07XG4gIH1cbiAgcGFyc2VDYWxsQ29udHJhY3RSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiByZXMucmVzdWx0XG4gICAgfTtcbiAgfVxuICBwYXJzZUludm9rZUZ1bmN0aW9uUmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoXG4gICAgfTtcbiAgfVxuICBwYXJzZURlcGxveUNvbnRyYWN0UmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoLFxuICAgICAgY29udHJhY3RfYWRkcmVzczogcmVzLmFkZHJlc3NcbiAgICB9O1xuICB9XG4gIHBhcnNlRGVjbGFyZUNvbnRyYWN0UmVzcG9uc2UocmVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zYWN0aW9uX2hhc2g6IHJlcy50cmFuc2FjdGlvbl9oYXNoLFxuICAgICAgY2xhc3NfaGFzaDogcmVzLmNsYXNzX2hhc2hcbiAgICB9O1xuICB9XG4gIHBhcnNlR2V0U3RhdGVVcGRhdGVSZXNwb25zZShyZXMpIHtcbiAgICBjb25zdCBub25jZXMgPSBPYmplY3QuZW50cmllcyhyZXMuc3RhdGVfZGlmZi5ub25jZXMpLm1hcCgoW2NvbnRyYWN0X2FkZHJlc3MsIG5vbmNlXSkgPT4gKHtcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3MsXG4gICAgICBub25jZVxuICAgIH0pKTtcbiAgICBjb25zdCBzdG9yYWdlX2RpZmZzID0gT2JqZWN0LmVudHJpZXMocmVzLnN0YXRlX2RpZmYuc3RvcmFnZV9kaWZmcykubWFwKFxuICAgICAgKFthZGRyZXNzLCBzdG9yYWdlX2VudHJpZXNdKSA9PiAoeyBhZGRyZXNzLCBzdG9yYWdlX2VudHJpZXMgfSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXMsXG4gICAgICBzdGF0ZV9kaWZmOiB7XG4gICAgICAgIC4uLnJlcy5zdGF0ZV9kaWZmLFxuICAgICAgICBzdG9yYWdlX2RpZmZzLFxuICAgICAgICBub25jZXNcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHBhcnNlQ29udHJhY3RDbGFzc1Jlc3BvbnNlKHJlcykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gaXNTaWVycmEocmVzKSA/IHJlcyA6IHBhcnNlQ29udHJhY3QocmVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICBhYmk6IHR5cGVvZiByZXNwb25zZS5hYmkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKHJlc3BvbnNlLmFiaSkgOiByZXNwb25zZS5hYmlcbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvdXJsLnRzXG5pbXBvcnQgdXJsam9pbiBmcm9tIFwidXJsLWpvaW5cIjtcbnZhciBwcm90b2NvbEFuZERvbWFpblJFID0gL14oPzpcXHcrOik/XFwvXFwvKFxcUyspJC87XG52YXIgbG9jYWxob3N0RG9tYWluUkUgPSAvXmxvY2FsaG9zdFs6P1xcZF0qKD86W146P1xcZF1cXFMqKT8kLztcbnZhciBub25Mb2NhbGhvc3REb21haW5SRSA9IC9eW15cXHMuXStcXC5cXFN7Mix9JC87XG5mdW5jdGlvbiBpc1VybChzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWF0Y2ggPSBzLm1hdGNoKHByb3RvY29sQW5kRG9tYWluUkUpO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGV2ZXJ5dGhpbmdBZnRlclByb3RvY29sID0gbWF0Y2hbMV07XG4gIGlmICghZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxvY2FsaG9zdERvbWFpblJFLnRlc3QoZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpIHx8IG5vbkxvY2FsaG9zdERvbWFpblJFLnRlc3QoZXZlcnl0aGluZ0FmdGVyUHJvdG9jb2wpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gYnVpbGRVcmwoYmFzZVVybCwgZGVmYXVsdFBhdGgsIHVybE9yUGF0aCkge1xuICByZXR1cm4gaXNVcmwodXJsT3JQYXRoKSA/IHVybE9yUGF0aCA6IHVybGpvaW4oYmFzZVVybCwgdXJsT3JQYXRoID8/IGRlZmF1bHRQYXRoKTtcbn1cblxuLy8gc3JjL3Byb3ZpZGVyL3NlcXVlbmNlci50c1xuZnVuY3Rpb24gaXNFbXB0eVF1ZXJ5T2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqID09PSB2b2lkIDAgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDEgJiYgT2JqZWN0LmVudHJpZXMob2JqKS5ldmVyeSgoW2ssIHZdKSA9PiBrID09PSBcImJsb2NrSWRlbnRpZmllclwiICYmIHYgPT09IG51bGwpO1xufVxudmFyIGRlZmF1bHRPcHRpb25zMiA9IHtcbiAgbmV0d29yazogXCJTTl9HT0VSTElcIiAvKiBTTl9HT0VSTEkgKi8sXG4gIGJsb2NrSWRlbnRpZmllcjogXCJwZW5kaW5nXCIgLyogcGVuZGluZyAqL1xufTtcbnZhciBTZXF1ZW5jZXJQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uc09yUHJvdmlkZXIgPSBkZWZhdWx0T3B0aW9uczIpIHtcbiAgICB0aGlzLnJlc3BvbnNlUGFyc2VyID0gbmV3IFNlcXVlbmNlckFQSVJlc3BvbnNlUGFyc2VyKCk7XG4gICAgaWYgKFwibmV0d29ya1wiIGluIG9wdGlvbnNPclByb3ZpZGVyKSB7XG4gICAgICB0aGlzLmJhc2VVcmwgPSBTZXF1ZW5jZXJQcm92aWRlci5nZXROZXR3b3JrRnJvbU5hbWUob3B0aW9uc09yUHJvdmlkZXIubmV0d29yayk7XG4gICAgICB0aGlzLmZlZWRlckdhdGV3YXlVcmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiZmVlZGVyX2dhdGV3YXlcIik7XG4gICAgICB0aGlzLmdhdGV3YXlVcmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiZ2F0ZXdheVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iYXNlVXJsID0gb3B0aW9uc09yUHJvdmlkZXIuYmFzZVVybDtcbiAgICAgIHRoaXMuZmVlZGVyR2F0ZXdheVVybCA9IGJ1aWxkVXJsKFxuICAgICAgICB0aGlzLmJhc2VVcmwsXG4gICAgICAgIFwiZmVlZGVyX2dhdGV3YXlcIixcbiAgICAgICAgb3B0aW9uc09yUHJvdmlkZXIuZmVlZGVyR2F0ZXdheVVybFxuICAgICAgKTtcbiAgICAgIHRoaXMuZ2F0ZXdheVVybCA9IGJ1aWxkVXJsKHRoaXMuYmFzZVVybCwgXCJnYXRld2F5XCIsIG9wdGlvbnNPclByb3ZpZGVyLmdhdGV3YXlVcmwpO1xuICAgIH1cbiAgICB0aGlzLmNoYWluSWQgPSBvcHRpb25zT3JQcm92aWRlcj8uY2hhaW5JZCA/PyBTZXF1ZW5jZXJQcm92aWRlci5nZXRDaGFpbklkRnJvbUJhc2VVcmwodGhpcy5iYXNlVXJsKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zT3JQcm92aWRlci5oZWFkZXJzO1xuICAgIHRoaXMuYmxvY2tJZGVudGlmaWVyID0gb3B0aW9uc09yUHJvdmlkZXI/LmJsb2NrSWRlbnRpZmllciB8fCBkZWZhdWx0T3B0aW9uczIuYmxvY2tJZGVudGlmaWVyO1xuICB9XG4gIHN0YXRpYyBnZXROZXR3b3JrRnJvbU5hbWUobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSBcIlNOX01BSU5cIiAvKiBTTl9NQUlOICovOlxuICAgICAgY2FzZSBcIjB4NTM0ZTVmNGQ0MTQ5NGVcIiAvKiBTTl9NQUlOICovOlxuICAgICAgICByZXR1cm4gXCJodHRwczovL2FscGhhLW1haW5uZXQuc3RhcmtuZXQuaW9cIiAvKiBTTl9NQUlOICovO1xuICAgICAgY2FzZSBcIlNOX0dPRVJMSVwiIC8qIFNOX0dPRVJMSSAqLzpcbiAgICAgIGNhc2UgXCIweDUzNGU1ZjQ3NGY0NTUyNGM0OVwiIC8qIFNOX0dPRVJMSSAqLzpcbiAgICAgICAgcmV0dXJuIFwiaHR0cHM6Ly9hbHBoYTQuc3RhcmtuZXQuaW9cIiAvKiBTTl9HT0VSTEkgKi87XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZGV0ZWN0IGJhc2UgdXJsIGZyb20gTmV0d29ya05hbWVcIik7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBnZXRDaGFpbklkRnJvbUJhc2VVcmwoYmFzZVVybCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGJhc2VVcmwpO1xuICAgICAgaWYgKHVybC5ob3N0LmluY2x1ZGVzKFwibWFpbm5ldC5zdGFya25ldC5pb1wiKSkge1xuICAgICAgICByZXR1cm4gXCIweDUzNGU1ZjRkNDE0OTRlXCIgLyogU05fTUFJTiAqLztcbiAgICAgIH1cbiAgICAgIHJldHVybiBcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCIgLyogU05fR09FUkxJICovO1xuICAgIH0gY2F0Y2gge1xuICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIGJhc2VVcmw6ICR7YmFzZVVybH1gKTtcbiAgICAgIHJldHVybiBcIjB4NTM0ZTVmNDc0ZjQ1NTI0YzQ5XCIgLyogU05fR09FUkxJICovO1xuICAgIH1cbiAgfVxuICBnZXRGZXRjaFVybChlbmRwb2ludCkge1xuICAgIGNvbnN0IGdhdGV3YXlVcmxFbmRwb2ludHMgPSBbXCJhZGRfdHJhbnNhY3Rpb25cIl07XG4gICAgcmV0dXJuIGdhdGV3YXlVcmxFbmRwb2ludHMuaW5jbHVkZXMoZW5kcG9pbnQpID8gdGhpcy5nYXRld2F5VXJsIDogdGhpcy5mZWVkZXJHYXRld2F5VXJsO1xuICB9XG4gIGdldEZldGNoTWV0aG9kKGVuZHBvaW50KSB7XG4gICAgY29uc3QgcG9zdE1ldGhvZEVuZHBvaW50cyA9IFtcbiAgICAgIFwiYWRkX3RyYW5zYWN0aW9uXCIsXG4gICAgICBcImNhbGxfY29udHJhY3RcIixcbiAgICAgIFwiZXN0aW1hdGVfZmVlXCIsXG4gICAgICBcImVzdGltYXRlX21lc3NhZ2VfZmVlXCIsXG4gICAgICBcImVzdGltYXRlX2ZlZV9idWxrXCIsXG4gICAgICBcInNpbXVsYXRlX3RyYW5zYWN0aW9uXCJcbiAgICBdO1xuICAgIHJldHVybiBwb3N0TWV0aG9kRW5kcG9pbnRzLmluY2x1ZGVzKGVuZHBvaW50KSA/IFwiUE9TVFwiIDogXCJHRVRcIjtcbiAgfVxuICBnZXRRdWVyeVN0cmluZyhxdWVyeSkge1xuICAgIGlmIChpc0VtcHR5UXVlcnlPYmplY3QocXVlcnkpKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBPYmplY3QuZW50cmllcyhxdWVyeSkubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmIChrZXkgPT09IFwiYmxvY2tJZGVudGlmaWVyXCIpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBuZXcgQmxvY2sodmFsdWUpO1xuICAgICAgICByZXR1cm4gYCR7YmxvY2sucXVlcnlJZGVudGlmaWVyfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgfSkuam9pbihcIiZcIik7XG4gICAgcmV0dXJuIGA/JHtxdWVyeVN0cmluZ31gO1xuICB9XG4gIGdldEhlYWRlcnMobWV0aG9kKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAuLi50aGlzLmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhlYWRlcnM7XG4gIH1cbiAgLy8gdHlwZXNhZmUgZmV0Y2hcbiAgYXN5bmMgZmV0Y2hFbmRwb2ludChlbmRwb2ludCwgLi4uW3F1ZXJ5LCByZXF1ZXN0XSkge1xuICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLmdldEZldGNoVXJsKGVuZHBvaW50KTtcbiAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldEZldGNoTWV0aG9kKGVuZHBvaW50KTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHRoaXMuZ2V0UXVlcnlTdHJpbmcocXVlcnkpO1xuICAgIGNvbnN0IHVybCA9IHVybGpvaW4yKGJhc2VVcmwsIGVuZHBvaW50LCBxdWVyeVN0cmluZyk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2QsXG4gICAgICBib2R5OiByZXF1ZXN0XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZmV0Y2goZW5kcG9pbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB1cmwgPSBidWlsZFVybCh0aGlzLmJhc2VVcmwsIFwiXCIsIGVuZHBvaW50KTtcbiAgICBjb25zdCBtZXRob2QgPSBvcHRpb25zPy5tZXRob2QgPz8gXCJHRVRcIjtcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKG1ldGhvZCk7XG4gICAgY29uc3QgYm9keSA9IHN0cmluZ2lmeTIob3B0aW9ucz8uYm9keSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hQb255ZmlsbF9kZWZhdWx0KHVybCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGhlYWRlcnNcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdGV4dFJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBsZXQgcmVzcG9uc2VCb2R5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3BvbnNlQm9keSA9IHBhcnNlMih0ZXh0UmVzcG9uc2UpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEdhdGV3YXlFcnJvcihyZXNwb25zZUJvZHkubWVzc2FnZSwgcmVzcG9uc2VCb2R5LmNvZGUpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyc2VDaG9pY2UgPSBvcHRpb25zPy5wYXJzZUFsd2F5c0FzQmlnSW50ID8gcGFyc2VBbHdheXNBc0JpZyA6IHBhcnNlMjtcbiAgICAgIHJldHVybiBwYXJzZUNob2ljZSh0ZXh0UmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgTGlicmFyeUVycm9yKSlcbiAgICAgICAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCAke21ldGhvZH0gZnJvbSBlbmRwb2ludCBcXGAke3VybH1cXGA6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXRDaGFpbklkKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jaGFpbklkKTtcbiAgfVxuICBhc3luYyBjYWxsQ29udHJhY3QoeyBjb250cmFjdEFkZHJlc3MsIGVudHJ5cG9pbnQ6IGVudHJ5UG9pbnRTZWxlY3RvciwgY2FsbGRhdGEgPSBbXSB9LCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXG4gICAgICBcImNhbGxfY29udHJhY3RcIixcbiAgICAgIHsgYmxvY2tJZGVudGlmaWVyIH0sXG4gICAgICB7XG4gICAgICAgIC8vIFRPRE8gLSBkZXRlcm1pbmUgYmVzdCBjaG9pY2Ugb25jZSBib3RoIGFyZSBmdWxseSBzdXBwb3J0ZWQgaW4gZGV2bmV0XG4gICAgICAgIC8vIHNpZ25hdHVyZTogW10sXG4gICAgICAgIC8vIHNlbmRlcl9hZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgZW50cnlfcG9pbnRfc2VsZWN0b3I6IGdldFNlbGVjdG9yRnJvbU5hbWUoZW50cnlQb2ludFNlbGVjdG9yKSxcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoY2FsbGRhdGEpXG4gICAgICB9XG4gICAgKS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VDYWxsQ29udHJhY3RSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Jsb2NrXCIsIHsgYmxvY2tJZGVudGlmaWVyIH0pLnRoZW4oXG4gICAgICB0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlR2V0QmxvY2tSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Tm9uY2VGb3JBZGRyZXNzKGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X25vbmNlXCIsIHsgY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RvcmFnZUF0KGNvbnRyYWN0QWRkcmVzcywga2V5LCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IHBhcnNlZEtleSA9IHRvQmlnSW50KGtleSkudG9TdHJpbmcoMTApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfc3RvcmFnZV9hdFwiLCB7XG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgICBrZXk6IHBhcnNlZEtleVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uKHR4SGFzaCkge1xuICAgIGNvbnN0IHR4SGFzaEhleCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF90cmFuc2FjdGlvblwiLCB7IHRyYW5zYWN0aW9uSGFzaDogdHhIYXNoSGV4IH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMocmVzdWx0KS5sZW5ndGggPT09IDEpXG4gICAgICAgIHRocm93IG5ldyBMaWJyYXJ5RXJyb3IocmVzdWx0LnN0YXR1cyk7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFRyYW5zYWN0aW9uUmVzcG9uc2UocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKSB7XG4gICAgY29uc3QgdHhIYXNoSGV4ID0gdG9IZXgodHhIYXNoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X3RyYW5zYWN0aW9uX3JlY2VpcHRcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFRyYW5zYWN0aW9uUmVjZWlwdFJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Z1bGxfY29udHJhY3RcIiwgeyBibG9ja0lkZW50aWZpZXIsIGNvbnRyYWN0QWRkcmVzcyB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NIYXNoQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfY2xhc3NfaGFzaF9hdFwiLCB7IGJsb2NrSWRlbnRpZmllciwgY29udHJhY3RBZGRyZXNzIH0pO1xuICB9XG4gIGFzeW5jIGdldENsYXNzQnlIYXNoKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2NsYXNzX2J5X2hhc2hcIiwgeyBjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllciB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUNvbnRyYWN0Q2xhc3NSZXNwb25zZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29tcGlsZWRDbGFzc0J5Q2xhc3NIYXNoKGNsYXNzSGFzaCwgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2NvbXBpbGVkX2NsYXNzX2J5X2NsYXNzX2hhc2hcIiwgeyBjbGFzc0hhc2gsIGJsb2NrSWRlbnRpZmllciB9KTtcbiAgfVxuICBhc3luYyBnZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIGNvbXBpbGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBsZXQgY29udHJhY3RDbGFzcztcbiAgICBpZiAoY29udHJhY3RBZGRyZXNzKSB7XG4gICAgICBjb250cmFjdENsYXNzID0gYXdhaXQgdGhpcy5nZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyKTtcbiAgICB9IGVsc2UgaWYgKGNsYXNzSGFzaCkge1xuICAgICAgY29udHJhY3RDbGFzcyA9IGF3YWl0IHRoaXMuZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoLCBibG9ja0lkZW50aWZpZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcImdldENvbnRyYWN0VmVyc2lvbiByZXF1aXJlIGNvbnRyYWN0QWRkcmVzcyBvciBjbGFzc0hhc2hcIik7XG4gICAgfVxuICAgIGlmIChpc1NpZXJyYShjb250cmFjdENsYXNzKSkge1xuICAgICAgaWYgKGNvbXBpbGVyKSB7XG4gICAgICAgIGNvbnN0IGFiaVRlc3QgPSBnZXRBYmlDb250cmFjdFZlcnNpb24oY29udHJhY3RDbGFzcy5hYmkpO1xuICAgICAgICByZXR1cm4geyBjYWlybzogXCIxXCIsIGNvbXBpbGVyOiBhYmlUZXN0LmNvbXBpbGVyIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBjYWlybzogXCIxXCIsIGNvbXBpbGVyOiB2b2lkIDAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY2Fpcm86IFwiMFwiLCBjb21waWxlcjogXCIwXCIgfTtcbiAgfVxuICBhc3luYyBpbnZva2VGdW5jdGlvbihmdW5jdGlvbkludm9jYXRpb24sIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiYWRkX3RyYW5zYWN0aW9uXCIsIHZvaWQgMCwge1xuICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICBzZW5kZXJfYWRkcmVzczogZnVuY3Rpb25JbnZvY2F0aW9uLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGZ1bmN0aW9uSW52b2NhdGlvbi5jYWxsZGF0YSA/PyBbXSksXG4gICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZVRvRGVjaW1hbEFycmF5KGZ1bmN0aW9uSW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgbm9uY2U6IHRvSGV4KGRldGFpbHMubm9uY2UpLFxuICAgICAgbWF4X2ZlZTogdG9IZXgoZGV0YWlscy5tYXhGZWUgfHwgMCksXG4gICAgICB2ZXJzaW9uOiBcIjB4MVwiXG4gICAgfSkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlSW52b2tlRnVuY3Rpb25SZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZGVwbG95QWNjb3VudENvbnRyYWN0KHsgY2xhc3NIYXNoLCBjb25zdHJ1Y3RvckNhbGxkYXRhLCBhZGRyZXNzU2FsdCwgc2lnbmF0dXJlIH0sIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiYWRkX3RyYW5zYWN0aW9uXCIsIHZvaWQgMCwge1xuICAgICAgdHlwZTogXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovLFxuICAgICAgY29udHJhY3RfYWRkcmVzc19zYWx0OiBhZGRyZXNzU2FsdCA/PyByYW5kb21BZGRyZXNzKCksXG4gICAgICBjb25zdHJ1Y3Rvcl9jYWxsZGF0YTogQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhID8/IFtdKSxcbiAgICAgIGNsYXNzX2hhc2g6IHRvSGV4KGNsYXNzSGFzaCksXG4gICAgICBtYXhfZmVlOiB0b0hleChkZXRhaWxzLm1heEZlZSB8fCAwKSxcbiAgICAgIHZlcnNpb246IHRvSGV4KGRldGFpbHMudmVyc2lvbiB8fCAwKSxcbiAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKSxcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKVxuICAgIH0pLnRoZW4odGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZURlcGxveUNvbnRyYWN0UmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGRlY2xhcmVDb250cmFjdCh7IHNlbmRlckFkZHJlc3MsIGNvbnRyYWN0LCBzaWduYXR1cmUsIGNvbXBpbGVkQ2xhc3NIYXNoIH0sIGRldGFpbHMpIHtcbiAgICBpZiAoIWlzU2llcnJhKGNvbnRyYWN0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImFkZF90cmFuc2FjdGlvblwiLCB2b2lkIDAsIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgY29udHJhY3RfY2xhc3M6IGNvbnRyYWN0LFxuICAgICAgICBub25jZTogdG9IZXgoZGV0YWlscy5ub25jZSksXG4gICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgICAgc2VuZGVyX2FkZHJlc3M6IHNlbmRlckFkZHJlc3MsXG4gICAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleCh0cmFuc2FjdGlvblZlcnNpb24pXG4gICAgICB9KS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VEZWNsYXJlQ29udHJhY3RSZXNwb25zZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJhZGRfdHJhbnNhY3Rpb25cIiwgdm9pZCAwLCB7XG4gICAgICB0eXBlOiBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovLFxuICAgICAgc2VuZGVyX2FkZHJlc3M6IHNlbmRlckFkZHJlc3MsXG4gICAgICBjb21waWxlZF9jbGFzc19oYXNoOiBjb21waWxlZENsYXNzSGFzaCxcbiAgICAgIGNvbnRyYWN0X2NsYXNzOiBjb250cmFjdCxcbiAgICAgIG5vbmNlOiB0b0hleChkZXRhaWxzLm5vbmNlKSxcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoc2lnbmF0dXJlKSxcbiAgICAgIG1heF9mZWU6IHRvSGV4KGRldGFpbHMubWF4RmVlIHx8IDApLFxuICAgICAgdmVyc2lvbjogdG9IZXgodHJhbnNhY3Rpb25WZXJzaW9uXzIpXG4gICAgfSkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlRGVjbGFyZUNvbnRyYWN0UmVzcG9uc2UpO1xuICB9XG4gIGFzeW5jIGdldEVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnZva2VFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBpbnZvY2F0aW9uRGV0YWlscywgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUpO1xuICB9XG4gIGFzeW5jIGdldEludm9rZUVzdGltYXRlRmVlKGludm9jYXRpb24sIGludm9jYXRpb25EZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJJTlZPS0VfRlVOQ1RJT05cIiAvKiBJTlZPS0UgKi8sXG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIC4uLmludm9jYXRpb25EZXRhaWxzXG4gICAgICB9LFxuICAgICAgXCJmZWVcIlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImVzdGltYXRlX2ZlZVwiLCB7IGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0sIHRyYW5zYWN0aW9uKS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUZlZUVzdGltYXRlUmVzcG9uc2VcbiAgICApO1xuICB9XG4gIGFzeW5jIGdldERlY2xhcmVFc3RpbWF0ZUZlZShpbnZvY2F0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvbihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9mZWVcIiwgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LCB0cmFuc2FjdGlvbikudGhlbihcbiAgICAgIHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoaW52b2NhdGlvbiwgZGV0YWlscywgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiREVQTE9ZX0FDQ09VTlRcIiAvKiBERVBMT1lfQUNDT1VOVCAqLyxcbiAgICAgICAgLi4uaW52b2NhdGlvbixcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfSxcbiAgICAgIFwiZmVlXCJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9mZWVcIiwgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LCB0cmFuc2FjdGlvbikudGhlbihcbiAgICAgIHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZVJlc3BvbnNlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIHsgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSA9IGZhbHNlIH0pIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbnMgPSBpbnZvY2F0aW9ucy5tYXAoKGl0KSA9PiB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oaXQsIFwiZmVlXCIpKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFxuICAgICAgXCJlc3RpbWF0ZV9mZWVfYnVsa1wiLFxuICAgICAgeyBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSB9LFxuICAgICAgdHJhbnNhY3Rpb25zXG4gICAgKS50aGVuKHRoaXMucmVzcG9uc2VQYXJzZXIucGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF9jb2RlXCIsIHsgY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIgfSk7XG4gIH1cbiAgYXN5bmMgd2FpdEZvclRyYW5zYWN0aW9uKHR4SGFzaCwgb3B0aW9ucykge1xuICAgIGxldCByZXM7XG4gICAgbGV0IGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgIGxldCByZXRyaWVzID0gMDtcbiAgICBjb25zdCByZXRyeUludGVydmFsID0gb3B0aW9ucz8ucmV0cnlJbnRlcnZhbCA/PyA1ZTM7XG4gICAgY29uc3QgZXJyb3JTdGF0ZXMgPSBvcHRpb25zPy5lcnJvclN0YXRlcyA/PyBbXG4gICAgICBcIlJFSkVDVEVEXCIgLyogUkVKRUNURUQgKi8sXG4gICAgICBcIk5PVF9SRUNFSVZFRFwiIC8qIE5PVF9SRUNFSVZFRCAqLyxcbiAgICAgIFwiUkVWRVJURURcIiAvKiBSRVZFUlRFRCAqL1xuICAgIF07XG4gICAgY29uc3Qgc3VjY2Vzc1N0YXRlcyA9IG9wdGlvbnM/LnN1Y2Nlc3NTdGF0ZXMgPz8gW1xuICAgICAgXCJTVUNDRUVERURcIiAvKiBTVUNDRUVERUQgKi8sXG4gICAgICBcIkFDQ0VQVEVEX09OX0wxXCIgLyogQUNDRVBURURfT05fTDEgKi8sXG4gICAgICBcIkFDQ0VQVEVEX09OX0wyXCIgLyogQUNDRVBURURfT05fTDIgKi9cbiAgICBdO1xuICAgIHdoaWxlICghY29tcGxldGVkKSB7XG4gICAgICBhd2FpdCB3YWl0KHJldHJ5SW50ZXJ2YWwpO1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvblN0YXR1cyh0eEhhc2gpO1xuICAgICAgaWYgKFwiTk9UX1JFQ0VJVkVEXCIgLyogTk9UX1JFQ0VJVkVEICovID09PSByZXMuZmluYWxpdHlfc3RhdHVzICYmIHJldHJpZXMgPCAzKSB7XG4gICAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3VjY2Vzc1N0YXRlcy5pbmNsdWRlcyhyZXMuZmluYWxpdHlfc3RhdHVzKSB8fCBzdWNjZXNzU3RhdGVzLmluY2x1ZGVzKHJlcy5leGVjdXRpb25fc3RhdHVzKSkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlcnJvclN0YXRlcy5pbmNsdWRlcyhyZXMuZmluYWxpdHlfc3RhdHVzKSB8fCBlcnJvclN0YXRlcy5pbmNsdWRlcyhyZXMuZXhlY3V0aW9uX3N0YXR1cykpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgIGlmIChyZXMudHhfZmFpbHVyZV9yZWFzb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYCR7cmVzLnR4X3N0YXR1c306ICR7cmVzLnR4X2ZhaWx1cmVfcmVhc29uLmNvZGV9XG4ke3Jlcy50eF9mYWlsdXJlX3JlYXNvbi5lcnJvcl9tZXNzYWdlfWA7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzLnR4X3JldmVydF9yZWFzb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYCR7cmVzLnR4X3N0YXR1c306ICR7cmVzLnR4X3JldmVydF9yZWFzb259YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlID0gcmVzLnR4X3N0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgZXJyb3IucmVzcG9uc2UgPSByZXM7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0eFJlY2VpcHQgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0eEhhc2gpO1xuICAgIHJldHVybiB0eFJlY2VpcHQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIHN0YXR1cyBvZiBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0gdHhIYXNoIEJpZ051bWJlcmlzaFxuICAgKiBAcmV0dXJucyBHZXRUcmFuc2FjdGlvblN0YXR1c1Jlc3BvbnNlIC0gdGhlIHRyYW5zYWN0aW9uIHN0YXR1cyBvYmplY3RcbiAgICovXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uU3RhdHVzKHR4SGFzaCkge1xuICAgIGNvbnN0IHR4SGFzaEhleCA9IHRvSGV4KHR4SGFzaCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hFbmRwb2ludChcImdldF90cmFuc2FjdGlvbl9zdGF0dXNcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgc21hcnQgY29udHJhY3QgYWRkcmVzcyBvbiB0aGUgZ29lcmxpIHRlc3RuZXQuXG4gICAqIEByZXR1cm5zIEdldENvbnRyYWN0QWRkcmVzc2VzUmVzcG9uc2UgLSBzdGFya25ldCBzbWFydCBjb250cmFjdCBhZGRyZXNzZXNcbiAgICovXG4gIGFzeW5jIGdldENvbnRyYWN0QWRkcmVzc2VzKCkge1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfY29udHJhY3RfYWRkcmVzc2VzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0cmFuc2FjdGlvbiB0cmFjZSBmcm9tIGEgdHggaWQuXG4gICAqIEBwYXJhbSB0eEhhc2ggQmlnTnVtYmVyaXNoXG4gICAqIEByZXR1cm5zIFRyYW5zYWN0aW9uVHJhY2VSZXNwb25zZSAtIHRoZSB0cmFuc2FjdGlvbiB0cmFjZVxuICAgKi9cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25UcmFjZSh0eEhhc2gpIHtcbiAgICBjb25zdCB0eEhhc2hIZXggPSB0b0hleCh0eEhhc2gpO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfdHJhbnNhY3Rpb25fdHJhY2VcIiwgeyB0cmFuc2FjdGlvbkhhc2g6IHR4SGFzaEhleCB9KTtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZU1lc3NhZ2VGZWUoeyBmcm9tX2FkZHJlc3MsIHRvX2FkZHJlc3MsIGVudHJ5X3BvaW50X3NlbGVjdG9yLCBwYXlsb2FkIH0sIGJsb2NrSWRlbnRpZmllciA9IHRoaXMuYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgdmFsaWRDYWxsTDFIYW5kbGVyID0ge1xuICAgICAgZnJvbV9hZGRyZXNzOiBnZXREZWNpbWFsU3RyaW5nKGZyb21fYWRkcmVzcyksXG4gICAgICB0b19hZGRyZXNzOiBnZXRIZXhTdHJpbmcodG9fYWRkcmVzcyksXG4gICAgICBlbnRyeV9wb2ludF9zZWxlY3RvcjogZ2V0U2VsZWN0b3IoZW50cnlfcG9pbnRfc2VsZWN0b3IpLFxuICAgICAgcGF5bG9hZDogZ2V0SGV4U3RyaW5nQXJyYXkocGF5bG9hZClcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJlc3RpbWF0ZV9tZXNzYWdlX2ZlZVwiLCB7IGJsb2NrSWRlbnRpZmllciB9LCB2YWxpZENhbGxMMUhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBTaW11bGF0ZSB0cmFuc2FjdGlvbiB1c2luZyBTZXF1ZW5jZXIgcHJvdmlkZXJcbiAgICogV0FSTklORyE6IFNlcXVlbmNlciB3aWxsIHByb2Nlc3Mgb25seSBmaXJzdCBlbGVtZW50IGZyb20gaW52b2NhdGlvbnMgYXJyYXlcbiAgICpcbiAgICogQHBhcmFtIGludm9jYXRpb25zIEFycmF5IG9mIGludm9jYXRpb25zLCBidXQgb25seSBmaXJzdCBpbnZvY2F0aW9uIHdpbGwgYmUgcHJvY2Vzc2VkXG4gICAqIEBwYXJhbSBibG9ja0lkZW50aWZpZXIgYmxvY2sgaWRlbnRpZmllciwgZGVmYXVsdCAnbGF0ZXN0J1xuICAgKiBAcGFyYW0gc2tpcFZhbGlkYXRlIFNraXAgQWNjb3VudCBfX3ZhbGlkYXRlX18gbWV0aG9kXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyBnZXRTaW11bGF0ZVRyYW5zYWN0aW9uKGludm9jYXRpb25zLCB7XG4gICAgYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIsXG4gICAgc2tpcFZhbGlkYXRlID0gZmFsc2UsXG4gICAgc2tpcEV4ZWN1dGUgPSBmYWxzZVxuICB9KSB7XG4gICAgaWYgKGludm9jYXRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlNlcXVlbmNlciBzaW11bGF0ZSBwcm9jZXNzIG9ubHkgZmlyc3QgZWxlbWVudCBmcm9tIGludm9jYXRpb25zIGxpc3RcIik7XG4gICAgfVxuICAgIGlmIChza2lwRXhlY3V0ZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiU2VxdWVuY2VyIGNhbid0IHNraXAgYWNjb3VudCBfX2V4ZWN1dGVfX1wiKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbnNbMF0pO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXG4gICAgICBcInNpbXVsYXRlX3RyYW5zYWN0aW9uXCIsXG4gICAgICB7XG4gICAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgICAgc2tpcFZhbGlkYXRlOiBza2lwVmFsaWRhdGUgPz8gZmFsc2VcbiAgICAgIH0sXG4gICAgICB0cmFuc2FjdGlvblxuICAgICkudGhlbih0aGlzLnJlc3BvbnNlUGFyc2VyLnBhcnNlU2ltdWxhdGVUcmFuc2FjdGlvblJlc3BvbnNlKTtcbiAgfVxuICBhc3luYyBnZXRTdGF0ZVVwZGF0ZShibG9ja0lkZW50aWZpZXIgPSB0aGlzLmJsb2NrSWRlbnRpZmllcikge1xuICAgIGNvbnN0IGFyZ3MgPSBuZXcgQmxvY2soYmxvY2tJZGVudGlmaWVyKS5zZXF1ZW5jZXJJZGVudGlmaWVyO1xuICAgIHJldHVybiB0aGlzLmZldGNoRW5kcG9pbnQoXCJnZXRfc3RhdGVfdXBkYXRlXCIsIHsgLi4uYXJncyB9KS50aGVuKFxuICAgICAgdGhpcy5yZXNwb25zZVBhcnNlci5wYXJzZUdldFN0YXRlVXBkYXRlUmVzcG9uc2VcbiAgICApO1xuICB9XG4gIC8vIGNvbnNpZGVyIGFkZGluZyBhbiBvcHRpb25hbCB0cmFjZSByZXRyaWV2YWwgcGFyYW1ldGVyIHRvIHRoZSBnZXRCbG9jayBtZXRob2RcbiAgYXN5bmMgZ2V0QmxvY2tUcmFjZXMoYmxvY2tJZGVudGlmaWVyID0gdGhpcy5ibG9ja0lkZW50aWZpZXIpIHtcbiAgICBjb25zdCBhcmdzID0gbmV3IEJsb2NrKGJsb2NrSWRlbnRpZmllcikuc2VxdWVuY2VySWRlbnRpZmllcjtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEVuZHBvaW50KFwiZ2V0X2Jsb2NrX3RyYWNlc1wiLCB7IC4uLmFyZ3MgfSk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0U3RhcmtOYW1lKHRoaXMsIGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG4gIGFzeW5jIGdldEFkZHJlc3NGcm9tU3RhcmtOYW1lKG5hbWUsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUodGhpcywgbmFtZSwgU3RhcmtuZXRJZENvbnRyYWN0Mik7XG4gIH1cbiAgLyoqXG4gICAqIEJ1aWxkIFNpbmdsZSBBY2NvdW50VHJhbnNhY3Rpb24gZnJvbSBTaW5nbGUgQWNjb3VudEludm9jYXRpb25cbiAgICogQHBhcmFtIGludm9jYXRpb24gQWNjb3VudEludm9jYXRpb25JdGVtXG4gICAqIEBwYXJhbSB2ZXJzaW9uVHlwZSAnZmVlJyB8ICd0cmFuc2FjdGlvbicgLSB1c2VkIHRvIGRldGVybWluZSBkZWZhdWx0IHZlcnNpb25zXG4gICAqIEByZXR1cm5zIEFjY291bnRUcmFuc2FjdGlvbkl0ZW1cbiAgICovXG4gIGJ1aWxkVHJhbnNhY3Rpb24oaW52b2NhdGlvbiwgdmVyc2lvblR5cGUpIHtcbiAgICBjb25zdCBkZWZhdWx0VmVyc2lvbnMgPSBnZXRWZXJzaW9uc0J5VHlwZSh2ZXJzaW9uVHlwZSk7XG4gICAgY29uc3QgZGV0YWlscyA9IHtcbiAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlVG9EZWNpbWFsQXJyYXkoaW52b2NhdGlvbi5zaWduYXR1cmUpLFxuICAgICAgbm9uY2U6IHRvSGV4KGludm9jYXRpb24ubm9uY2UpXG4gICAgfTtcbiAgICBpZiAoaW52b2NhdGlvbi50eXBlID09PSBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqLykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogaW52b2NhdGlvbi50eXBlLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgIGNhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGludm9jYXRpb24uY2FsbGRhdGEgPz8gW10pLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYxKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERUNMQVJFXCIgLyogREVDTEFSRSAqLykge1xuICAgICAgaWYgKCFpc1NpZXJyYShpbnZvY2F0aW9uLmNvbnRyYWN0KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IGludm9jYXRpb24udHlwZSxcbiAgICAgICAgICBjb250cmFjdF9jbGFzczogaW52b2NhdGlvbi5jb250cmFjdCxcbiAgICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICAgIHZlcnNpb246IHRvSGV4KGludm9jYXRpb24udmVyc2lvbiB8fCBkZWZhdWx0VmVyc2lvbnMudjEpLFxuICAgICAgICAgIC8vIGZlZSBmcm9tIGdldERlY2xhcmVFc3RpbWF0ZUZlZSB1c2UgdC52LiBpbnN0ZWFkIG9mIGZlZXQudi5cbiAgICAgICAgICAuLi5kZXRhaWxzXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnRyYWN0X2NsYXNzOiBpbnZvY2F0aW9uLmNvbnRyYWN0LFxuICAgICAgICBjb21waWxlZF9jbGFzc19oYXNoOiBpbnZvY2F0aW9uLmNvbXBpbGVkQ2xhc3NIYXNoLFxuICAgICAgICBzZW5kZXJfYWRkcmVzczogaW52b2NhdGlvbi5zZW5kZXJBZGRyZXNzLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYyKSxcbiAgICAgICAgLy8gZmVlIG9uIGdldERlY2xhcmVFc3RpbWF0ZUZlZSB1c2UgdC52LiBpbnN0ZWFkIG9mIGZlZXQudi5cbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGludm9jYXRpb24udHlwZSA9PT0gXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnZvY2F0aW9uLnR5cGUsXG4gICAgICAgIGNvbnN0cnVjdG9yX2NhbGxkYXRhOiBDYWxsRGF0YS5jb21waWxlKGludm9jYXRpb24uY29uc3RydWN0b3JDYWxsZGF0YSB8fCBbXSksXG4gICAgICAgIGNsYXNzX2hhc2g6IHRvSGV4KGludm9jYXRpb24uY2xhc3NIYXNoKSxcbiAgICAgICAgY29udHJhY3RfYWRkcmVzc19zYWx0OiB0b0hleChpbnZvY2F0aW9uLmFkZHJlc3NTYWx0IHx8IDApLFxuICAgICAgICB2ZXJzaW9uOiB0b0hleChpbnZvY2F0aW9uLnZlcnNpb24gfHwgZGVmYXVsdFZlcnNpb25zLnYxKSxcbiAgICAgICAgLi4uZGV0YWlsc1xuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJTZXF1ZW5jZXIgYnVpbGRUcmFuc2FjdGlvbiByZWNlaXZlZCB1bmtub3duIFRyYW5zYWN0aW9uVHlwZVwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3Byb3ZpZGVyL2RlZmF1bHQudHNcbnZhciBQcm92aWRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocHJvdmlkZXJPck9wdGlvbnMpIHtcbiAgICBpZiAocHJvdmlkZXJPck9wdGlvbnMgaW5zdGFuY2VvZiBQcm92aWRlcikge1xuICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyT3JPcHRpb25zLnByb3ZpZGVyO1xuICAgIH0gZWxzZSBpZiAocHJvdmlkZXJPck9wdGlvbnMgaW5zdGFuY2VvZiBScGNQcm92aWRlciB8fCBwcm92aWRlck9yT3B0aW9ucyBpbnN0YW5jZW9mIFNlcXVlbmNlclByb3ZpZGVyKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXJPck9wdGlvbnM7XG4gICAgfSBlbHNlIGlmIChwcm92aWRlck9yT3B0aW9ucyAmJiBcInJwY1wiIGluIHByb3ZpZGVyT3JPcHRpb25zKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gbmV3IFJwY1Byb3ZpZGVyKHByb3ZpZGVyT3JPcHRpb25zLnJwYyk7XG4gICAgfSBlbHNlIGlmIChwcm92aWRlck9yT3B0aW9ucyAmJiBcInNlcXVlbmNlclwiIGluIHByb3ZpZGVyT3JPcHRpb25zKSB7XG4gICAgICB0aGlzLnByb3ZpZGVyID0gbmV3IFNlcXVlbmNlclByb3ZpZGVyKHByb3ZpZGVyT3JPcHRpb25zLnNlcXVlbmNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvdmlkZXIgPSBuZXcgUnBjUHJvdmlkZXIoKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0Q2hhaW5JZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDaGFpbklkKCk7XG4gIH1cbiAgYXN5bmMgZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0QmxvY2soYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRDbGFzc0F0KGNvbnRyYWN0QWRkcmVzcywgYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0Q2xhc3NBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0Q2xhc3NIYXNoQXQoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDbGFzc0hhc2hBdChjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0Q2xhc3NCeUhhc2goY2xhc3NIYXNoKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZShpbnZvY2F0aW9uV2l0aFR4VHlwZSwgaW52b2NhdGlvbkRldGFpbHMsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldEVzdGltYXRlRmVlKGludm9jYXRpb25XaXRoVHhUeXBlLCBpbnZvY2F0aW9uRGV0YWlscywgYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRJbnZva2VFc3RpbWF0ZUZlZShpbnZvY2F0aW9uV2l0aFR4VHlwZSwgaW52b2NhdGlvbkRldGFpbHMsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0SW52b2tlRXN0aW1hdGVGZWUoXG4gICAgICBpbnZvY2F0aW9uV2l0aFR4VHlwZSxcbiAgICAgIGludm9jYXRpb25EZXRhaWxzLFxuICAgICAgYmxvY2tJZGVudGlmaWVyLFxuICAgICAgc2tpcFZhbGlkYXRlXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRFc3RpbWF0ZUZlZUJ1bGsoaW52b2NhdGlvbnMsIG9wdGlvbnMpO1xuICB9XG4gIGFzeW5jIGdldE5vbmNlRm9yQWRkcmVzcyhjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldE5vbmNlRm9yQWRkcmVzcyhjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0U3RvcmFnZUF0KGNvbnRyYWN0QWRkcmVzcywga2V5LCBibG9ja0lkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRTdG9yYWdlQXQoY29udHJhY3RBZGRyZXNzLCBrZXksIGJsb2NrSWRlbnRpZmllcik7XG4gIH1cbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb24odHhIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24odHhIYXNoKTtcbiAgfVxuICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHR4SGFzaCk7XG4gIH1cbiAgYXN5bmMgY2FsbENvbnRyYWN0KHJlcXVlc3QsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmNhbGxDb250cmFjdChyZXF1ZXN0LCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGludm9rZUZ1bmN0aW9uKGZ1bmN0aW9uSW52b2NhdGlvbiwgZGV0YWlscykge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmludm9rZUZ1bmN0aW9uKGZ1bmN0aW9uSW52b2NhdGlvbiwgZGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZGVwbG95QWNjb3VudENvbnRyYWN0KHBheWxvYWQsIGRldGFpbHMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5kZXBsb3lBY2NvdW50Q29udHJhY3QocGF5bG9hZCwgZGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZGVjbGFyZUNvbnRyYWN0KHRyYW5zYWN0aW9uLCBkZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZGVjbGFyZUNvbnRyYWN0KHRyYW5zYWN0aW9uLCBkZXRhaWxzKTtcbiAgfVxuICBhc3luYyBnZXREZWNsYXJlRXN0aW1hdGVGZWUodHJhbnNhY3Rpb24sIGRldGFpbHMsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0RGVjbGFyZUVzdGltYXRlRmVlKHRyYW5zYWN0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSk7XG4gIH1cbiAgZ2V0RGVwbG95QWNjb3VudEVzdGltYXRlRmVlKHRyYW5zYWN0aW9uLCBkZXRhaWxzLCBibG9ja0lkZW50aWZpZXIsIHNraXBWYWxpZGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldERlcGxveUFjY291bnRFc3RpbWF0ZUZlZShcbiAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgZGV0YWlscyxcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0Q29kZShjb250cmFjdEFkZHJlc3MsIGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmdldENvZGUoY29udHJhY3RBZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIHdhaXRGb3JUcmFuc2FjdGlvbih0eEhhc2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci53YWl0Rm9yVHJhbnNhY3Rpb24odHhIYXNoLCBvcHRpb25zKTtcbiAgfVxuICBhc3luYyBnZXRTaW11bGF0ZVRyYW5zYWN0aW9uKGludm9jYXRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0U2ltdWxhdGVUcmFuc2FjdGlvbihpbnZvY2F0aW9ucywgb3B0aW9ucyk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhdGVVcGRhdGUoYmxvY2tJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0U3RhdGVVcGRhdGUoYmxvY2tJZGVudGlmaWVyKTtcbiAgfVxuICBhc3luYyBnZXRTdGFya05hbWUoYWRkcmVzcywgU3RhcmtuZXRJZENvbnRyYWN0Mikge1xuICAgIHJldHVybiBnZXRTdGFya05hbWUodGhpcywgYWRkcmVzcywgU3RhcmtuZXRJZENvbnRyYWN0Mik7XG4gIH1cbiAgYXN5bmMgZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUobmFtZSwgU3RhcmtuZXRJZENvbnRyYWN0Mikge1xuICAgIHJldHVybiBnZXRBZGRyZXNzRnJvbVN0YXJrTmFtZSh0aGlzLCBuYW1lLCBTdGFya25ldElkQ29udHJhY3QyKTtcbiAgfVxuICBhc3luYyBnZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRDb250cmFjdFZlcnNpb24oY29udHJhY3RBZGRyZXNzLCBjbGFzc0hhc2gsIG9wdGlvbnMpO1xuICB9XG59O1xuXG4vLyBzcmMvc2lnbmVyL2ludGVyZmFjZS50c1xudmFyIFNpZ25lckludGVyZmFjZSA9IGNsYXNzIHtcbn07XG5cbi8vIHNyYy91dGlscy90cmFuc2FjdGlvbi50c1xudmFyIHRyYW5zYWN0aW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRyYW5zYWN0aW9uX2V4cG9ydHMsIHtcbiAgZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGE6ICgpID0+IGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhLFxuICBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YVdpdGhOb25jZTogKCkgPT4gZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFXaXRoTm9uY2UsXG4gIGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhX2NhaXJvMTogKCkgPT4gZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFfY2Fpcm8xLFxuICBnZXRFeGVjdXRlQ2FsbGRhdGE6ICgpID0+IGdldEV4ZWN1dGVDYWxsZGF0YSxcbiAgdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5czogKCkgPT4gdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5cyxcbiAgdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5c19jYWlybzE6ICgpID0+IHRyYW5zZm9ybUNhbGxzVG9NdWx0aWNhbGxBcnJheXNfY2Fpcm8xXG59KTtcbnZhciB0cmFuc2Zvcm1DYWxsc1RvTXVsdGljYWxsQXJyYXlzID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IGNhbGxBcnJheSA9IFtdO1xuICBjb25zdCBjYWxsZGF0YSA9IFtdO1xuICBjYWxscy5mb3JFYWNoKChjYWxsKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY2FsbC5jYWxsZGF0YSB8fCBbXSk7XG4gICAgY2FsbEFycmF5LnB1c2goe1xuICAgICAgdG86IHRvQmlnSW50KGNhbGwuY29udHJhY3RBZGRyZXNzKS50b1N0cmluZygxMCksXG4gICAgICBzZWxlY3RvcjogdG9CaWdJbnQoZ2V0U2VsZWN0b3JGcm9tTmFtZShjYWxsLmVudHJ5cG9pbnQpKS50b1N0cmluZygxMCksXG4gICAgICBkYXRhX29mZnNldDogY2FsbGRhdGEubGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICBkYXRhX2xlbjogZGF0YS5sZW5ndGgudG9TdHJpbmcoKVxuICAgIH0pO1xuICAgIGNhbGxkYXRhLnB1c2goLi4uZGF0YSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGNhbGxBcnJheSxcbiAgICBjYWxsZGF0YTogQ2FsbERhdGEuY29tcGlsZSh7IGNhbGxkYXRhIH0pXG4gIH07XG59O1xudmFyIGZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IHsgY2FsbEFycmF5LCBjYWxsZGF0YSB9ID0gdHJhbnNmb3JtQ2FsbHNUb011bHRpY2FsbEFycmF5cyhjYWxscyk7XG4gIGNvbnN0IGNvbXBpbGVkQ2FsbHMgPSBDYWxsRGF0YS5jb21waWxlKHsgY2FsbEFycmF5IH0pO1xuICByZXR1cm4gWy4uLmNvbXBpbGVkQ2FsbHMsIC4uLmNhbGxkYXRhXTtcbn07XG52YXIgZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGFXaXRoTm9uY2UgPSAoY2FsbHMsIG5vbmNlKSA9PiB7XG4gIHJldHVybiBbLi4uZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGEoY2FsbHMpLCB0b0JpZ0ludChub25jZSkudG9TdHJpbmcoKV07XG59O1xudmFyIHRyYW5zZm9ybUNhbGxzVG9NdWx0aWNhbGxBcnJheXNfY2Fpcm8xID0gKGNhbGxzKSA9PiB7XG4gIGNvbnN0IGNhbGxBcnJheSA9IGNhbGxzLm1hcCgoY2FsbCkgPT4gKHtcbiAgICB0bzogdG9CaWdJbnQoY2FsbC5jb250cmFjdEFkZHJlc3MpLnRvU3RyaW5nKDEwKSxcbiAgICBzZWxlY3RvcjogdG9CaWdJbnQoZ2V0U2VsZWN0b3JGcm9tTmFtZShjYWxsLmVudHJ5cG9pbnQpKS50b1N0cmluZygxMCksXG4gICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoY2FsbC5jYWxsZGF0YSB8fCBbXSlcbiAgfSkpO1xuICByZXR1cm4gY2FsbEFycmF5O1xufTtcbnZhciBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YV9jYWlybzEgPSAoY2FsbHMpID0+IHtcbiAgY29uc3Qgb3JkZXJDYWxscyA9IGNhbGxzLm1hcCgoY2FsbCkgPT4gKHtcbiAgICBjb250cmFjdEFkZHJlc3M6IGNhbGwuY29udHJhY3RBZGRyZXNzLFxuICAgIGVudHJ5cG9pbnQ6IGNhbGwuZW50cnlwb2ludCxcbiAgICBjYWxsZGF0YTogQXJyYXkuaXNBcnJheShjYWxsLmNhbGxkYXRhKSAmJiBcIl9fY29tcGlsZWRfX1wiIGluIGNhbGwuY2FsbGRhdGEgPyBjYWxsLmNhbGxkYXRhIDogQ2FsbERhdGEuY29tcGlsZShjYWxsLmNhbGxkYXRhKVxuICAgIC8vIFJhd0FyZ3NPYmplY3QgfCBSYXdBcmdzQXJyYXkgdHlwZVxuICB9KSk7XG4gIHJldHVybiBDYWxsRGF0YS5jb21waWxlKHsgb3JkZXJDYWxscyB9KTtcbn07XG52YXIgZ2V0RXhlY3V0ZUNhbGxkYXRhID0gKGNhbGxzLCBjYWlyb1ZlcnNpb24gPSBcIjBcIikgPT4ge1xuICBpZiAoY2Fpcm9WZXJzaW9uID09PSBcIjFcIikge1xuICAgIHJldHVybiBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YV9jYWlybzEoY2FsbHMpO1xuICB9XG4gIHJldHVybiBmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YShjYWxscyk7XG59O1xuXG4vLyBzcmMvdXRpbHMvdHlwZWREYXRhLnRzXG52YXIgdHlwZWREYXRhX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVkRGF0YV9leHBvcnRzLCB7XG4gIGVuY29kZURhdGE6ICgpID0+IGVuY29kZURhdGEsXG4gIGVuY29kZVR5cGU6ICgpID0+IGVuY29kZVR5cGUsXG4gIGVuY29kZVZhbHVlOiAoKSA9PiBlbmNvZGVWYWx1ZSxcbiAgZ2V0RGVwZW5kZW5jaWVzOiAoKSA9PiBnZXREZXBlbmRlbmNpZXMsXG4gIGdldE1lc3NhZ2VIYXNoOiAoKSA9PiBnZXRNZXNzYWdlSGFzaCxcbiAgZ2V0U3RydWN0SGFzaDogKCkgPT4gZ2V0U3RydWN0SGFzaCxcbiAgZ2V0VHlwZUhhc2g6ICgpID0+IGdldFR5cGVIYXNoLFxuICBpc01lcmtsZVRyZWVUeXBlOiAoKSA9PiBpc01lcmtsZVRyZWVUeXBlLFxuICBwcmVwYXJlU2VsZWN0b3I6ICgpID0+IHByZXBhcmVTZWxlY3RvclxufSk7XG5cbi8vIHNyYy91dGlscy9tZXJrbGUudHNcbnZhciBtZXJrbGVfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQobWVya2xlX2V4cG9ydHMsIHtcbiAgTWVya2xlVHJlZTogKCkgPT4gTWVya2xlVHJlZSxcbiAgcHJvb2ZNZXJrbGVQYXRoOiAoKSA9PiBwcm9vZk1lcmtsZVBhdGhcbn0pO1xudmFyIE1lcmtsZVRyZWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGxlYWZIYXNoZXMpIHtcbiAgICB0aGlzLmJyYW5jaGVzID0gW107XG4gICAgdGhpcy5sZWF2ZXMgPSBsZWFmSGFzaGVzO1xuICAgIHRoaXMucm9vdCA9IHRoaXMuYnVpbGQobGVhZkhhc2hlcyk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBNZXJrbGUgdHJlZVxuICAgKiBAcGFyYW0gbGVhdmVzIGhleC1zdHJpbmcgYXJyYXlcbiAgICogQHJldHVybnMgZm9ybWF0OiBoZXgtc3RyaW5nOyBNZXJrbGUgdHJlZSByb290XG4gICAqL1xuICBidWlsZChsZWF2ZXMpIHtcbiAgICBpZiAobGVhdmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGxlYXZlc1swXTtcbiAgICB9XG4gICAgaWYgKGxlYXZlcy5sZW5ndGggIT09IHRoaXMubGVhdmVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5icmFuY2hlcy5wdXNoKGxlYXZlcyk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0xlYXZlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVhdmVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBpZiAoaSArIDEgPT09IGxlYXZlcy5sZW5ndGgpIHtcbiAgICAgICAgbmV3TGVhdmVzLnB1c2goTWVya2xlVHJlZS5oYXNoKGxlYXZlc1tpXSwgXCIweDBcIikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TGVhdmVzLnB1c2goTWVya2xlVHJlZS5oYXNoKGxlYXZlc1tpXSwgbGVhdmVzW2kgKyAxXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWlsZChuZXdMZWF2ZXMpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgcGVkZXJzZW4gaGFzaCBmcm9tIGEgYW5kIGJcbiAgICogQHJldHVybnMgZm9ybWF0OiBoZXgtc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgaGFzaChhLCBiKSB7XG4gICAgY29uc3QgW2FTb3J0ZWQsIGJTb3J0ZWRdID0gW3RvQmlnSW50KGEpLCB0b0JpZ0ludChiKV0uc29ydCgoeCwgeSkgPT4geCA+PSB5ID8gMSA6IC0xKTtcbiAgICByZXR1cm4gc3RhcmtDdXJ2ZS5wZWRlcnNlbihhU29ydGVkLCBiU29ydGVkKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHBhdGggdG8gbGVhZlxuICAgKiBAcGFyYW0gbGVhZiBoZXgtc3RyaW5nXG4gICAqIEBwYXJhbSBicmFuY2ggaGV4LXN0cmluZyBhcnJheVxuICAgKiBAcGFyYW0gaGFzaFBhdGggaGV4LXN0cmluZyBhcnJheVxuICAgKiBAcmV0dXJucyBmb3JtYXQ6IGhleC1zdHJpbmcgYXJyYXlcbiAgICovXG4gIGdldFByb29mKGxlYWYsIGJyYW5jaCA9IHRoaXMubGVhdmVzLCBoYXNoUGF0aCA9IFtdKSB7XG4gICAgY29uc3QgaW5kZXggPSBicmFuY2guaW5kZXhPZihsZWFmKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJsZWFmIG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgaWYgKGJyYW5jaC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBoYXNoUGF0aDtcbiAgICB9XG4gICAgY29uc3QgaXNMZWZ0ID0gaW5kZXggJSAyID09PSAwO1xuICAgIGNvbnN0IG5lZWRlZEJyYW5jaCA9IChpc0xlZnQgPyBicmFuY2hbaW5kZXggKyAxXSA6IGJyYW5jaFtpbmRleCAtIDFdKSA/PyBcIjB4MFwiO1xuICAgIGNvbnN0IG5ld0hhc2hQYXRoID0gWy4uLmhhc2hQYXRoLCBuZWVkZWRCcmFuY2hdO1xuICAgIGNvbnN0IGN1cnJlbnRCcmFuY2hMZXZlbEluZGV4ID0gdGhpcy5sZWF2ZXMubGVuZ3RoID09PSBicmFuY2gubGVuZ3RoID8gLTEgOiB0aGlzLmJyYW5jaGVzLmZpbmRJbmRleCgoYikgPT4gYi5sZW5ndGggPT09IGJyYW5jaC5sZW5ndGgpO1xuICAgIGNvbnN0IG5leHRCcmFuY2ggPSB0aGlzLmJyYW5jaGVzW2N1cnJlbnRCcmFuY2hMZXZlbEluZGV4ICsgMV0gPz8gW3RoaXMucm9vdF07XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvb2YoXG4gICAgICBNZXJrbGVUcmVlLmhhc2goaXNMZWZ0ID8gbGVhZiA6IG5lZWRlZEJyYW5jaCwgaXNMZWZ0ID8gbmVlZGVkQnJhbmNoIDogbGVhZiksXG4gICAgICBuZXh0QnJhbmNoLFxuICAgICAgbmV3SGFzaFBhdGhcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gcHJvb2ZNZXJrbGVQYXRoKHJvb3QsIGxlYWYsIHBhdGgpIHtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHJvb3QgPT09IGxlYWY7XG4gIH1cbiAgY29uc3QgW25leHQsIC4uLnJlc3RdID0gcGF0aDtcbiAgcmV0dXJuIHByb29mTWVya2xlUGF0aChyb290LCBNZXJrbGVUcmVlLmhhc2gobGVhZiwgbmV4dCksIHJlc3QpO1xufVxuXG4vLyBzcmMvdXRpbHMvdHlwZWREYXRhLnRzXG5mdW5jdGlvbiBnZXRIZXgodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdG9IZXgodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHRvSGV4KGVuY29kZVNob3J0U3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBCaWdOdW1iZXJpc2g6ICR7dmFsdWV9YCk7XG4gIH1cbn1cbnZhciB2YWxpZGF0ZVR5cGVkRGF0YSA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IHR5cGVkRGF0YSA9IGRhdGE7XG4gIGNvbnN0IHZhbGlkID0gQm9vbGVhbih0eXBlZERhdGEudHlwZXMgJiYgdHlwZWREYXRhLnByaW1hcnlUeXBlICYmIHR5cGVkRGF0YS5tZXNzYWdlKTtcbiAgcmV0dXJuIHZhbGlkO1xufTtcbmZ1bmN0aW9uIHByZXBhcmVTZWxlY3RvcihzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIZXgoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBnZXRTZWxlY3RvckZyb21OYW1lKHNlbGVjdG9yKTtcbn1cbmZ1bmN0aW9uIGlzTWVya2xlVHJlZVR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZS50eXBlID09PSBcIm1lcmtsZXRyZWVcIjtcbn1cbnZhciBnZXREZXBlbmRlbmNpZXMgPSAodHlwZXMsIHR5cGUsIGRlcGVuZGVuY2llcyA9IFtdKSA9PiB7XG4gIGlmICh0eXBlW3R5cGUubGVuZ3RoIC0gMV0gPT09IFwiKlwiKSB7XG4gICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgLTEpO1xuICB9XG4gIGlmIChkZXBlbmRlbmNpZXMuaW5jbHVkZXModHlwZSkpIHtcbiAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICB9XG4gIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICB9XG4gIHJldHVybiBbXG4gICAgdHlwZSxcbiAgICAuLi50eXBlc1t0eXBlXS5yZWR1Y2UoXG4gICAgICAocHJldmlvdXMsIHQpID0+IFtcbiAgICAgICAgLi4ucHJldmlvdXMsXG4gICAgICAgIC4uLmdldERlcGVuZGVuY2llcyh0eXBlcywgdC50eXBlLCBwcmV2aW91cykuZmlsdGVyKFxuICAgICAgICAgIChkZXBlbmRlbmN5KSA9PiAhcHJldmlvdXMuaW5jbHVkZXMoZGVwZW5kZW5jeSlcbiAgICAgICAgKVxuICAgICAgXSxcbiAgICAgIFtdXG4gICAgKVxuICBdO1xufTtcbmZ1bmN0aW9uIGdldE1lcmtsZVRyZWVUeXBlKHR5cGVzLCBjdHgpIHtcbiAgaWYgKGN0eC5wYXJlbnQgJiYgY3R4LmtleSkge1xuICAgIGNvbnN0IHBhcmVudFR5cGUgPSB0eXBlc1tjdHgucGFyZW50XTtcbiAgICBjb25zdCBtZXJrbGVUeXBlID0gcGFyZW50VHlwZS5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGN0eC5rZXkpO1xuICAgIGNvbnN0IGlzTWVya2xlVHJlZSA9IGlzTWVya2xlVHJlZVR5cGUobWVya2xlVHlwZSk7XG4gICAgaWYgKCFpc01lcmtsZVRyZWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtjdHgua2V5fSBpcyBub3QgYSBtZXJrbGUgdHJlZWApO1xuICAgIH1cbiAgICBpZiAobWVya2xlVHlwZS5jb250YWlucy5lbmRzV2l0aChcIipcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWVya2xlIHRyZWUgY29udGFpbiBwcm9wZXJ0eSBtdXN0IG5vdCBiZSBhbiBhcnJheSBidXQgd2FzIGdpdmVuICR7Y3R4LmtleX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmtsZVR5cGUuY29udGFpbnM7XG4gIH1cbiAgcmV0dXJuIFwicmF3XCI7XG59XG52YXIgZW5jb2RlVHlwZSA9ICh0eXBlcywgdHlwZSkgPT4ge1xuICBjb25zdCBbcHJpbWFyeSwgLi4uZGVwZW5kZW5jaWVzXSA9IGdldERlcGVuZGVuY2llcyh0eXBlcywgdHlwZSk7XG4gIGNvbnN0IG5ld1R5cGVzID0gIXByaW1hcnkgPyBbXSA6IFtwcmltYXJ5LCAuLi5kZXBlbmRlbmNpZXMuc29ydCgpXTtcbiAgcmV0dXJuIG5ld1R5cGVzLm1hcCgoZGVwZW5kZW5jeSkgPT4ge1xuICAgIHJldHVybiBgJHtkZXBlbmRlbmN5fSgke3R5cGVzW2RlcGVuZGVuY3ldLm1hcCgodCkgPT4gYCR7dC5uYW1lfToke3QudHlwZX1gKX0pYDtcbiAgfSkuam9pbihcIlwiKTtcbn07XG52YXIgZ2V0VHlwZUhhc2ggPSAodHlwZXMsIHR5cGUpID0+IHtcbiAgcmV0dXJuIGdldFNlbGVjdG9yRnJvbU5hbWUoZW5jb2RlVHlwZSh0eXBlcywgdHlwZSkpO1xufTtcbnZhciBlbmNvZGVWYWx1ZSA9ICh0eXBlcywgdHlwZSwgZGF0YSwgY3R4ID0ge30pID0+IHtcbiAgaWYgKHR5cGVzW3R5cGVdKSB7XG4gICAgcmV0dXJuIFt0eXBlLCBnZXRTdHJ1Y3RIYXNoKHR5cGVzLCB0eXBlLCBkYXRhKV07XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKHR5cGVzKS5tYXAoKHgpID0+IGAke3h9KmApLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgY29uc3Qgc3RydWN0SGFzaGVzID0gZGF0YS5tYXAoKHN0cnVjdCkgPT4ge1xuICAgICAgcmV0dXJuIGdldFN0cnVjdEhhc2godHlwZXMsIHR5cGUuc2xpY2UoMCwgLTEpLCBzdHJ1Y3QpO1xuICAgIH0pO1xuICAgIHJldHVybiBbdHlwZSwgY29tcHV0ZUhhc2hPbkVsZW1lbnRzKHN0cnVjdEhhc2hlcyldO1xuICB9XG4gIGlmICh0eXBlID09PSBcIm1lcmtsZXRyZWVcIikge1xuICAgIGNvbnN0IG1lcmtsZVRyZWVUeXBlID0gZ2V0TWVya2xlVHJlZVR5cGUodHlwZXMsIGN0eCk7XG4gICAgY29uc3Qgc3RydWN0SGFzaGVzID0gZGF0YS5tYXAoKHN0cnVjdCkgPT4ge1xuICAgICAgcmV0dXJuIGVuY29kZVZhbHVlKHR5cGVzLCBtZXJrbGVUcmVlVHlwZSwgc3RydWN0KVsxXTtcbiAgICB9KTtcbiAgICBjb25zdCB7IHJvb3QgfSA9IG5ldyBNZXJrbGVUcmVlKHN0cnVjdEhhc2hlcyk7XG4gICAgcmV0dXJuIFtcImZlbHRcIiwgcm9vdF07XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZmVsdCpcIikge1xuICAgIHJldHVybiBbXCJmZWx0KlwiLCBjb21wdXRlSGFzaE9uRWxlbWVudHMoZGF0YSldO1xuICB9XG4gIGlmICh0eXBlID09PSBcInNlbGVjdG9yXCIpIHtcbiAgICByZXR1cm4gW1wiZmVsdFwiLCBwcmVwYXJlU2VsZWN0b3IoZGF0YSldO1xuICB9XG4gIHJldHVybiBbdHlwZSwgZ2V0SGV4KGRhdGEpXTtcbn07XG52YXIgZW5jb2RlRGF0YSA9ICh0eXBlcywgdHlwZSwgZGF0YSkgPT4ge1xuICBjb25zdCBbcmV0dXJuVHlwZXMsIHZhbHVlc10gPSB0eXBlc1t0eXBlXS5yZWR1Y2UoXG4gICAgKFt0cywgdnNdLCBmaWVsZCkgPT4ge1xuICAgICAgaWYgKGRhdGFbZmllbGQubmFtZV0gPT09IHZvaWQgMCB8fCBkYXRhW2ZpZWxkLm5hbWVdID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGVuY29kZSBkYXRhOiBtaXNzaW5nIGRhdGEgZm9yICcke2ZpZWxkLm5hbWV9J2ApO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSBkYXRhW2ZpZWxkLm5hbWVdO1xuICAgICAgY29uc3QgW3QsIGVuY29kZWRWYWx1ZV0gPSBlbmNvZGVWYWx1ZSh0eXBlcywgZmllbGQudHlwZSwgdmFsdWUsIHtcbiAgICAgICAgcGFyZW50OiB0eXBlLFxuICAgICAgICBrZXk6IGZpZWxkLm5hbWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgWy4uLnRzLCB0XSxcbiAgICAgICAgWy4uLnZzLCBlbmNvZGVkVmFsdWVdXG4gICAgICBdO1xuICAgIH0sXG4gICAgW1tcImZlbHRcIl0sIFtnZXRUeXBlSGFzaCh0eXBlcywgdHlwZSldXVxuICApO1xuICByZXR1cm4gW3JldHVyblR5cGVzLCB2YWx1ZXNdO1xufTtcbnZhciBnZXRTdHJ1Y3RIYXNoID0gKHR5cGVzLCB0eXBlLCBkYXRhKSA9PiB7XG4gIHJldHVybiBjb21wdXRlSGFzaE9uRWxlbWVudHMoZW5jb2RlRGF0YSh0eXBlcywgdHlwZSwgZGF0YSlbMV0pO1xufTtcbnZhciBnZXRNZXNzYWdlSGFzaCA9ICh0eXBlZERhdGEsIGFjY291bnQpID0+IHtcbiAgaWYgKCF2YWxpZGF0ZVR5cGVkRGF0YSh0eXBlZERhdGEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVHlwZWQgZGF0YSBkb2VzIG5vdCBtYXRjaCBKU09OIHNjaGVtYVwiKTtcbiAgfVxuICBjb25zdCBtZXNzYWdlID0gW1xuICAgIGVuY29kZVNob3J0U3RyaW5nKFwiU3RhcmtOZXQgTWVzc2FnZVwiKSxcbiAgICBnZXRTdHJ1Y3RIYXNoKHR5cGVkRGF0YS50eXBlcywgXCJTdGFya05ldERvbWFpblwiLCB0eXBlZERhdGEuZG9tYWluKSxcbiAgICBhY2NvdW50LFxuICAgIGdldFN0cnVjdEhhc2godHlwZWREYXRhLnR5cGVzLCB0eXBlZERhdGEucHJpbWFyeVR5cGUsIHR5cGVkRGF0YS5tZXNzYWdlKVxuICBdO1xuICByZXR1cm4gY29tcHV0ZUhhc2hPbkVsZW1lbnRzKG1lc3NhZ2UpO1xufTtcblxuLy8gc3JjL3NpZ25lci9kZWZhdWx0LnRzXG52YXIgU2lnbmVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwayA9IHN0YXJrQ3VydmUudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpKSB7XG4gICAgdGhpcy5wayA9IHBrIGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ1ZjJoZXgocGspIDogdG9IZXgocGspO1xuICB9XG4gIGFzeW5jIGdldFB1YktleSgpIHtcbiAgICByZXR1cm4gc3RhcmtDdXJ2ZS5nZXRTdGFya0tleSh0aGlzLnBrKTtcbiAgfVxuICBhc3luYyBzaWduTWVzc2FnZSh0eXBlZERhdGEsIGFjY291bnRBZGRyZXNzKSB7XG4gICAgY29uc3QgbXNnSGFzaCA9IGdldE1lc3NhZ2VIYXNoKHR5cGVkRGF0YSwgYWNjb3VudEFkZHJlc3MpO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbiAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9ucywgdHJhbnNhY3Rpb25zRGV0YWlsLCBhYmlzKSB7XG4gICAgaWYgKGFiaXMgJiYgYWJpcy5sZW5ndGggIT09IHRyYW5zYWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFCSSBtdXN0IGJlIHByb3ZpZGVkIGZvciBlYWNoIHRyYW5zYWN0aW9uIG9yIG5vIHRyYW5zYWN0aW9uXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YSh0cmFuc2FjdGlvbnMsIHRyYW5zYWN0aW9uc0RldGFpbC5jYWlyb1ZlcnNpb24pO1xuICAgIGNvbnN0IG1zZ0hhc2ggPSBjYWxjdWxhdGVUcmFuc2FjdGlvbkhhc2goXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwud2FsbGV0QWRkcmVzcyxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbC52ZXJzaW9uLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlLFxuICAgICAgdHJhbnNhY3Rpb25zRGV0YWlsLmNoYWluSWQsXG4gICAgICB0cmFuc2FjdGlvbnNEZXRhaWwubm9uY2VcbiAgICApO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbiAgYXN5bmMgc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgY2xhc3NIYXNoLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgIGFkZHJlc3NTYWx0LFxuICAgIG1heEZlZSxcbiAgICB2ZXJzaW9uLFxuICAgIGNoYWluSWQsXG4gICAgbm9uY2VcbiAgfSkge1xuICAgIGNvbnN0IG1zZ0hhc2ggPSBjYWxjdWxhdGVEZXBsb3lBY2NvdW50VHJhbnNhY3Rpb25IYXNoKFxuICAgICAgY29udHJhY3RBZGRyZXNzLFxuICAgICAgY2xhc3NIYXNoLFxuICAgICAgQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKSxcbiAgICAgIGFkZHJlc3NTYWx0LFxuICAgICAgdmVyc2lvbixcbiAgICAgIG1heEZlZSxcbiAgICAgIGNoYWluSWQsXG4gICAgICBub25jZVxuICAgICk7XG4gICAgcmV0dXJuIHN0YXJrQ3VydmUuc2lnbihtc2dIYXNoLCB0aGlzLnBrKTtcbiAgfVxuICBhc3luYyBzaWduRGVjbGFyZVRyYW5zYWN0aW9uKHtcbiAgICBjbGFzc0hhc2gsXG4gICAgc2VuZGVyQWRkcmVzcyxcbiAgICBjaGFpbklkLFxuICAgIG1heEZlZSxcbiAgICB2ZXJzaW9uLFxuICAgIG5vbmNlLFxuICAgIGNvbXBpbGVkQ2xhc3NIYXNoXG4gIH0pIHtcbiAgICBjb25zdCBtc2dIYXNoID0gY2FsY3VsYXRlRGVjbGFyZVRyYW5zYWN0aW9uSGFzaChcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIHNlbmRlckFkZHJlc3MsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgbWF4RmVlLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIG5vbmNlLFxuICAgICAgY29tcGlsZWRDbGFzc0hhc2hcbiAgICApO1xuICAgIHJldHVybiBzdGFya0N1cnZlLnNpZ24obXNnSGFzaCwgdGhpcy5wayk7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9ldmVudHMudHNcbmZ1bmN0aW9uIHBhcnNlVURDRXZlbnQodHhSZWNlaXB0KSB7XG4gIGlmICghdHhSZWNlaXB0LmV2ZW50cykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVEQyBlbWl0dGVkIGV2ZW50IGlzIGVtcHR5XCIpO1xuICB9XG4gIGNvbnN0IGV2ZW50ID0gdHhSZWNlaXB0LmV2ZW50cy5maW5kKFxuICAgIChpdCkgPT4gY2xlYW5IZXgoaXQuZnJvbV9hZGRyZXNzKSA9PT0gY2xlYW5IZXgoVURDLkFERFJFU1MpXG4gICkgfHwge1xuICAgIGRhdGE6IFtdXG4gIH07XG4gIHJldHVybiB7XG4gICAgdHJhbnNhY3Rpb25faGFzaDogdHhSZWNlaXB0LnRyYW5zYWN0aW9uX2hhc2gsXG4gICAgY29udHJhY3RfYWRkcmVzczogZXZlbnQuZGF0YVswXSxcbiAgICBhZGRyZXNzOiBldmVudC5kYXRhWzBdLFxuICAgIGRlcGxveWVyOiBldmVudC5kYXRhWzFdLFxuICAgIHVuaXF1ZTogZXZlbnQuZGF0YVsyXSxcbiAgICBjbGFzc0hhc2g6IGV2ZW50LmRhdGFbM10sXG4gICAgY2FsbGRhdGFfbGVuOiBldmVudC5kYXRhWzRdLFxuICAgIGNhbGxkYXRhOiBldmVudC5kYXRhLnNsaWNlKDUsIDUgKyBwYXJzZUludChldmVudC5kYXRhWzRdLCAxNikpLFxuICAgIHNhbHQ6IGV2ZW50LmRhdGFbZXZlbnQuZGF0YS5sZW5ndGggLSAxXVxuICB9O1xufVxuXG4vLyBzcmMvYWNjb3VudC9kZWZhdWx0LnRzXG52YXIgQWNjb3VudCA9IGNsYXNzIGV4dGVuZHMgUHJvdmlkZXIge1xuICBjb25zdHJ1Y3Rvcihwcm92aWRlck9yT3B0aW9ucywgYWRkcmVzcywgcGtPclNpZ25lciwgY2Fpcm9WZXJzaW9uKSB7XG4gICAgc3VwZXIocHJvdmlkZXJPck9wdGlvbnMpO1xuICAgIHRoaXMuZGVwbG95U2VsZiA9IHRoaXMuZGVwbG95QWNjb3VudDtcbiAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5zaWduZXIgPSB0eXBlb2YgcGtPclNpZ25lciA9PT0gXCJzdHJpbmdcIiB8fCBwa09yU2lnbmVyIGluc3RhbmNlb2YgVWludDhBcnJheSA/IG5ldyBTaWduZXIocGtPclNpZ25lcikgOiBwa09yU2lnbmVyO1xuICAgIGlmIChjYWlyb1ZlcnNpb24pIHtcbiAgICAgIHRoaXMuY2Fpcm9WZXJzaW9uID0gY2Fpcm9WZXJzaW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldE5vbmNlKGJsb2NrSWRlbnRpZmllcikge1xuICAgIHJldHVybiBzdXBlci5nZXROb25jZUZvckFkZHJlc3ModGhpcy5hZGRyZXNzLCBibG9ja0lkZW50aWZpZXIpO1xuICB9XG4gIGFzeW5jIGdldE5vbmNlU2FmZShub25jZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdG9CaWdJbnQobm9uY2UgPz8gYXdhaXQgdGhpcy5nZXROb25jZSgpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIDBuO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBDYWlybyB2ZXJzaW9uIGZyb20gdGhlIG5ldHdvcmsgYW5kIHNldHMgYGNhaXJvVmVyc2lvbmAgaWYgbm90IGFscmVhZHkgc2V0IGluIHRoZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gY2xhc3NIYXNoIGlmIHByb3ZpZGVkIGRldGVjdHMgQ2Fpcm8gdmVyc2lvbiBmcm9tIGNsYXNzSGFzaCwgb3RoZXJ3aXNlIGZyb20gdGhlIGFjY291bnQgYWRkcmVzc1xuICAgKi9cbiAgYXN5bmMgZ2V0Q2Fpcm9WZXJzaW9uKGNsYXNzSGFzaCkge1xuICAgIGlmICghdGhpcy5jYWlyb1ZlcnNpb24pIHtcbiAgICAgIGNvbnN0IHsgY2Fpcm8gfSA9IGNsYXNzSGFzaCA/IGF3YWl0IHN1cGVyLmdldENvbnRyYWN0VmVyc2lvbih2b2lkIDAsIGNsYXNzSGFzaCkgOiBhd2FpdCBzdXBlci5nZXRDb250cmFjdFZlcnNpb24odGhpcy5hZGRyZXNzKTtcbiAgICAgIHRoaXMuY2Fpcm9WZXJzaW9uID0gY2Fpcm87XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhaXJvVmVyc2lvbjtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZUZlZShjYWxscywgZXN0aW1hdGVGZWVEZXRhaWxzKSB7XG4gICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVJbnZva2VGZWUoY2FsbHMsIGVzdGltYXRlRmVlRGV0YWlscyk7XG4gIH1cbiAgYXN5bmMgZXN0aW1hdGVJbnZva2VGZWUoY2FsbHMsIHsgbm9uY2U6IHByb3ZpZGVkTm9uY2UsIGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IEFycmF5LmlzQXJyYXkoY2FsbHMpID8gY2FsbHMgOiBbY2FsbHNdO1xuICAgIGNvbnN0IG5vbmNlID0gdG9CaWdJbnQocHJvdmlkZWROb25jZSA/PyBhd2FpdCB0aGlzLmdldE5vbmNlKCkpO1xuICAgIGNvbnN0IHZlcnNpb24gPSB0b0JpZ0ludChmZWVUcmFuc2FjdGlvblZlcnNpb24pO1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBzaWduZXJEZXRhaWxzID0ge1xuICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgbm9uY2UsXG4gICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICB2ZXJzaW9uLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIGNhaXJvVmVyc2lvbjogYXdhaXQgdGhpcy5nZXRDYWlyb1ZlcnNpb24oKVxuICAgIH07XG4gICAgY29uc3QgaW52b2NhdGlvbiA9IGF3YWl0IHRoaXMuYnVpbGRJbnZvY2F0aW9uKHRyYW5zYWN0aW9ucywgc2lnbmVyRGV0YWlscyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXRJbnZva2VFc3RpbWF0ZUZlZShcbiAgICAgIHsgLi4uaW52b2NhdGlvbiB9LFxuICAgICAgeyB2ZXJzaW9uLCBub25jZSB9LFxuICAgICAgYmxvY2tJZGVudGlmaWVyLFxuICAgICAgc2tpcFZhbGlkYXRlXG4gICAgKTtcbiAgICBjb25zdCBzdWdnZXN0ZWRNYXhGZWUgPSBlc3RpbWF0ZWRGZWVUb01heEZlZShyZXNwb25zZS5vdmVyYWxsX2ZlZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgc3VnZ2VzdGVkTWF4RmVlXG4gICAgfTtcbiAgfVxuICBhc3luYyBlc3RpbWF0ZURlY2xhcmVGZWUoeyBjb250cmFjdCwgY2xhc3NIYXNoOiBwcm92aWRlZENsYXNzSGFzaCwgY2FzbSwgY29tcGlsZWRDbGFzc0hhc2ggfSwgeyBibG9ja0lkZW50aWZpZXIsIG5vbmNlOiBwcm92aWRlZE5vbmNlLCBza2lwVmFsaWRhdGUgfSA9IHt9KSB7XG4gICAgY29uc3Qgbm9uY2UgPSB0b0JpZ0ludChwcm92aWRlZE5vbmNlID8/IGF3YWl0IHRoaXMuZ2V0Tm9uY2UoKSk7XG4gICAgY29uc3QgdmVyc2lvbiA9ICFpc1NpZXJyYShjb250cmFjdCkgPyBmZWVUcmFuc2FjdGlvblZlcnNpb24gOiBmZWVUcmFuc2FjdGlvblZlcnNpb25fMjtcbiAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24gPSBhd2FpdCB0aGlzLmJ1aWxkRGVjbGFyZVBheWxvYWQoXG4gICAgICB7IGNsYXNzSGFzaDogcHJvdmlkZWRDbGFzc0hhc2gsIGNvbnRyYWN0LCBjYXNtLCBjb21waWxlZENsYXNzSGFzaCB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICAgIGNhaXJvVmVyc2lvbjogdm9pZCAwXG4gICAgICAgIC8vIHVudXNlZCBwYXJhbWV0ZXJcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZ2V0RGVjbGFyZUVzdGltYXRlRmVlKFxuICAgICAgZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24sXG4gICAgICB7IHZlcnNpb24sIG5vbmNlIH0sXG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBza2lwVmFsaWRhdGVcbiAgICApO1xuICAgIGNvbnN0IHN1Z2dlc3RlZE1heEZlZSA9IGVzdGltYXRlZEZlZVRvTWF4RmVlKHJlc3BvbnNlLm92ZXJhbGxfZmVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICBzdWdnZXN0ZWRNYXhGZWVcbiAgICB9O1xuICB9XG4gIGFzeW5jIGVzdGltYXRlQWNjb3VudERlcGxveUZlZSh7XG4gICAgY2xhc3NIYXNoLFxuICAgIGFkZHJlc3NTYWx0ID0gMCxcbiAgICBjb25zdHJ1Y3RvckNhbGxkYXRhID0gW10sXG4gICAgY29udHJhY3RBZGRyZXNzOiBwcm92aWRlZENvbnRyYWN0QWRkcmVzc1xuICB9LCB7IGJsb2NrSWRlbnRpZmllciwgc2tpcFZhbGlkYXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSB0b0JpZ0ludChmZWVUcmFuc2FjdGlvblZlcnNpb24pO1xuICAgIGNvbnN0IG5vbmNlID0gWkVSTztcbiAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuYnVpbGRBY2NvdW50RGVwbG95UGF5bG9hZChcbiAgICAgIHsgY2xhc3NIYXNoLCBhZGRyZXNzU2FsdCwgY29uc3RydWN0b3JDYWxsZGF0YSwgY29udHJhY3RBZGRyZXNzOiBwcm92aWRlZENvbnRyYWN0QWRkcmVzcyB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAvLyB1bnVzZWQgcGFyYW1ldGVyXG4gICAgICAgIG1heEZlZTogWkVSTyxcbiAgICAgICAgY2Fpcm9WZXJzaW9uOiB2b2lkIDBcbiAgICAgICAgLy8gdW51c2VkIHBhcmFtZXRlclxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUoXG4gICAgICB7IC4uLnBheWxvYWQgfSxcbiAgICAgIHsgdmVyc2lvbiwgbm9uY2UgfSxcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgICk7XG4gICAgY29uc3Qgc3VnZ2VzdGVkTWF4RmVlID0gZXN0aW1hdGVkRmVlVG9NYXhGZWUocmVzcG9uc2Uub3ZlcmFsbF9mZWUpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIHN1Z2dlc3RlZE1heEZlZVxuICAgIH07XG4gIH1cbiAgYXN5bmMgZXN0aW1hdGVEZXBsb3lGZWUocGF5bG9hZCwgdHJhbnNhY3Rpb25zRGV0YWlsKSB7XG4gICAgY29uc3QgY2FsbHMgPSB0aGlzLmJ1aWxkVURDQ29udHJhY3RQYXlsb2FkKHBheWxvYWQpO1xuICAgIHJldHVybiB0aGlzLmVzdGltYXRlSW52b2tlRmVlKGNhbGxzLCB0cmFuc2FjdGlvbnNEZXRhaWwpO1xuICB9XG4gIGFzeW5jIGVzdGltYXRlRmVlQnVsayhpbnZvY2F0aW9ucywgeyBub25jZSwgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUgfSA9IHt9KSB7XG4gICAgY29uc3QgYWNjb3VudEludm9jYXRpb25zID0gYXdhaXQgdGhpcy5hY2NvdW50SW52b2NhdGlvbnNGYWN0b3J5KGludm9jYXRpb25zLCB7XG4gICAgICB2ZXJzaW9uczogW2ZlZVRyYW5zYWN0aW9uVmVyc2lvbiwgZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzJdLFxuICAgICAgbm9uY2UsXG4gICAgICBibG9ja0lkZW50aWZpZXJcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmdldEVzdGltYXRlRmVlQnVsayhhY2NvdW50SW52b2NhdGlvbnMsIHtcbiAgICAgIGJsb2NrSWRlbnRpZmllcixcbiAgICAgIHNraXBWYWxpZGF0ZVxuICAgIH0pO1xuICAgIHJldHVybiBbXS5jb25jYXQocmVzcG9uc2UpLm1hcCgoZWxlbSkgPT4ge1xuICAgICAgY29uc3Qgc3VnZ2VzdGVkTWF4RmVlID0gZXN0aW1hdGVkRmVlVG9NYXhGZWUoZWxlbS5vdmVyYWxsX2ZlZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbGVtLFxuICAgICAgICBzdWdnZXN0ZWRNYXhGZWVcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgYnVpbGRJbnZvY2F0aW9uKGNhbGwsIHNpZ25lckRldGFpbHMpIHtcbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YShjYWxsLCBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduVHJhbnNhY3Rpb24oY2FsbCwgc2lnbmVyRGV0YWlscyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICBzaWduYXR1cmVcbiAgICB9O1xuICB9XG4gIGFzeW5jIGV4ZWN1dGUoY2FsbHMsIGFiaXMgPSB2b2lkIDAsIHRyYW5zYWN0aW9uc0RldGFpbCA9IHt9KSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gQXJyYXkuaXNBcnJheShjYWxscykgPyBjYWxscyA6IFtjYWxsc107XG4gICAgY29uc3Qgbm9uY2UgPSB0b0JpZ0ludCh0cmFuc2FjdGlvbnNEZXRhaWwubm9uY2UgPz8gYXdhaXQgdGhpcy5nZXROb25jZSgpKTtcbiAgICBjb25zdCBtYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAgeyB0eXBlOiBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqLywgcGF5bG9hZDogY2FsbHMgfSxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbFxuICAgICk7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRvQmlnSW50KHRyYW5zYWN0aW9uVmVyc2lvbik7XG4gICAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgIGNvbnN0IHNpZ25lckRldGFpbHMgPSB7XG4gICAgICB3YWxsZXRBZGRyZXNzOiB0aGlzLmFkZHJlc3MsXG4gICAgICBub25jZSxcbiAgICAgIG1heEZlZSxcbiAgICAgIHZlcnNpb24sXG4gICAgICBjaGFpbklkLFxuICAgICAgY2Fpcm9WZXJzaW9uOiBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpXG4gICAgfTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25zLCBzaWduZXJEZXRhaWxzLCBhYmlzKTtcbiAgICBjb25zdCBjYWxsZGF0YSA9IGdldEV4ZWN1dGVDYWxsZGF0YSh0cmFuc2FjdGlvbnMsIGF3YWl0IHRoaXMuZ2V0Q2Fpcm9WZXJzaW9uKCkpO1xuICAgIHJldHVybiB0aGlzLmludm9rZUZ1bmN0aW9uKFxuICAgICAgeyBjb250cmFjdEFkZHJlc3M6IHRoaXMuYWRkcmVzcywgY2FsbGRhdGEsIHNpZ25hdHVyZSB9LFxuICAgICAge1xuICAgICAgICBub25jZSxcbiAgICAgICAgbWF4RmVlLFxuICAgICAgICB2ZXJzaW9uXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRmlyc3QgY2hlY2sgaWYgY29udHJhY3QgaXMgYWxyZWFkeSBkZWNsYXJlZCwgaWYgbm90IGRlY2xhcmUgaXRcbiAgICogSWYgY29udHJhY3QgYWxyZWFkeSBkZWNsYXJlZCByZXR1cm5lZCB0cmFuc2FjdGlvbl9oYXNoIGlzICcnLlxuICAgKiBNZXRob2Qgd2lsbCBwYXNzIGV2ZW4gaWYgY29udHJhY3QgaXMgYWxyZWFkeSBkZWNsYXJlZFxuICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25zRGV0YWlsIChvcHRpb25hbClcbiAgICovXG4gIGFzeW5jIGRlY2xhcmVJZk5vdChwYXlsb2FkLCB0cmFuc2FjdGlvbnNEZXRhaWwgPSB7fSkge1xuICAgIGNvbnN0IGRlY2xhcmVDb250cmFjdFBheWxvYWQgPSBleHRyYWN0Q29udHJhY3RIYXNoZXMocGF5bG9hZCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuZ2V0Q2xhc3NCeUhhc2goZGVjbGFyZUNvbnRyYWN0UGF5bG9hZC5jbGFzc0hhc2gpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWNsYXJlKHBheWxvYWQsIHRyYW5zYWN0aW9uc0RldGFpbCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2FjdGlvbl9oYXNoOiBcIlwiLFxuICAgICAgY2xhc3NfaGFzaDogZGVjbGFyZUNvbnRyYWN0UGF5bG9hZC5jbGFzc0hhc2hcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRlY2xhcmUocGF5bG9hZCwgdHJhbnNhY3Rpb25zRGV0YWlsID0ge30pIHtcbiAgICBjb25zdCBkZWNsYXJlQ29udHJhY3RQYXlsb2FkID0gZXh0cmFjdENvbnRyYWN0SGFzaGVzKHBheWxvYWQpO1xuICAgIGNvbnN0IGRldGFpbHMgPSB7fTtcbiAgICBkZXRhaWxzLm5vbmNlID0gdG9CaWdJbnQodHJhbnNhY3Rpb25zRGV0YWlsLm5vbmNlID8/IGF3YWl0IHRoaXMuZ2V0Tm9uY2UoKSk7XG4gICAgZGV0YWlscy5tYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAge1xuICAgICAgICB0eXBlOiBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovLFxuICAgICAgICBwYXlsb2FkOiBkZWNsYXJlQ29udHJhY3RQYXlsb2FkXG4gICAgICB9LFxuICAgICAgdHJhbnNhY3Rpb25zRGV0YWlsXG4gICAgKTtcbiAgICBkZXRhaWxzLnZlcnNpb24gPSAhaXNTaWVycmEocGF5bG9hZC5jb250cmFjdCkgPyB0cmFuc2FjdGlvblZlcnNpb24gOiB0cmFuc2FjdGlvblZlcnNpb25fMjtcbiAgICBkZXRhaWxzLmNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBkZWNsYXJlQ29udHJhY3RUcmFuc2FjdGlvbiA9IGF3YWl0IHRoaXMuYnVpbGREZWNsYXJlUGF5bG9hZChkZWNsYXJlQ29udHJhY3RQYXlsb2FkLCB7XG4gICAgICAuLi5kZXRhaWxzLFxuICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2Fpcm9WZXJzaW9uOiB2b2lkIDBcbiAgICAgIC8vIHVudXNlZCBwYXJhbWV0ZXJcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5kZWNsYXJlQ29udHJhY3QoZGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb24sIGRldGFpbHMpO1xuICB9XG4gIGFzeW5jIGRlcGxveShwYXlsb2FkLCBkZXRhaWxzKSB7XG4gICAgY29uc3QgcGFyYW1zID0gW10uY29uY2F0KHBheWxvYWQpLm1hcCgoaXQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICBzYWx0LFxuICAgICAgICB1bmlxdWUgPSB0cnVlLFxuICAgICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhID0gW11cbiAgICAgIH0gPSBpdDtcbiAgICAgIGNvbnN0IGNvbXBpbGVkQ29uc3RydWN0b3JDYWxsRGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY29uc3RydWN0b3JDYWxsZGF0YSk7XG4gICAgICBjb25zdCBkZXBsb3lTYWx0ID0gc2FsdCA/PyByYW5kb21BZGRyZXNzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYWxsOiB7XG4gICAgICAgICAgY29udHJhY3RBZGRyZXNzOiBVREMuQUREUkVTUyxcbiAgICAgICAgICBlbnRyeXBvaW50OiBVREMuRU5UUllQT0lOVCxcbiAgICAgICAgICBjYWxsZGF0YTogW1xuICAgICAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICAgICAgZGVwbG95U2FsdCxcbiAgICAgICAgICAgIHRvQ2Fpcm9Cb29sKHVuaXF1ZSksXG4gICAgICAgICAgICBjb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGEubGVuZ3RoLFxuICAgICAgICAgICAgLi4uY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBhZGRyZXNzOiBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaChcbiAgICAgICAgICB1bmlxdWUgPyBzdGFya0N1cnZlLnBlZGVyc2VuKHRoaXMuYWRkcmVzcywgZGVwbG95U2FsdCkgOiBkZXBsb3lTYWx0LFxuICAgICAgICAgIGNsYXNzSGFzaCxcbiAgICAgICAgICBjb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGEsXG4gICAgICAgICAgdW5pcXVlID8gVURDLkFERFJFU1MgOiAwXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2FsbHMgPSBwYXJhbXMubWFwKChpdCkgPT4gaXQuY2FsbCk7XG4gICAgY29uc3QgYWRkcmVzc2VzID0gcGFyYW1zLm1hcCgoaXQpID0+IGl0LmFkZHJlc3MpO1xuICAgIGNvbnN0IGludm9rZVJlc3BvbnNlID0gYXdhaXQgdGhpcy5leGVjdXRlKGNhbGxzLCB2b2lkIDAsIGRldGFpbHMpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5pbnZva2VSZXNwb25zZSxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IGFkZHJlc3Nlc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgZGVwbG95Q29udHJhY3QocGF5bG9hZCwgZGV0YWlscykge1xuICAgIGNvbnN0IGRlcGxveVR4ID0gYXdhaXQgdGhpcy5kZXBsb3kocGF5bG9hZCwgZGV0YWlscyk7XG4gICAgY29uc3QgdHhSZWNlaXB0ID0gYXdhaXQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24oZGVwbG95VHgudHJhbnNhY3Rpb25faGFzaCk7XG4gICAgcmV0dXJuIHBhcnNlVURDRXZlbnQodHhSZWNlaXB0KTtcbiAgfVxuICBhc3luYyBkZWNsYXJlQW5kRGVwbG95KHBheWxvYWQsIGRldGFpbHMpIHtcbiAgICBjb25zdCB7IGNvbnN0cnVjdG9yQ2FsbGRhdGEsIHNhbHQsIHVuaXF1ZSB9ID0gcGF5bG9hZDtcbiAgICBsZXQgZGVjbGFyZSA9IGF3YWl0IHRoaXMuZGVjbGFyZUlmTm90KHBheWxvYWQsIGRldGFpbHMpO1xuICAgIGlmIChkZWNsYXJlLnRyYW5zYWN0aW9uX2hhc2ggIT09IFwiXCIpIHtcbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24oZGVjbGFyZS50cmFuc2FjdGlvbl9oYXNoKTtcbiAgICAgIGRlY2xhcmUgPSB7IC4uLmRlY2xhcmUsIC4uLnR4IH07XG4gICAgfVxuICAgIGNvbnN0IGRlcGxveSA9IGF3YWl0IHRoaXMuZGVwbG95Q29udHJhY3QoXG4gICAgICB7IGNsYXNzSGFzaDogZGVjbGFyZS5jbGFzc19oYXNoLCBzYWx0LCB1bmlxdWUsIGNvbnN0cnVjdG9yQ2FsbGRhdGEgfSxcbiAgICAgIGRldGFpbHNcbiAgICApO1xuICAgIHJldHVybiB7IGRlY2xhcmU6IHsgLi4uZGVjbGFyZSB9LCBkZXBsb3kgfTtcbiAgfVxuICBhc3luYyBkZXBsb3lBY2NvdW50KHtcbiAgICBjbGFzc0hhc2gsXG4gICAgY29uc3RydWN0b3JDYWxsZGF0YSA9IFtdLFxuICAgIGFkZHJlc3NTYWx0ID0gMCxcbiAgICBjb250cmFjdEFkZHJlc3M6IHByb3ZpZGVkQ29udHJhY3RBZGRyZXNzXG4gIH0sIHRyYW5zYWN0aW9uc0RldGFpbCA9IHt9KSB7XG4gICAgY29uc3QgdmVyc2lvbiA9IHRvQmlnSW50KHRyYW5zYWN0aW9uVmVyc2lvbik7XG4gICAgY29uc3Qgbm9uY2UgPSBaRVJPO1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICBjb25zdCBjb21waWxlZENhbGxkYXRhID0gQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgICBjb25zdCBjb250cmFjdEFkZHJlc3MgPSBwcm92aWRlZENvbnRyYWN0QWRkcmVzcyA/PyBjYWxjdWxhdGVDb250cmFjdEFkZHJlc3NGcm9tSGFzaChhZGRyZXNzU2FsdCwgY2xhc3NIYXNoLCBjb21waWxlZENhbGxkYXRhLCAwKTtcbiAgICBjb25zdCBtYXhGZWUgPSB0cmFuc2FjdGlvbnNEZXRhaWwubWF4RmVlID8/IGF3YWl0IHRoaXMuZ2V0U3VnZ2VzdGVkTWF4RmVlKFxuICAgICAge1xuICAgICAgICB0eXBlOiBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8sXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBjbGFzc0hhc2gsXG4gICAgICAgICAgY29uc3RydWN0b3JDYWxsZGF0YTogY29tcGlsZWRDYWxsZGF0YSxcbiAgICAgICAgICBhZGRyZXNzU2FsdCxcbiAgICAgICAgICBjb250cmFjdEFkZHJlc3NcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zYWN0aW9uc0RldGFpbFxuICAgICk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5zaWduZXIuc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgICBjbGFzc0hhc2gsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhOiBjb21waWxlZENhbGxkYXRhLFxuICAgICAgY29udHJhY3RBZGRyZXNzLFxuICAgICAgYWRkcmVzc1NhbHQsXG4gICAgICBjaGFpbklkLFxuICAgICAgbWF4RmVlLFxuICAgICAgdmVyc2lvbixcbiAgICAgIG5vbmNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZGVwbG95QWNjb3VudENvbnRyYWN0KFxuICAgICAgeyBjbGFzc0hhc2gsIGFkZHJlc3NTYWx0LCBjb25zdHJ1Y3RvckNhbGxkYXRhLCBzaWduYXR1cmUgfSxcbiAgICAgIHtcbiAgICAgICAgbm9uY2UsXG4gICAgICAgIG1heEZlZSxcbiAgICAgICAgdmVyc2lvblxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc2lnbk1lc3NhZ2UodHlwZWREYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNpZ25NZXNzYWdlKHR5cGVkRGF0YSwgdGhpcy5hZGRyZXNzKTtcbiAgfVxuICBhc3luYyBoYXNoTWVzc2FnZSh0eXBlZERhdGEpIHtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZUhhc2godHlwZWREYXRhLCB0aGlzLmFkZHJlc3MpO1xuICB9XG4gIGFzeW5jIHZlcmlmeU1lc3NhZ2VIYXNoKGhhc2gsIHNpZ25hdHVyZSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmNhbGxDb250cmFjdCh7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBlbnRyeXBvaW50OiBcImlzVmFsaWRTaWduYXR1cmVcIixcbiAgICAgICAgY2FsbGRhdGE6IENhbGxEYXRhLmNvbXBpbGUoe1xuICAgICAgICAgIGhhc2g6IHRvQmlnSW50KGhhc2gpLnRvU3RyaW5nKCksXG4gICAgICAgICAgc2lnbmF0dXJlOiBmb3JtYXRTaWduYXR1cmUoc2lnbmF0dXJlKVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgdmVyaWZ5TWVzc2FnZSh0eXBlZERhdGEsIHNpZ25hdHVyZSkge1xuICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLmhhc2hNZXNzYWdlKHR5cGVkRGF0YSk7XG4gICAgcmV0dXJuIHRoaXMudmVyaWZ5TWVzc2FnZUhhc2goaGFzaCwgc2lnbmF0dXJlKTtcbiAgfVxuICBhc3luYyBnZXRTdWdnZXN0ZWRNYXhGZWUoeyB0eXBlLCBwYXlsb2FkIH0sIGRldGFpbHMpIHtcbiAgICBsZXQgZmVlRXN0aW1hdGU7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiSU5WT0tFX0ZVTkNUSU9OXCIgLyogSU5WT0tFICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVJbnZva2VGZWUocGF5bG9hZCwgZGV0YWlscyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkRFQ0xBUkVcIiAvKiBERUNMQVJFICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVEZWNsYXJlRmVlKHBheWxvYWQsIGRldGFpbHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJERVBMT1lfQUNDT1VOVFwiIC8qIERFUExPWV9BQ0NPVU5UICovOlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IGF3YWl0IHRoaXMuZXN0aW1hdGVBY2NvdW50RGVwbG95RmVlKHBheWxvYWQsIGRldGFpbHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJERVBMT1lcIiAvKiBERVBMT1kgKi86XG4gICAgICAgIGZlZUVzdGltYXRlID0gYXdhaXQgdGhpcy5lc3RpbWF0ZURlcGxveUZlZShwYXlsb2FkLCBkZXRhaWxzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBmZWVFc3RpbWF0ZSA9IHsgc3VnZ2VzdGVkTWF4RmVlOiBaRVJPLCBvdmVyYWxsX2ZlZTogWkVSTyB9O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGZlZUVzdGltYXRlLnN1Z2dlc3RlZE1heEZlZTtcbiAgfVxuICAvKipcbiAgICogd2lsbCBiZSByZW5hbWVkIHRvIGJ1aWxkRGVjbGFyZUNvbnRyYWN0VHJhbnNhY3Rpb25cbiAgICovXG4gIGFzeW5jIGJ1aWxkRGVjbGFyZVBheWxvYWQocGF5bG9hZCwgeyBub25jZSwgY2hhaW5JZCwgdmVyc2lvbiwgd2FsbGV0QWRkcmVzcywgbWF4RmVlIH0pIHtcbiAgICBjb25zdCB7IGNsYXNzSGFzaCwgY29udHJhY3QsIGNvbXBpbGVkQ2xhc3NIYXNoIH0gPSBleHRyYWN0Q29udHJhY3RIYXNoZXMocGF5bG9hZCk7XG4gICAgY29uc3QgY29tcHJlc3NlZENvbXBpbGVkQ29udHJhY3QgPSBwYXJzZUNvbnRyYWN0KGNvbnRyYWN0KTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnNpZ25lci5zaWduRGVjbGFyZVRyYW5zYWN0aW9uKHtcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIGNvbXBpbGVkQ2xhc3NIYXNoLFxuICAgICAgc2VuZGVyQWRkcmVzczogd2FsbGV0QWRkcmVzcyxcbiAgICAgIGNoYWluSWQsXG4gICAgICBtYXhGZWUsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgbm9uY2VcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZGVyQWRkcmVzczogd2FsbGV0QWRkcmVzcyxcbiAgICAgIHNpZ25hdHVyZSxcbiAgICAgIGNvbnRyYWN0OiBjb21wcmVzc2VkQ29tcGlsZWRDb250cmFjdCxcbiAgICAgIGNvbXBpbGVkQ2xhc3NIYXNoXG4gICAgfTtcbiAgfVxuICBhc3luYyBidWlsZEFjY291bnREZXBsb3lQYXlsb2FkKHtcbiAgICBjbGFzc0hhc2gsXG4gICAgYWRkcmVzc1NhbHQgPSAwLFxuICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGEgPSBbXSxcbiAgICBjb250cmFjdEFkZHJlc3M6IHByb3ZpZGVkQ29udHJhY3RBZGRyZXNzXG4gIH0sIHsgbm9uY2UsIGNoYWluSWQsIHZlcnNpb24sIG1heEZlZSB9KSB7XG4gICAgY29uc3QgY29tcGlsZWRDYWxsZGF0YSA9IENhbGxEYXRhLmNvbXBpbGUoY29uc3RydWN0b3JDYWxsZGF0YSk7XG4gICAgY29uc3QgY29udHJhY3RBZGRyZXNzID0gcHJvdmlkZWRDb250cmFjdEFkZHJlc3MgPz8gY2FsY3VsYXRlQ29udHJhY3RBZGRyZXNzRnJvbUhhc2goYWRkcmVzc1NhbHQsIGNsYXNzSGFzaCwgY29tcGlsZWRDYWxsZGF0YSwgMCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5zaWduZXIuc2lnbkRlcGxveUFjY291bnRUcmFuc2FjdGlvbih7XG4gICAgICBjbGFzc0hhc2gsXG4gICAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgICBjaGFpbklkLFxuICAgICAgbWF4RmVlLFxuICAgICAgdmVyc2lvbixcbiAgICAgIG5vbmNlLFxuICAgICAgYWRkcmVzc1NhbHQsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhOiBjb21waWxlZENhbGxkYXRhXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzSGFzaCxcbiAgICAgIGFkZHJlc3NTYWx0LFxuICAgICAgY29uc3RydWN0b3JDYWxsZGF0YTogY29tcGlsZWRDYWxsZGF0YSxcbiAgICAgIHNpZ25hdHVyZVxuICAgIH07XG4gIH1cbiAgYnVpbGRVRENDb250cmFjdFBheWxvYWQocGF5bG9hZCkge1xuICAgIGNvbnN0IGNhbGxzID0gW10uY29uY2F0KHBheWxvYWQpLm1hcCgoaXQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NIYXNoLFxuICAgICAgICBzYWx0ID0gXCIwXCIsXG4gICAgICAgIHVuaXF1ZSA9IHRydWUsXG4gICAgICAgIGNvbnN0cnVjdG9yQ2FsbGRhdGEgPSBbXVxuICAgICAgfSA9IGl0O1xuICAgICAgY29uc3QgY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhID0gQ2FsbERhdGEuY29tcGlsZShjb25zdHJ1Y3RvckNhbGxkYXRhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogVURDLkFERFJFU1MsXG4gICAgICAgIGVudHJ5cG9pbnQ6IFVEQy5FTlRSWVBPSU5ULFxuICAgICAgICBjYWxsZGF0YTogW1xuICAgICAgICAgIGNsYXNzSGFzaCxcbiAgICAgICAgICBzYWx0LFxuICAgICAgICAgIHRvQ2Fpcm9Cb29sKHVuaXF1ZSksXG4gICAgICAgICAgY29tcGlsZWRDb25zdHJ1Y3RvckNhbGxEYXRhLmxlbmd0aCxcbiAgICAgICAgICAuLi5jb21waWxlZENvbnN0cnVjdG9yQ2FsbERhdGFcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2FsbHM7XG4gIH1cbiAgYXN5bmMgc2ltdWxhdGVUcmFuc2FjdGlvbihpbnZvY2F0aW9ucywgeyBub25jZSwgYmxvY2tJZGVudGlmaWVyLCBza2lwVmFsaWRhdGUsIHNraXBFeGVjdXRlIH0gPSB7fSkge1xuICAgIGNvbnN0IGFjY291bnRJbnZvY2F0aW9ucyA9IGF3YWl0IHRoaXMuYWNjb3VudEludm9jYXRpb25zRmFjdG9yeShpbnZvY2F0aW9ucywge1xuICAgICAgdmVyc2lvbnM6IFt0cmFuc2FjdGlvblZlcnNpb24sIHRyYW5zYWN0aW9uVmVyc2lvbl8yXSxcbiAgICAgIG5vbmNlLFxuICAgICAgYmxvY2tJZGVudGlmaWVyXG4gICAgfSk7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNpbXVsYXRlVHJhbnNhY3Rpb24oYWNjb3VudEludm9jYXRpb25zLCB7XG4gICAgICBibG9ja0lkZW50aWZpZXIsXG4gICAgICBza2lwVmFsaWRhdGUsXG4gICAgICBza2lwRXhlY3V0ZVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGFjY291bnRJbnZvY2F0aW9uc0ZhY3RvcnkoaW52b2NhdGlvbnMsIHsgdmVyc2lvbnMsIG5vbmNlLCBibG9ja0lkZW50aWZpZXIgfSkge1xuICAgIGNvbnN0IHZlcnNpb24gPSB2ZXJzaW9uc1swXTtcbiAgICBjb25zdCBzYWZlTm9uY2UgPSBhd2FpdCB0aGlzLmdldE5vbmNlU2FmZShub25jZSk7XG4gICAgY29uc3QgY2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgIGNvbnN0IHR4MFBheWxvYWQgPSBcInBheWxvYWRcIiBpbiBpbnZvY2F0aW9uc1swXSA/IGludm9jYXRpb25zWzBdLnBheWxvYWQgOiBpbnZvY2F0aW9uc1swXTtcbiAgICBjb25zdCBjYWlyb1ZlcnNpb24gPSBpbnZvY2F0aW9uc1swXS50eXBlID09PSBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8gPyBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbih0eDBQYXlsb2FkLmNsYXNzSGFzaCkgOiBhd2FpdCB0aGlzLmdldENhaXJvVmVyc2lvbigpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIFtdLmNvbmNhdChpbnZvY2F0aW9ucykubWFwKGFzeW5jICh0cmFuc2FjdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdHhQYXlsb2FkID0gXCJwYXlsb2FkXCIgaW4gdHJhbnNhY3Rpb24gPyB0cmFuc2FjdGlvbi5wYXlsb2FkIDogdHJhbnNhY3Rpb247XG4gICAgICAgIGNvbnN0IHNpZ25lckRldGFpbHMgPSB7XG4gICAgICAgICAgd2FsbGV0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgIG5vbmNlOiB0b0JpZ0ludChOdW1iZXIoc2FmZU5vbmNlKSArIGluZGV4KSxcbiAgICAgICAgICBtYXhGZWU6IFpFUk8sXG4gICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgIGNhaXJvVmVyc2lvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21tb24gPSB7XG4gICAgICAgICAgdHlwZTogdHJhbnNhY3Rpb24udHlwZSxcbiAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgIG5vbmNlOiB0b0JpZ0ludChOdW1iZXIoc2FmZU5vbmNlKSArIGluZGV4KSxcbiAgICAgICAgICBibG9ja0lkZW50aWZpZXJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnR5cGUgPT09IFwiSU5WT0tFX0ZVTkNUSU9OXCIgLyogSU5WT0tFICovKSB7XG4gICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuYnVpbGRJbnZvY2F0aW9uKFxuICAgICAgICAgICAgW10uY29uY2F0KHR4UGF5bG9hZCksXG4gICAgICAgICAgICBzaWduZXJEZXRhaWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uY29tbW9uLFxuICAgICAgICAgICAgLi4ucGF5bG9hZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnR5cGUgPT09IFwiREVDTEFSRVwiIC8qIERFQ0xBUkUgKi8pIHtcbiAgICAgICAgICBzaWduZXJEZXRhaWxzLnZlcnNpb24gPSAhaXNTaWVycmEodHhQYXlsb2FkLmNvbnRyYWN0KSA/IHRvQmlnSW50KHZlcnNpb25zWzBdKSA6IHRvQmlnSW50KHZlcnNpb25zWzFdKTtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5idWlsZERlY2xhcmVQYXlsb2FkKHR4UGF5bG9hZCwgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICB2ZXJzaW9uOiBzaWduZXJEZXRhaWxzLnZlcnNpb25cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSBcIkRFUExPWV9BQ0NPVU5UXCIgLyogREVQTE9ZX0FDQ09VTlQgKi8pIHtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5idWlsZEFjY291bnREZXBsb3lQYXlsb2FkKHR4UGF5bG9hZCwgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50eXBlID09PSBcIkRFUExPWVwiIC8qIERFUExPWSAqLykge1xuICAgICAgICAgIGNvbnN0IGNhbGxzID0gdGhpcy5idWlsZFVEQ0NvbnRyYWN0UGF5bG9hZCh0eFBheWxvYWQpO1xuICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCB0aGlzLmJ1aWxkSW52b2NhdGlvbihjYWxscywgc2lnbmVyRGV0YWlscyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vbixcbiAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICB0eXBlOiBcIklOVk9LRV9GVU5DVElPTlwiIC8qIElOVk9LRSAqL1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IoYGFjY291bnRJbnZvY2F0aW9uc0ZhY3Rvcnk6IHVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGU6ICR7dHJhbnNhY3Rpb259YCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZ2V0U3RhcmtOYW1lKGFkZHJlc3MgPSB0aGlzLmFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0U3RhcmtOYW1lKGFkZHJlc3MsIFN0YXJrbmV0SWRDb250cmFjdDIpO1xuICB9XG59O1xuXG4vLyBzcmMvcHJvdmlkZXIvaW50ZXJmYWNlLnRzXG52YXIgUHJvdmlkZXJJbnRlcmZhY2UgPSBjbGFzcyB7XG59O1xuXG4vLyBzcmMvcHJvdmlkZXIvaW5kZXgudHNcbnZhciBkZWZhdWx0UHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIoeyBycGM6IHsgZGVmYXVsdDogdHJ1ZSB9IH0pO1xuXG4vLyBzcmMvYWNjb3VudC9pbnRlcmZhY2UudHNcbnZhciBBY2NvdW50SW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBQcm92aWRlckludGVyZmFjZSB7XG59O1xuXG4vLyBzcmMvdXRpbHMvZXZlbnRzL2luZGV4LnRzXG52YXIgZXZlbnRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGV2ZW50c19leHBvcnRzLCB7XG4gIGdldEFiaUV2ZW50czogKCkgPT4gZ2V0QWJpRXZlbnRzLFxuICBwYXJzZUV2ZW50czogKCkgPT4gcGFyc2VFdmVudHNcbn0pO1xuZnVuY3Rpb24gZ2V0QWJpRXZlbnRzKGFiaSkge1xuICByZXR1cm4gYWJpLmZpbHRlcigoYWJpRW50cnkpID0+IGFiaUVudHJ5LnR5cGUgPT09IFwiZXZlbnRcIiAmJiAoYWJpRW50cnkuc2l6ZSB8fCBhYmlFbnRyeS5raW5kICE9PSBcImVudW1cIikpLnJlZHVjZSgoYWNjLCBhYmlFbnRyeSkgPT4ge1xuICAgIGNvbnN0IGVudHJ5TmFtZSA9IGFiaUVudHJ5Lm5hbWUuc2xpY2UoYWJpRW50cnkubmFtZS5sYXN0SW5kZXhPZihcIjpcIikgKyAxKTtcbiAgICBjb25zdCBhYmlFbnRyeU1vZCA9IHsgLi4uYWJpRW50cnkgfTtcbiAgICBhYmlFbnRyeU1vZC5uYW1lID0gZW50cnlOYW1lO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5hY2MsXG4gICAgICBbYWRkSGV4UHJlZml4KHN0YXJrQ3VydmUua2VjY2FrKHV0ZjhUb0FycmF5KGVudHJ5TmFtZSkpLnRvU3RyaW5nKDE2KSldOiBhYmlFbnRyeU1vZFxuICAgIH07XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlRXZlbnRzKHByb3ZpZGVyUmVjZWl2ZWRFdmVudHMsIGFiaUV2ZW50cywgYWJpU3RydWN0cywgYWJpRW51bXMpIHtcbiAgY29uc3QgcmV0ID0gcHJvdmlkZXJSZWNlaXZlZEV2ZW50cy5mbGF0KCkucmVkdWNlKChhY2MsIHJlY0V2ZW50KSA9PiB7XG4gICAgY29uc3QgYWJpRXZlbnQgPSBhYmlFdmVudHNbcmVjRXZlbnQua2V5c1swXV07XG4gICAgaWYgKCFhYmlFdmVudCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkRXZlbnQgPSB7fTtcbiAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXSA9IHt9O1xuICAgIHJlY0V2ZW50LmtleXMuc2hpZnQoKTtcbiAgICBjb25zdCBrZXlzSXRlciA9IHJlY0V2ZW50LmtleXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGNvbnN0IGRhdGFJdGVyID0gcmVjRXZlbnQuZGF0YVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgY29uc3QgYWJpRXZlbnRLZXlzID0gYWJpRXZlbnQubWVtYmVycz8uZmlsdGVyKChpdCkgPT4gaXQua2luZCA9PT0gXCJrZXlcIikgfHwgYWJpRXZlbnQua2V5cztcbiAgICBjb25zdCBhYmlFdmVudERhdGEgPSBhYmlFdmVudC5tZW1iZXJzPy5maWx0ZXIoKGl0KSA9PiBpdC5raW5kID09PSBcImRhdGFcIikgfHwgYWJpRXZlbnQuZGF0YTtcbiAgICBhYmlFdmVudEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXVtrZXkubmFtZV0gPSByZXNwb25zZVBhcnNlcihcbiAgICAgICAga2V5c0l0ZXIsXG4gICAgICAgIGtleSxcbiAgICAgICAgYWJpU3RydWN0cyxcbiAgICAgICAgYWJpRW51bXMsXG4gICAgICAgIHBhcnNlZEV2ZW50W2FiaUV2ZW50Lm5hbWVdXG4gICAgICApO1xuICAgIH0pO1xuICAgIGFiaUV2ZW50RGF0YS5mb3JFYWNoKChkYXRhKSA9PiB7XG4gICAgICBwYXJzZWRFdmVudFthYmlFdmVudC5uYW1lXVtkYXRhLm5hbWVdID0gcmVzcG9uc2VQYXJzZXIoXG4gICAgICAgIGRhdGFJdGVyLFxuICAgICAgICBkYXRhLFxuICAgICAgICBhYmlTdHJ1Y3RzLFxuICAgICAgICBhYmlFbnVtcyxcbiAgICAgICAgcGFyc2VkRXZlbnRbYWJpRXZlbnQubmFtZV1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgYWNjLnB1c2gocGFyc2VkRXZlbnQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gc3JjL2NvbnRyYWN0L2RlZmF1bHQudHNcbnZhciBzcGxpdEFyZ3NBbmRPcHRpb25zID0gKGFyZ3MpID0+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICBcImJsb2NrSWRlbnRpZmllclwiLFxuICAgIFwicGFyc2VSZXF1ZXN0XCIsXG4gICAgXCJwYXJzZVJlc3BvbnNlXCIsXG4gICAgXCJmb3JtYXRSZXNwb25zZVwiLFxuICAgIFwibWF4RmVlXCIsXG4gICAgXCJub25jZVwiLFxuICAgIFwic2lnbmF0dXJlXCIsXG4gICAgXCJhZGRyZXNzU2FsdFwiXG4gIF07XG4gIGNvbnN0IGxhc3RBcmcgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gIGlmICh0eXBlb2YgbGFzdEFyZyA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLnNvbWUoKHgpID0+IHggaW4gbGFzdEFyZykpIHtcbiAgICByZXR1cm4geyBhcmdzLCBvcHRpb25zOiBhcmdzLnBvcCgpIH07XG4gIH1cbiAgcmV0dXJuIHsgYXJncyB9O1xufTtcbmZ1bmN0aW9uIGJ1aWxkQ2FsbChjb250cmFjdCwgZnVuY3Rpb25BYmkpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzcGxpdEFyZ3NBbmRPcHRpb25zKGFyZ3MpO1xuICAgIHJldHVybiBjb250cmFjdC5jYWxsKGZ1bmN0aW9uQWJpLm5hbWUsIHBhcmFtcy5hcmdzLCB7XG4gICAgICBwYXJzZVJlcXVlc3Q6IHRydWUsXG4gICAgICBwYXJzZVJlc3BvbnNlOiB0cnVlLFxuICAgICAgLi4ucGFyYW1zLm9wdGlvbnNcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkSW52b2tlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSkge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHNwbGl0QXJnc0FuZE9wdGlvbnMoYXJncyk7XG4gICAgcmV0dXJuIGNvbnRyYWN0Lmludm9rZShmdW5jdGlvbkFiaS5uYW1lLCBwYXJhbXMuYXJncywge1xuICAgICAgcGFyc2VSZXF1ZXN0OiB0cnVlLFxuICAgICAgLi4ucGFyYW1zLm9wdGlvbnNcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRGVmYXVsdChjb250cmFjdCwgZnVuY3Rpb25BYmkpIHtcbiAgaWYgKGZ1bmN0aW9uQWJpLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIgfHwgZnVuY3Rpb25BYmkuc3RhdGVfbXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIpIHtcbiAgICByZXR1cm4gYnVpbGRDYWxsKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSk7XG4gIH1cbiAgcmV0dXJuIGJ1aWxkSW52b2tlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSk7XG59XG5mdW5jdGlvbiBidWlsZFBvcHVsYXRlKGNvbnRyYWN0LCBmdW5jdGlvbkFiaSkge1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIHJldHVybiBjb250cmFjdC5wb3B1bGF0ZShmdW5jdGlvbkFiaS5uYW1lLCBhcmdzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRXN0aW1hdGUoY29udHJhY3QsIGZ1bmN0aW9uQWJpKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGNvbnRyYWN0LmVzdGltYXRlKGZ1bmN0aW9uQWJpLm5hbWUsIGFyZ3MpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q2FsbGRhdGEoYXJncywgY2FsbGJhY2spIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykgJiYgXCJfX2NvbXBpbGVkX19cIiBpbiBhcmdzKVxuICAgIHJldHVybiBhcmdzO1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSAmJiBBcnJheS5pc0FycmF5KGFyZ3NbMF0pICYmIFwiX19jb21waWxlZF9fXCIgaW4gYXJnc1swXSlcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgcmV0dXJuIGNhbGxiYWNrKCk7XG59XG52YXIgQ29udHJhY3QgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBDb250cmFjdCBjbGFzcyB0byBoYW5kbGUgY29udHJhY3QgbWV0aG9kc1xuICAgKlxuICAgKiBAcGFyYW0gYWJpIC0gQWJpIG9mIHRoZSBjb250cmFjdCBvYmplY3RcbiAgICogQHBhcmFtIGFkZHJlc3MgKG9wdGlvbmFsKSAtIGFkZHJlc3MgdG8gY29ubmVjdCB0b1xuICAgKiBAcGFyYW0gcHJvdmlkZXJPckFjY291bnQgKG9wdGlvbmFsKSAtIFByb3ZpZGVyIG9yIEFjY291bnQgdG8gYXR0YWNoIHRvXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhYmksIGFkZHJlc3MsIHByb3ZpZGVyT3JBY2NvdW50ID0gZGVmYXVsdFByb3ZpZGVyKSB7XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcyAmJiBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm92aWRlck9yQWNjb3VudCA9IHByb3ZpZGVyT3JBY2NvdW50O1xuICAgIHRoaXMuY2FsbERhdGEgPSBuZXcgQ2FsbERhdGEoYWJpKTtcbiAgICB0aGlzLnN0cnVjdHMgPSBDYWxsRGF0YS5nZXRBYmlTdHJ1Y3QoYWJpKTtcbiAgICB0aGlzLmV2ZW50cyA9IGdldEFiaUV2ZW50cyhhYmkpO1xuICAgIGNvbnN0IHBhcnNlciA9IGNyZWF0ZUFiaVBhcnNlcihhYmkpO1xuICAgIHRoaXMuYWJpID0gcGFyc2VyLmdldExlZ2FjeUZvcm1hdCgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgZnVuY3Rpb25zOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBjYWxsU3RhdGljOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB7fSwgd3JpdGFibGU6IGZhbHNlIH0sXG4gICAgICBlc3RpbWF0ZUZlZTogeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZToge30sIHdyaXRhYmxlOiBmYWxzZSB9XG4gICAgfSk7XG4gICAgdGhpcy5hYmkuZm9yRWFjaCgoYWJpRWxlbWVudCkgPT4ge1xuICAgICAgaWYgKGFiaUVsZW1lbnQudHlwZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBhYmlFbGVtZW50Lm5hbWU7XG4gICAgICBpZiAoIXRoaXNbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGREZWZhdWx0KHRoaXMsIGFiaUVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmZ1bmN0aW9uc1tzaWduYXR1cmVdKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmZ1bmN0aW9ucywgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGREZWZhdWx0KHRoaXMsIGFiaUVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmNhbGxTdGF0aWNbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jYWxsU3RhdGljLCBzaWduYXR1cmUsIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIHZhbHVlOiBidWlsZENhbGwodGhpcywgYWJpRWxlbWVudClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltzaWduYXR1cmVdKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24sIHNpZ25hdHVyZSwge1xuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgdmFsdWU6IGJ1aWxkUG9wdWxhdGUodGhpcywgYWJpRWxlbWVudClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZXN0aW1hdGVGZWVbc2lnbmF0dXJlXSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5lc3RpbWF0ZUZlZSwgc2lnbmF0dXJlLCB7XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZTogYnVpbGRFc3RpbWF0ZSh0aGlzLCBhYmlFbGVtZW50KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhdHRhY2goYWRkcmVzcykge1xuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gIH1cbiAgY29ubmVjdChwcm92aWRlck9yQWNjb3VudCkge1xuICAgIHRoaXMucHJvdmlkZXJPckFjY291bnQgPSBwcm92aWRlck9yQWNjb3VudDtcbiAgfVxuICBhc3luYyBkZXBsb3llZCgpIHtcbiAgICBpZiAodGhpcy5kZXBsb3lUcmFuc2FjdGlvbkhhc2gpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJvdmlkZXJPckFjY291bnQud2FpdEZvclRyYW5zYWN0aW9uKHRoaXMuZGVwbG95VHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgIHRoaXMuZGVwbG95VHJhbnNhY3Rpb25IYXNoID0gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3luYyBjYWxsKG1ldGhvZCwgYXJncyA9IFtdLCB7XG4gICAgcGFyc2VSZXF1ZXN0ID0gdHJ1ZSxcbiAgICBwYXJzZVJlc3BvbnNlID0gdHJ1ZSxcbiAgICBmb3JtYXRSZXNwb25zZSA9IHZvaWQgMCxcbiAgICBibG9ja0lkZW50aWZpZXIgPSB2b2lkIDBcbiAgfSA9IHt9KSB7XG4gICAgYXNzZXJ0KHRoaXMuYWRkcmVzcyAhPT0gbnVsbCwgXCJjb250cmFjdCBpcyBub3QgY29ubmVjdGVkIHRvIGFuIGFkZHJlc3NcIik7XG4gICAgY29uc3QgY2FsbGRhdGEgPSBnZXRDYWxsZGF0YShhcmdzLCAoKSA9PiB7XG4gICAgICBpZiAocGFyc2VSZXF1ZXN0KSB7XG4gICAgICAgIHRoaXMuY2FsbERhdGEudmFsaWRhdGUoXCJDQUxMXCIgLyogQ0FMTCAqLywgbWV0aG9kLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbERhdGEuY29tcGlsZShtZXRob2QsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuKFwiQ2FsbCBza2lwcGVkIHBhcnNpbmcgYnV0IHByb3ZpZGVkIHJhd0FyZ3MsIHBvc3NpYmxlIG1hbGZ1bmN0aW9uIHJlcXVlc3RcIik7XG4gICAgICByZXR1cm4gYXJncztcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5jYWxsQ29udHJhY3QoXG4gICAgICB7XG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICBjYWxsZGF0YSxcbiAgICAgICAgZW50cnlwb2ludDogbWV0aG9kXG4gICAgICB9LFxuICAgICAgYmxvY2tJZGVudGlmaWVyXG4gICAgKS50aGVuKCh4KSA9PiB7XG4gICAgICBpZiAoIXBhcnNlUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHgucmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdFJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxEYXRhLmZvcm1hdChtZXRob2QsIHgucmVzdWx0LCBmb3JtYXRSZXNwb25zZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWxsRGF0YS5wYXJzZShtZXRob2QsIHgucmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuICBpbnZva2UobWV0aG9kLCBhcmdzID0gW10sIHsgcGFyc2VSZXF1ZXN0ID0gdHJ1ZSwgbWF4RmVlLCBub25jZSwgc2lnbmF0dXJlIH0gPSB7fSkge1xuICAgIGFzc2VydCh0aGlzLmFkZHJlc3MgIT09IG51bGwsIFwiY29udHJhY3QgaXMgbm90IGNvbm5lY3RlZCB0byBhbiBhZGRyZXNzXCIpO1xuICAgIGNvbnN0IGNhbGxkYXRhID0gZ2V0Q2FsbGRhdGEoYXJncywgKCkgPT4ge1xuICAgICAgaWYgKHBhcnNlUmVxdWVzdCkge1xuICAgICAgICB0aGlzLmNhbGxEYXRhLnZhbGlkYXRlKFwiSU5WT0tFXCIgLyogSU5WT0tFICovLCBtZXRob2QsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsRGF0YS5jb21waWxlKG1ldGhvZCwgYXJncyk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oXCJJbnZva2Ugc2tpcHBlZCBwYXJzaW5nIGJ1dCBwcm92aWRlZCByYXdBcmdzLCBwb3NzaWJsZSBtYWxmdW5jdGlvbiByZXF1ZXN0XCIpO1xuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfSk7XG4gICAgY29uc3QgaW52b2NhdGlvbiA9IHtcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgY2FsbGRhdGEsXG4gICAgICBlbnRyeXBvaW50OiBtZXRob2RcbiAgICB9O1xuICAgIGlmIChcImV4ZWN1dGVcIiBpbiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5leGVjdXRlKGludm9jYXRpb24sIHZvaWQgMCwge1xuICAgICAgICBtYXhGZWUsXG4gICAgICAgIG5vbmNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFub25jZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uY2UgaXMgcmVxdWlyZWQgd2hlbiBpbnZva2luZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYW4gYWNjb3VudGApO1xuICAgIGNvbnNvbGUud2FybihgSW52b2tpbmcgJHttZXRob2R9IHdpdGhvdXQgYW4gYWNjb3VudC4gVGhpcyB3aWxsIG5vdCB3b3JrIG9uIGEgcHVibGljIG5vZGUuYCk7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJPckFjY291bnQuaW52b2tlRnVuY3Rpb24oXG4gICAgICB7XG4gICAgICAgIC4uLmludm9jYXRpb24sXG4gICAgICAgIHNpZ25hdHVyZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9uY2VcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGFzeW5jIGVzdGltYXRlKG1ldGhvZCwgYXJncyA9IFtdKSB7XG4gICAgYXNzZXJ0KHRoaXMuYWRkcmVzcyAhPT0gbnVsbCwgXCJjb250cmFjdCBpcyBub3QgY29ubmVjdGVkIHRvIGFuIGFkZHJlc3NcIik7XG4gICAgaWYgKCFnZXRDYWxsZGF0YShhcmdzLCAoKSA9PiBmYWxzZSkpIHtcbiAgICAgIHRoaXMuY2FsbERhdGEudmFsaWRhdGUoXCJJTlZPS0VcIiAvKiBJTlZPS0UgKi8sIG1ldGhvZCwgYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IGludm9jYXRpb24gPSB0aGlzLnBvcHVsYXRlKG1ldGhvZCwgYXJncyk7XG4gICAgaWYgKFwiZXN0aW1hdGVJbnZva2VGZWVcIiBpbiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlck9yQWNjb3VudC5lc3RpbWF0ZUludm9rZUZlZShpbnZvY2F0aW9uKTtcbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJDb250cmFjdCBtdXN0IGJlIGNvbm5lY3RlZCB0byB0aGUgYWNjb3VudCBjb250cmFjdCB0byBlc3RpbWF0ZVwiKTtcbiAgfVxuICBwb3B1bGF0ZShtZXRob2QsIGFyZ3MgPSBbXSkge1xuICAgIGNvbnN0IGNhbGxkYXRhID0gZ2V0Q2FsbGRhdGEoYXJncywgKCkgPT4gdGhpcy5jYWxsRGF0YS5jb21waWxlKG1ldGhvZCwgYXJncykpO1xuICAgIHJldHVybiB7XG4gICAgICBjb250cmFjdEFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgIGVudHJ5cG9pbnQ6IG1ldGhvZCxcbiAgICAgIGNhbGxkYXRhXG4gICAgfTtcbiAgfVxuICBwYXJzZUV2ZW50cyhyZWNlaXB0KSB7XG4gICAgcmV0dXJuIHBhcnNlRXZlbnRzKFxuICAgICAgcmVjZWlwdC5ldmVudHM/LmZpbHRlcihcbiAgICAgICAgKGV2ZW50KSA9PiBjbGVhbkhleChldmVudC5mcm9tX2FkZHJlc3MpID09PSBjbGVhbkhleCh0aGlzLmFkZHJlc3MpLFxuICAgICAgICBbXVxuICAgICAgKSB8fCBbXSxcbiAgICAgIHRoaXMuZXZlbnRzLFxuICAgICAgdGhpcy5zdHJ1Y3RzLFxuICAgICAgQ2FsbERhdGEuZ2V0QWJpRW51bSh0aGlzLmFiaSlcbiAgICApO1xuICB9XG4gIGlzQ2Fpcm8xKCkge1xuICAgIHJldHVybiBjYWlyb19leHBvcnRzLmlzQ2Fpcm8xQWJpKHRoaXMuYWJpKTtcbiAgfVxuICBhc3luYyBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyT3JBY2NvdW50LmdldENvbnRyYWN0VmVyc2lvbih0aGlzLmFkZHJlc3MpO1xuICB9XG4gIHR5cGVkKHRBYmkpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuLy8gc3JjL2NvbnRyYWN0L2ludGVyZmFjZS50c1xudmFyIENvbnRyYWN0SW50ZXJmYWNlID0gY2xhc3Mge1xufTtcblxuLy8gc3JjL2NvbnRyYWN0L2NvbnRyYWN0RmFjdG9yeS50c1xudmFyIENvbnRyYWN0RmFjdG9yeSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBwYXJhbXMgQ0ZQYXJhbXNcbiAgICogIC0gY29tcGlsZWRDb250cmFjdDogQ29tcGlsZWRDb250cmFjdDtcbiAgICogIC0gYWNjb3VudDogQWNjb3VudEludGVyZmFjZTtcbiAgICogIC0gY2FzbT86IENhaXJvQXNzZW1ibHk7XG4gICAqICAtIGNsYXNzSGFzaD86IHN0cmluZztcbiAgICogIC0gY29tcGlsZWRDbGFzc0hhc2g/OiBzdHJpbmc7XG4gICAqICAtIGFiaT86IEFiaTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMuY29tcGlsZWRDb250cmFjdCA9IHBhcmFtcy5jb21waWxlZENvbnRyYWN0O1xuICAgIHRoaXMuYWNjb3VudCA9IHBhcmFtcy5hY2NvdW50O1xuICAgIHRoaXMuY2FzbSA9IHBhcmFtcy5jYXNtO1xuICAgIHRoaXMuYWJpID0gcGFyYW1zLmFiaSA/PyBwYXJhbXMuY29tcGlsZWRDb250cmFjdC5hYmk7XG4gICAgdGhpcy5jbGFzc0hhc2ggPSBwYXJhbXMuY2xhc3NIYXNoO1xuICAgIHRoaXMuY29tcGlsZWRDbGFzc0hhc2ggPSBwYXJhbXMuY29tcGlsZWRDbGFzc0hhc2g7XG4gICAgdGhpcy5DYWxsRGF0YSA9IG5ldyBDYWxsRGF0YSh0aGlzLmFiaSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveXMgY29udHJhY3QgYW5kIHJldHVybnMgbmV3IGluc3RhbmNlIG9mIHRoZSBDb250cmFjdFxuICAgKlxuICAgKiBJZiBjb250cmFjdCBpcyBub3QgZGVjbGFyZWQgaXQgd2lsbCBmaXJzdCBkZWNsYXJlIGl0LCBhbmQgdGhlbiBkZXBsb3lcbiAgICovXG4gIGFzeW5jIGRlcGxveSguLi5hcmdzKSB7XG4gICAgY29uc3QgeyBhcmdzOiBwYXJhbSwgb3B0aW9ucyA9IHsgcGFyc2VSZXF1ZXN0OiB0cnVlIH0gfSA9IHNwbGl0QXJnc0FuZE9wdGlvbnMoYXJncyk7XG4gICAgY29uc3QgY29uc3RydWN0b3JDYWxsZGF0YSA9IGdldENhbGxkYXRhKHBhcmFtLCAoKSA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZVJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5DYWxsRGF0YS52YWxpZGF0ZShcIkRFUExPWVwiIC8qIERFUExPWSAqLywgXCJjb25zdHJ1Y3RvclwiLCBwYXJhbSk7XG4gICAgICAgIHJldHVybiB0aGlzLkNhbGxEYXRhLmNvbXBpbGUoXCJjb25zdHJ1Y3RvclwiLCBwYXJhbSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oXCJDYWxsIHNraXBwZWQgcGFyc2luZyBidXQgcHJvdmlkZWQgcmF3QXJncywgcG9zc2libGUgbWFsZnVuY3Rpb24gcmVxdWVzdFwiKTtcbiAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBkZXBsb3k6IHsgY29udHJhY3RfYWRkcmVzcywgdHJhbnNhY3Rpb25faGFzaCB9XG4gICAgfSA9IGF3YWl0IHRoaXMuYWNjb3VudC5kZWNsYXJlQW5kRGVwbG95KHtcbiAgICAgIGNvbnRyYWN0OiB0aGlzLmNvbXBpbGVkQ29udHJhY3QsXG4gICAgICBjYXNtOiB0aGlzLmNhc20sXG4gICAgICBjbGFzc0hhc2g6IHRoaXMuY2xhc3NIYXNoLFxuICAgICAgY29tcGlsZWRDbGFzc0hhc2g6IHRoaXMuY29tcGlsZWRDbGFzc0hhc2gsXG4gICAgICBjb25zdHJ1Y3RvckNhbGxkYXRhLFxuICAgICAgc2FsdDogb3B0aW9ucy5hZGRyZXNzU2FsdFxuICAgIH0pO1xuICAgIGFzc2VydChCb29sZWFuKGNvbnRyYWN0X2FkZHJlc3MpLCBcIkRlcGxveW1lbnQgb2YgdGhlIGNvbnRyYWN0IGZhaWxlZFwiKTtcbiAgICBjb25zdCBjb250cmFjdEluc3RhbmNlID0gbmV3IENvbnRyYWN0KFxuICAgICAgdGhpcy5jb21waWxlZENvbnRyYWN0LmFiaSxcbiAgICAgIGNvbnRyYWN0X2FkZHJlc3MsXG4gICAgICB0aGlzLmFjY291bnRcbiAgICApO1xuICAgIGNvbnRyYWN0SW5zdGFuY2UuZGVwbG95VHJhbnNhY3Rpb25IYXNoID0gdHJhbnNhY3Rpb25faGFzaDtcbiAgICByZXR1cm4gY29udHJhY3RJbnN0YW5jZTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoZXMgdG8gbmV3IEFjY291bnRcbiAgICpcbiAgICogQHBhcmFtIGFjY291bnQgLSBuZXcgQWNjb3VudCB0byBhdHRhY2ggdG9cbiAgICovXG4gIGNvbm5lY3QoYWNjb3VudCkge1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGFjaGVzIGN1cnJlbnQgYWJpIGFuZCBhY2NvdW50IHRvIHRoZSBuZXcgYWRkcmVzc1xuICAgKi9cbiAgYXR0YWNoKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gbmV3IENvbnRyYWN0KHRoaXMuYWJpLCBhZGRyZXNzLCB0aGlzLmFjY291bnQpO1xuICB9XG4gIC8vIGV0aGVycy5qcycgZ2V0RGVwbG95VHJhbnNhY3Rpb24gY2FudCBiZSBzdXBwb3J0ZWQgYXMgaXQgcmVxdWlyZXMgdGhlIGFjY291bnQgb3Igc2lnbmVyIHRvIHJldHVybiBhIHNpZ25lZCB0cmFuc2FjdGlvbiB3aGljaCBpcyBub3QgcG9zc2libGUgd2l0aCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvblxufTtcblxuLy8gc3JjL3V0aWxzL2FkZHJlc3MudHNcbmltcG9ydCB7IGhleFRvQnl0ZXMgYXMgaGV4VG9CeXRlczIgfSBmcm9tIFwiQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlsc1wiO1xuZnVuY3Rpb24gYWRkQWRkcmVzc1BhZGRpbmcoYWRkcmVzcykge1xuICByZXR1cm4gYWRkSGV4UHJlZml4KHJlbW92ZUhleFByZWZpeCh0b0hleChhZGRyZXNzKSkucGFkU3RhcnQoNjQsIFwiMFwiKSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUFuZFBhcnNlQWRkcmVzcyhhZGRyZXNzKSB7XG4gIGFzc2VydEluUmFuZ2UoYWRkcmVzcywgWkVSTywgTUFTS18yNTEsIFwiU3RhcmtuZXQgQWRkcmVzc1wiKTtcbiAgY29uc3QgcmVzdWx0ID0gYWRkQWRkcmVzc1BhZGRpbmcoYWRkcmVzcyk7XG4gIGlmICghcmVzdWx0Lm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs2NH0kLykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEFkZHJlc3MgRm9ybWF0XCIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRDaGVja3N1bUFkZHJlc3MoYWRkcmVzcykge1xuICBjb25zdCBjaGFycyA9IHJlbW92ZUhleFByZWZpeCh2YWxpZGF0ZUFuZFBhcnNlQWRkcmVzcyhhZGRyZXNzKSkudG9Mb3dlckNhc2UoKS5zcGxpdChcIlwiKTtcbiAgY29uc3QgaGV4ID0gcmVtb3ZlSGV4UHJlZml4KGtlY2Nha0JuKGFkZHJlc3MpKTtcbiAgY29uc3QgaGFzaGVkID0gaGV4VG9CeXRlczIoaGV4LnBhZFN0YXJ0KDY0LCBcIjBcIikpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgaWYgKGhhc2hlZFtpID4+IDFdID4+IDQgPj0gOCkge1xuICAgICAgY2hhcnNbaV0gPSBjaGFyc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAoKGhhc2hlZFtpID4+IDFdICYgMTUpID49IDgpIHtcbiAgICAgIGNoYXJzW2kgKyAxXSA9IGNoYXJzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYWRkSGV4UHJlZml4KGNoYXJzLmpvaW4oXCJcIikpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDaGVja3N1bUFkZHJlc3MoYWRkcmVzcykge1xuICByZXR1cm4gZ2V0Q2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xufVxuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBudW1iZXIgPSBudW1fZXhwb3J0cztcbmV4cG9ydCB7XG4gIEFjY291bnQsXG4gIEFjY291bnRJbnRlcmZhY2UsXG4gIEJsb2NrU3RhdHVzLFxuICBCbG9ja1RhZyxcbiAgQ2Fpcm9DdXN0b21FbnVtLFxuICBDYWlyb09wdGlvbixcbiAgQ2Fpcm9PcHRpb25WYXJpYW50LFxuICBDYWlyb1Jlc3VsdCxcbiAgQ2Fpcm9SZXN1bHRWYXJpYW50LFxuICBDYWxsRGF0YSxcbiAgQ29udHJhY3QsXG4gIENvbnRyYWN0RmFjdG9yeSxcbiAgQ29udHJhY3RJbnRlcmZhY2UsXG4gIEN1c3RvbUVycm9yLFxuICBFbnRyeVBvaW50VHlwZSxcbiAgR2F0ZXdheUVycm9yLFxuICBIdHRwRXJyb3IsXG4gIExpYnJhcnlFcnJvcixcbiAgTGl0dGVyYWwsXG4gIFByb3ZpZGVyLFxuICBQcm92aWRlckludGVyZmFjZSxcbiAgcnBjX2V4cG9ydHMgYXMgUlBDLFxuICBScGNQcm92aWRlcixcbiAgU0lNVUxBVElPTl9GTEFHLFxuICBzZXF1ZW5jZXJfZXhwb3J0cyBhcyBTZXF1ZW5jZXIsXG4gIFNlcXVlbmNlclByb3ZpZGVyLFxuICBTaWduZXIsXG4gIFNpZ25lckludGVyZmFjZSxcbiAgVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMsXG4gIFRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMsXG4gIFRyYW5zYWN0aW9uU3RhdHVzLFxuICBUcmFuc2FjdGlvblR5cGUsXG4gIFVpbnQsXG4gIFZhbGlkYXRlVHlwZSxcbiAgYWRkQWRkcmVzc1BhZGRpbmcsXG4gIGJ1aWxkVXJsLFxuICBjYWlyb19leHBvcnRzIGFzIGNhaXJvLFxuICBjb25zdGFudHNfZXhwb3J0cyBhcyBjb25zdGFudHMsXG4gIGNvbnRyYWN0Q2xhc3NSZXNwb25zZVRvTGVnYWN5Q29tcGlsZWRDb250cmFjdCxcbiAgZGVmYXVsdFByb3ZpZGVyLFxuICBlY19leHBvcnRzIGFzIGVjLFxuICBlbmNvZGVfZXhwb3J0cyBhcyBlbmNvZGUsXG4gIGV2ZW50c19leHBvcnRzIGFzIGV2ZW50cyxcbiAgZXh0cmFjdENvbnRyYWN0SGFzaGVzLFxuICBmaXhQcm90byxcbiAgZml4U3RhY2ssXG4gIGdldENhbGxkYXRhLFxuICBnZXRDaGVja3N1bUFkZHJlc3MsXG4gIGdldERlZmF1bHROb2RlVXJsLFxuICBoYXNoX2V4cG9ydHMgYXMgaGFzaCxcbiAgaXNTaWVycmEsXG4gIGlzVXJsLFxuICBqc29uX2V4cG9ydHMgYXMganNvbixcbiAgbWVya2xlX2V4cG9ydHMgYXMgbWVya2xlLFxuICBudW1fZXhwb3J0cyBhcyBudW0sXG4gIG51bWJlcixcbiAgcGFyc2VVRENFdmVudCxcbiAgcHJvdmlkZXJfZXhwb3J0cyBhcyBwcm92aWRlcixcbiAgc2VsZWN0b3JfZXhwb3J0cyBhcyBzZWxlY3RvcixcbiAgc2hvcnRTdHJpbmdfZXhwb3J0cyBhcyBzaG9ydFN0cmluZyxcbiAgc3BsaXRBcmdzQW5kT3B0aW9ucyxcbiAgc3RhcmtfZXhwb3J0cyBhcyBzdGFyayxcbiAgc3RhcmtuZXRJZF9leHBvcnRzIGFzIHN0YXJrbmV0SWQsXG4gIHRyYW5zYWN0aW9uX2V4cG9ydHMgYXMgdHJhbnNhY3Rpb24sXG4gIHR5cGVkRGF0YV9leHBvcnRzIGFzIHR5cGVkRGF0YSxcbiAgdHlwZXNfZXhwb3J0cyBhcyB0eXBlcyxcbiAgdWludDI1Nl9leHBvcnRzIGFzIHVpbnQyNTYsXG4gIHZhbGlkYXRlQW5kUGFyc2VBZGRyZXNzLFxuICB2YWxpZGF0ZUNoZWNrc3VtQWRkcmVzc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uc3RhbnRzX2V4cG9ydHMiLCJBUElfVkVSU0lPTiIsIkJOX0ZFRV9UUkFOU0FDVElPTl9WRVJTSU9OXzEiLCJCTl9GRUVfVFJBTlNBQ1RJT05fVkVSU0lPTl8yIiwiQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8xIiwiQk5fVFJBTlNBQ1RJT05fVkVSU0lPTl8yIiwiQmFzZVVybCIsIkhFWF9TVFJfVFJBTlNBQ1RJT05fVkVSU0lPTl8xIiwiSEVYX1NUUl9UUkFOU0FDVElPTl9WRVJTSU9OXzIiLCJJU19CUk9XU0VSIiwiTUFTS18yNTAiLCJNQVNLXzI1MSIsIk5ldHdvcmtOYW1lIiwiUlBDX0dPRVJMSV9OT0RFUyIsIlJQQ19NQUlOTkVUX05PREVTIiwiU3RhcmtuZXRDaGFpbklkIiwiVEVYVF9UT19GRUxUX01BWF9MRU4iLCJUcmFuc2FjdGlvbkhhc2hQcmVmaXgiLCJVREMiLCJaRVJPIiwiZW5jb2RlX2V4cG9ydHMiLCJhZGRIZXhQcmVmaXgiLCJhcnJheUJ1ZmZlclRvU3RyaW5nIiwiYXRvYlVuaXZlcnNhbCIsImJ0b2FVbml2ZXJzYWwiLCJidWYyaGV4IiwiY2FsY0J5dGVMZW5ndGgiLCJwYWRMZWZ0IiwicGFzY2FsVG9TbmFrZSIsInJlbW92ZUhleFByZWZpeCIsInNhbml0aXplQnl0ZXMiLCJzYW5pdGl6ZUhleCIsInN0cmluZ1RvQXJyYXlCdWZmZXIiLCJ1dGY4VG9BcnJheSIsImJhc2U2NCIsIlNUUklOR19aRVJPIiwiYXJyYXkiLCJVaW50OEFycmF5IiwicmVkdWNlIiwiZGF0YSIsImJ5dGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzdHIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImEiLCJkZWNvZGUiLCJiIiwiYnVmZmVyIiwiciIsIngiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiaGV4IiwicmVwbGFjZSIsInBhZFN0cmluZyIsImxlbmd0aCIsImxlZnQiLCJwYWRkaW5nIiwiZGlmZiIsInJlc3VsdCIsInBhZCIsInJlcGVhdCIsImJ5dGVTaXplIiwicmVtYWluZGVyIiwidGV4dCIsInRlc3QiLCJzcGxpdCIsImpvaW4iLCJ0b1VwcGVyQ2FzZSIsIkJhc2VVcmwyIiwiTmV0d29ya05hbWUyIiwiU3RhcmtuZXRDaGFpbklkNCIsIlRyYW5zYWN0aW9uSGFzaFByZWZpeDIiLCJBRERSRVNTIiwiRU5UUllQT0lOVCIsInR5cGVzX2V4cG9ydHMiLCJCbG9ja1N0YXR1cyIsIkJsb2NrVGFnIiwiRW50cnlQb2ludFR5cGUiLCJMaXR0ZXJhbCIsIlJQQyIsInJwY19leHBvcnRzIiwiU0lNVUxBVElPTl9GTEFHIiwiU2VxdWVuY2VyIiwic2VxdWVuY2VyX2V4cG9ydHMiLCJUcmFuc2FjdGlvbkV4ZWN1dGlvblN0YXR1cyIsIlRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMiLCJUcmFuc2FjdGlvblN0YXR1cyIsIlRyYW5zYWN0aW9uVHlwZSIsIlVpbnQiLCJWYWxpZGF0ZVR5cGUiLCJTSU1VTEFUSU9OX0ZMQUcyIiwiVmFsaWRhdGVUeXBlMiIsIlVpbnQyIiwiTGl0dGVyYWwyIiwiRW50cnlQb2ludFR5cGUyIiwiVHJhbnNhY3Rpb25UeXBlMiIsIlRyYW5zYWN0aW9uU3RhdHVzMiIsIlRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMyIiwiVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyIiwiQmxvY2tTdGF0dXMyIiwiQmxvY2tUYWcyIiwiRUJsb2NrVGFnIiwiRURhdGFBdmFpbGFiaWxpdHlNb2RlIiwiRVNpbXVsYXRpb25GbGFnIiwiRVRyYW5zYWN0aW9uRXhlY3V0aW9uU3RhdHVzIiwiRVRyYW5zYWN0aW9uRmluYWxpdHlTdGF0dXMiLCJFVHJhbnNhY3Rpb25TdGF0dXMiLCJFVHJhbnNhY3Rpb25UeXBlIiwiRXJyb3JzIiwiZXJyb3JzX2V4cG9ydHMiLCJKUlBDIiwianNvbnJwY19leHBvcnRzIiwiU1BFQyIsImNvbXBvbmVudHNfZXhwb3J0cyIsIkVUcmFuc2FjdGlvblR5cGUyIiwiRVNpbXVsYXRpb25GbGFnMiIsIkVUcmFuc2FjdGlvblN0YXR1czIiLCJFVHJhbnNhY3Rpb25GaW5hbGl0eVN0YXR1czIiLCJFVHJhbnNhY3Rpb25FeGVjdXRpb25TdGF0dXMyIiwiRUJsb2NrVGFnMiIsIkVEYXRhQXZhaWxhYmlsaXR5TW9kZTIiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJudW1fZXhwb3J0cyIsImFzc2VydEluUmFuZ2UiLCJiaWdOdW1iZXJpc2hBcnJheVRvRGVjaW1hbFN0cmluZ0FycmF5IiwiYmlnTnVtYmVyaXNoQXJyYXlUb0hleGFkZWNpbWFsU3RyaW5nQXJyYXkiLCJjbGVhbkhleCIsImdldERlY2ltYWxTdHJpbmciLCJnZXRIZXhTdHJpbmciLCJnZXRIZXhTdHJpbmdBcnJheSIsImhleFRvQnl0ZXMiLCJoZXhUb0RlY2ltYWxTdHJpbmciLCJpc0JpZ0ludCIsImlzSGV4IiwiaXNTdHJpbmdXaG9sZU51bWJlciIsInRvQmlnSW50IiwidG9DYWlyb0Jvb2wiLCJ0b0hleCIsInRvSGV4U3RyaW5nIiwidG9TdG9yYWdlS2V5IiwiaGV4VG9CeXRlc05vYmxlIiwidmFsdWUiLCJCaWdJbnQiLCJudW1iZXIyIiwicmVzIiwidG9Mb3dlckNhc2UiLCJpbnB1dCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiaW5wdXROYW1lIiwibWVzc2FnZVN1ZmZpeCIsImlucHV0QmlnSW50IiwibG93ZXJCb3VuZEJpZ0ludCIsInVwcGVyQm91bmRCaWdJbnQiLCJyYXdDYWxsZGF0YSIsIm1hcCIsImVsIiwiYWRhcHRlZFZhbHVlIiwic2VsZWN0b3JfZXhwb3J0cyIsImdldFNlbGVjdG9yIiwiZ2V0U2VsZWN0b3JGcm9tTmFtZSIsImtlY2Nha0JuIiwic3RhcmtuZXRLZWNjYWsiLCJrZWNjYWsiLCJoZXhXaXRob3V0UHJlZml4IiwiZXZlbkhleCIsImtlY2Nha0hleCIsImhhc2giLCJmdW5jTmFtZSIsInNob3J0U3RyaW5nX2V4cG9ydHMiLCJkZWNvZGVTaG9ydFN0cmluZyIsImVuY29kZVNob3J0U3RyaW5nIiwiaXNBU0NJSSIsImlzRGVjaW1hbFN0cmluZyIsImlzTG9uZ1RleHQiLCJpc1Nob3J0U3RyaW5nIiwiaXNTaG9ydFRleHQiLCJpc1RleHQiLCJzcGxpdExvbmdTdHJpbmciLCJ2YWwiLCJsb25nU3RyIiwicmVnZXgiLCJSZWdFeHAiLCJtYXRjaCIsImNoYXIiLCJjaGFyQ29kZUF0IiwicGFyc2VJbnQiLCJjb25jYXQiLCJjYWlyb19leHBvcnRzIiwiZmVsdCIsImdldEFiaUNvbnRyYWN0VmVyc2lvbiIsImdldEFycmF5VHlwZSIsImlzQ2Fpcm8xQWJpIiwiaXNDYWlybzFUeXBlIiwiaXNMZW4iLCJpc1R5cGVBcnJheSIsImlzVHlwZUJvb2wiLCJpc1R5cGVDb250cmFjdEFkZHJlc3MiLCJpc1R5cGVFbnVtIiwiaXNUeXBlRXRoQWRkcmVzcyIsImlzVHlwZUZlbHQiLCJpc1R5cGVMaXR0ZXJhbCIsImlzVHlwZU5hbWVkVHVwbGUiLCJpc1R5cGVPcHRpb24iLCJpc1R5cGVSZXN1bHQiLCJpc1R5cGVTdHJ1Y3QiLCJpc1R5cGVUdXBsZSIsImlzVHlwZVVpbnQiLCJpc1R5cGVVaW50MjU2IiwidHVwbGUiLCJ1aW50MjU2IiwidWludDI1Nl9leHBvcnRzIiwiVUlOVF8xMjhfTUFYIiwiVUlOVF8yNTZfTUFYIiwiYm5Ub1VpbnQyNTYiLCJpc1VpbnQyNTYiLCJ1aW50MjU2VG9CTiIsInVpbnQyNTYyIiwiaGlnaCIsImxvdyIsImJuIiwiYmkiLCJ0eXBlIiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwic3RydWN0cyIsImVudW1zIiwidmFsdWVzIiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYWJpIiwiY2Fpcm8iLCJmaW5kIiwiaXQiLCJjb21waWxlciIsInRlc3RGdW5jdGlvbiIsImlucHV0cyIsIm91dHB1dHMiLCJpbyIsImFyZ3MiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJlbmNvZGVkIiwiQ2Fpcm9DdXN0b21FbnVtIiwiY29uc3RydWN0b3IiLCJlbnVtQ29udGVudCIsInZhcmlhbnRzTGlzdCIsIm5iQWN0aXZlVmFyaWFudHMiLCJmaWx0ZXIiLCJjb250ZW50IiwidmFyaWFudCIsInVud3JhcCIsInZhcmlhbnRzIiwiZW50cmllcyIsImFjdGl2ZVZhcmlhbnQiLCJpdGVtIiwiQ2Fpcm9PcHRpb25WYXJpYW50IiwiQ2Fpcm9PcHRpb25WYXJpYW50MiIsIkNhaXJvT3B0aW9uIiwic29tZUNvbnRlbnQiLCJTb21lIiwiTm9uZSIsImlzU29tZSIsImlzTm9uZSIsIkNhaXJvUmVzdWx0VmFyaWFudCIsIkNhaXJvUmVzdWx0VmFyaWFudDIiLCJDYWlyb1Jlc3VsdCIsInJlc3VsdENvbnRlbnQiLCJPayIsIkVyciIsImlzT2siLCJpc0VyciIsImd1YXJkIiwiaXNCTiIsImtleSIsInVua25vd24iLCJmb3JtYXR0ZXIiLCJzYW1lVHlwZSIsImFjYyIsImVsVHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5U3RyIiwiXyIsImFycmF5T2JqIiwiQWJpUGFyc2VyMSIsIm1ldGhvZElucHV0c0xlbmd0aCIsImFiaU1ldGhvZCIsImdldE1ldGhvZCIsImdldExlZ2FjeUZvcm1hdCIsIkFiaVBhcnNlcjIiLCJpbnRmIiwiaXRlbXMiLCJmbGF0TWFwIiwiZSIsImNyZWF0ZUFiaVBhcnNlciIsInZlcnNpb24iLCJnZXRBYmlWZXJzaW9uIiwiaXNOb0NvbnN0cnVjdG9yVmFsaWQiLCJtZXRob2QiLCJhcmdzQ2FsbGRhdGEiLCJwYXJzZU5hbWVkVHVwbGUiLCJuYW1lZFR1cGxlIiwicGFyc2VTdWJUdXBsZSIsInMiLCJzdWJUdXBsZSIsImkiLCJjb3VudGVyIiwibEJyYWNrZXQiLCJwdXNoIiwiZXh0cmFjdENhaXJvMFR1cGxlIiwiY2xlYW5UeXBlIiwic2xpY2UiLCJyZWNvbXBvc2VkIiwic2hpZnQiLCJleHRyYWN0Q2Fpcm8xVHVwbGUiLCJleHRyYWN0VHVwbGVNZW1iZXJUeXBlcyIsImVycm9yVTI1NiIsIm9yZGVyUHJvcHNCeUFiaSIsInVub3JkZXJlZE9iamVjdCIsImFiaU9mT2JqZWN0Iiwib3JkZXJJbnB1dCIsInVub3JkZXJlZEl0ZW0iLCJhYmlUeXBlIiwib3JkZXJBcnJheSIsImFiaU9iaiIsIm9yZGVyRW51bSIsIm9yZGVyVHVwbGUiLCJ1MjU2IiwiYWJpT2ZTdHJ1Y3QiLCJtZW1iZXJzIiwib3JkZXJTdHJ1Y3QiLCJ1bm9yZGVyZWRPYmplY3QyIiwiYWJpT2JqZWN0Iiwib3JkZXJlZE9iamVjdDIiLCJvcmRlcmVkT2JqZWN0IiwiYWJpUGFyYW0iLCJzZXRQcm9wZXJ0eSIsIm15QXJyYXkiLCJ0eXBlSW5BcnJheSIsIm15RWxlbSIsInR5cGVMaXN0IiwiYWJpVHlwZUNhaXJvWCIsImluZGV4IiwibXlPYmpLZXlzIiwia2V5cyIsInVub3JkZXJlZFJlc3VsdCIsInJlc3VsdE9rVHlwZSIsInJlc3VsdEVyclR5cGUiLCJ1bm9yZGVyZWRPcHRpb24iLCJyZXN1bHRTb21lVHlwZSIsInVub3JkZXJlZEN1c3RvbUVudW0iLCJuZXdFbnRyaWVzIiwidmFyaWFudFR5cGUiLCJmcm9tRW50cmllcyIsImZpbmFsT3JkZXJlZE9iamVjdCIsInBhcnNlQmFzZVR5cGVzIiwiZWxfdWludDI1NiIsInBhcnNlVHVwbGUiLCJlbGVtZW50IiwidHlwZVN0ciIsIm1lbWJlclR5cGVzIiwiZWxlbWVudHMiLCJkeCIsInBhcnNlVWludDI1NiIsInBhcnNlQ2FsbGRhdGFWYWx1ZSIsImFycmF5VHlwZSIsInN1YkVsZW1lbnQiLCJ0dXBsZWQiLCJwYXJzZWREYXRhIiwibXlPcHRpb24iLCJsaXN0VHlwZVZhcmlhbnQyIiwidHlwZVZhcmlhbnRTb21lIiwicGFyc2VkUGFyYW1ldGVyMiIsIm15UmVzdWx0IiwibGlzdFR5cGVWYXJpYW50MyIsInR5cGVWYXJpYW50T2siLCJwYXJzZWRQYXJhbWV0ZXIzIiwidHlwZVZhcmlhbnRFcnIiLCJteUVudW0iLCJsaXN0VHlwZVZhcmlhbnQiLCJ0eXBlQWN0aXZlVmFyaWFudCIsIm51bUFjdGl2ZVZhcmlhbnQiLCJmaW5kSW5kZXgiLCJwYXJzZWRQYXJhbWV0ZXIiLCJwYXJzZUNhbGxkYXRhRmllbGQiLCJhcmdzSXRlcmF0b3IiLCJuZXh0IiwicGFyc2VCYXNlVHlwZXMyIiwidGVtcCIsIkJvb2xlYW4iLCJwYXJzZVJlc3BvbnNlVmFsdWUiLCJyZXNwb25zZUl0ZXJhdG9yIiwicGFyc2VkRGF0YUFyciIsImxlbiIsInZhcmlhbnROdW0iLCJyYXdFbnVtIiwibnVtIiwiY3VzdG9tRW51bSIsImlkeCIsInJlc3BvbnNlUGFyc2VyIiwib3V0cHV0IiwicGFyc2VkUmVzdWx0IiwiYXJyTGVuIiwidmFsaWRhdGVGZWx0IiwicGFyYW1ldGVyIiwicGFyYW0iLCJ2YWxpZGF0ZVVpbnQiLCJNQVhfU0FGRV9JTlRFR0VSIiwidmFsaWRhdGVCb29sIiwidmFsaWRhdGVTdHJ1Y3QiLCJmb3JFYWNoIiwidmFsaWRhdGVFbnVtIiwibWV0aG9kc0tleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvdG90eXBlT2YiLCJ2YWxpZGF0ZVR1cGxlIiwidmFsaWRhdGVBcnJheSIsImJhc2VUeXBlIiwidmFsaWRhdGVGaWVsZHMiLCJDYWxsRGF0YSIsImdldEFiaVN0cnVjdCIsImdldEFiaUVudW0iLCJwYXJzZXIiLCJ2YWxpZGF0ZSIsImludm9jYWJsZUZ1bmN0aW9uTmFtZXMiLCJpc1ZpZXciLCJzdGF0ZU11dGFiaWxpdHkiLCJzdGF0ZV9tdXRhYmlsaXR5IiwiaW5wdXRzTGVuZ3RoIiwiY29tcGlsZSIsImFiaUZ1bmN0aW9uIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjYWxsQXJyYXkiLCJ3cml0YWJsZSIsInJhd0FyZ3MiLCJjcmVhdGVUcmVlIiwib2JqIiwiZ2V0RW50cmllcyIsIm8iLCJwcmVmaXgiLCJvZSIsImsiLCJ2Iiwia2siLCJ2YXJpYW50TmIiLCJsaXN0VmFyaWFudHMiLCJhY3RpdmVWYXJpYW50TmIiLCJjYWxsVHJlZUFycmF5IiwiY2FsbFRyZWUiLCJjYWxsT2JqIiwicGFyc2UiLCJyZXNwb25zZSIsImZsYXQiLCJwYXJzZWQiLCJwcm9wTmFtZSIsImZvcm1hdCIsImFiaUVudHJ5IiwiZnVsbEVudW1MaXN0IiwidG9DYWxsZGF0YSIsInJhdyIsImNhbGxkYXRhIiwiaGFzaF9leHBvcnRzIiwiY2FsY3VsYXRlQ29udHJhY3RBZGRyZXNzRnJvbUhhc2giLCJjYWxjdWxhdGVEZWNsYXJlVHJhbnNhY3Rpb25IYXNoIiwiY2FsY3VsYXRlRGVwbG95QWNjb3VudFRyYW5zYWN0aW9uSGFzaCIsImNhbGN1bGF0ZURlcGxveVRyYW5zYWN0aW9uSGFzaCIsImNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaCIsImNhbGN1bGF0ZVRyYW5zYWN0aW9uSGFzaENvbW1vbiIsImNvbXB1dGVDb21waWxlZENsYXNzSGFzaCIsImNvbXB1dGVDb250cmFjdENsYXNzSGFzaCIsImNvbXB1dGVIYXNoT25FbGVtZW50cyIsImNvbXB1dGVMZWdhY3lDb250cmFjdENsYXNzSGFzaCIsImNvbXB1dGVTaWVycmFDb250cmFjdENsYXNzSGFzaCIsImRlZmF1bHQiLCJjb21wdXRlSGludGVkQ2xhc3NIYXNoIiwiZmVlVHJhbnNhY3Rpb25WZXJzaW9uIiwiZmVlVHJhbnNhY3Rpb25WZXJzaW9uXzIiLCJmb3JtYXRTcGFjZXMiLCJnZXRWZXJzaW9uc0J5VHlwZSIsInBvc2VpZG9uIiwidHJhbnNhY3Rpb25WZXJzaW9uIiwidHJhbnNhY3Rpb25WZXJzaW9uXzIiLCJwb3NlaWRvbkhhc2hNYW55IiwiZWNfZXhwb3J0cyIsInN0YXJrQ3VydmUiLCJ3ZWllcnN0cmFzcyIsImpzb25fZXhwb3J0cyIsInBhcnNlMiIsInBhcnNlQWx3YXlzQXNCaWciLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnkyIiwic3RyaW5naWZ5QWx3YXlzQXNCaWciLCJqc29uIiwicGFyc2VJbnRBc051bWJlck9yQmlnSW50IiwicGFyc2VGbG9hdCIsImlzU2FmZUludGVnZXIiLCJwYXJzZU51bWJlckFuZEJpZ0ludCIsInJlcGxhY2VyIiwic3BhY2UiLCJudW1iZXJTdHJpbmdpZmllcnMiLCJ2ZXJzaW9uVHlwZSIsInYxIiwidjIiLCJ5IiwicGVkZXJzZW4iLCJ0eEhhc2hQcmVmaXgiLCJjb250cmFjdEFkZHJlc3MiLCJlbnRyeVBvaW50U2VsZWN0b3IiLCJtYXhGZWUiLCJjaGFpbklkIiwiYWRkaXRpb25hbERhdGEiLCJjYWxsZGF0YUhhc2giLCJkYXRhVG9IYXNoIiwiY29uc3RydWN0b3JDYWxsZGF0YSIsImNvbnN0cnVjdG9yTmFtZSIsImNsYXNzSGFzaCIsInNlbmRlckFkZHJlc3MiLCJub25jZSIsImNvbXBpbGVkQ2xhc3NIYXNoIiwic2FsdCIsImRlcGxveWVyQWRkcmVzcyIsImNvbXBpbGVkQ2FsbGRhdGEiLCJjb25zdHJ1Y3RvckNhbGxkYXRhSGFzaCIsIkNPTlRSQUNUX0FERFJFU1NfUFJFRklYIiwibnVsbFNraXBSZXBsYWNlciIsImpzb24yIiwiaW5zaWRlUXVvdGVzIiwibmV3U3RyaW5nIiwiY29tcGlsZWRDb250cmFjdCIsInByb2dyYW0iLCJjb250cmFjdENsYXNzIiwic2VyaWFsaXplZEpzb24iLCJjb250cmFjdCIsImFwaVZlcnNpb24iLCJleHRlcm5hbEVudHJ5UG9pbnRzSGFzaCIsImVudHJ5X3BvaW50c19ieV90eXBlIiwiRVhURVJOQUwiLCJzZWxlY3RvciIsIm9mZnNldCIsImwxSGFuZGxlckVudHJ5UG9pbnRzSGFzaCIsIkwxX0hBTkRMRVIiLCJjb25zdHJ1Y3RvckVudHJ5UG9pbnRIYXNoIiwiQ09OU1RSVUNUT1IiLCJidWlsdGluc0hhc2giLCJidWlsdGlucyIsImhpbnRlZENsYXNzSGFzaCIsImRhdGFIYXNoIiwiaGFzaEJ1aWx0aW5zIiwiaGFzaEVudHJ5UG9pbnQiLCJiYXNlIiwiY2FzbSIsIkNPTVBJTEVEX0NMQVNTX1ZFUlNJT04iLCJjb21waWxlZENsYXNzVmVyc2lvbiIsImwxSGFuZGxlcnMiLCJieXRlY29kZSIsImhhc2hFbnRyeVBvaW50U2llcnJhIiwiZnVuY3Rpb25faWR4IiwiaGFzaEFiaSIsInNpZXJyYSIsImluZGVudFN0cmluZyIsIkNPTlRSQUNUX0NMQVNTX1ZFUlNJT04iLCJhYmlIYXNoIiwic2llcnJhUHJvZ3JhbSIsInNpZXJyYV9wcm9ncmFtIiwic3RhcmtfZXhwb3J0cyIsImNvbXByZXNzUHJvZ3JhbSIsImRlY29tcHJlc3NQcm9ncmFtIiwiZXN0aW1hdGVkRmVlVG9NYXhGZWUiLCJmb3JtYXRTaWduYXR1cmUiLCJtYWtlQWRkcmVzcyIsInJhbmRvbUFkZHJlc3MiLCJzaWduYXR1cmVUb0RlY2ltYWxBcnJheSIsInNpZ25hdHVyZVRvSGV4QXJyYXkiLCJnZXRTdGFya0tleSIsInV0aWxzIiwiZ3ppcCIsInVuZ3ppcCIsImpzb25Qcm9ncmFtIiwic3RyaW5naWZpZWQiLCJjb21wcmVzc2VkUHJvZ3JhbSIsImJhc2U2NDIiLCJkZWNvbXByZXNzZWQiLCJyYW5kb21LZXlQYWlyIiwicmFuZG9tUHJpdmF0ZUtleSIsInNpZyIsImVzdGltYXRlZEZlZSIsIm92ZXJoZWFkIiwib3ZlckhlYWRQZXJjZW50IiwiTWF0aCIsInJvdW5kIiwiaXNTaWVycmEiLCJleHRyYWN0Q29udHJhY3RIYXNoZXMiLCJwYXlsb2FkIiwiY29udHJhY3RDbGFzc1Jlc3BvbnNlVG9MZWdhY3lDb21waWxlZENvbnRyYWN0IiwiY2NyIiwiaXNvbW9ycGhpY0ZldGNoIiwiZmV0Y2hQb255ZmlsbF9kZWZhdWx0Iiwid2luZG93IiwiZmV0Y2giLCJnbG9iYWwiLCJwcm92aWRlcl9leHBvcnRzIiwiY3JlYXRlU2llcnJhQ29udHJhY3RDbGFzcyIsInBhcnNlQ29udHJhY3QiLCJ3YWl0IiwiZGVsYXkiLCJQcm9taXNlIiwic2V0VGltZW91dCIsInNpZXJyYV9wcm9ncmFtX2RlYnVnX2luZm8iLCJwYXJzZWRDb250cmFjdCIsIlJQQ1Jlc3BvbnNlUGFyc2VyIiwicGFyc2VHZXRCbG9ja1Jlc3BvbnNlIiwidGltZXN0YW1wIiwiYmxvY2tfaGFzaCIsImJsb2NrX251bWJlciIsIm5ld19yb290IiwicGFyZW50X2hhc2giLCJzdGF0dXMiLCJ0cmFuc2FjdGlvbnMiLCJwYXJzZUdldFRyYW5zYWN0aW9uUmVzcG9uc2UiLCJjb250cmFjdF9hZGRyZXNzIiwic2VuZGVyX2FkZHJlc3MiLCJtYXhfZmVlIiwic2lnbmF0dXJlIiwidHJhbnNhY3Rpb25faGFzaCIsInBhcnNlRmVlRXN0aW1hdGVSZXNwb25zZSIsIm92ZXJhbGxfZmVlIiwiZ2FzX2NvbnN1bWVkIiwiZ2FzX3ByaWNlIiwicGFyc2VGZWVFc3RpbWF0ZUJ1bGtSZXNwb25zZSIsInBhcnNlQ2FsbENvbnRyYWN0UmVzcG9uc2UiLCJwYXJzZVNpbXVsYXRlVHJhbnNhY3Rpb25SZXNwb25zZSIsInN1Z2dlc3RlZE1heEZlZSIsImZlZV9lc3RpbWF0aW9uIiwicGFyc2VDb250cmFjdENsYXNzUmVzcG9uc2UiLCJKU09OIiwiZml4U3RhY2siLCJmbiIsImNhcHR1cmVTdGFja1RyYWNlIiwiZml4UHJvdG8iLCJwcm90b3R5cGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkN1c3RvbUVycm9yIiwiY29uZmlndXJhYmxlIiwiTGlicmFyeUVycm9yIiwiR2F0ZXdheUVycm9yIiwiZXJyb3JDb2RlIiwiSHR0cEVycm9yIiwic3RhcmtuZXRJZF9leHBvcnRzIiwiU3RhcmtuZXRJZENvbnRyYWN0IiwiZ2V0U3RhcmtuZXRJZENvbnRyYWN0IiwidXNlRGVjb2RlZCIsInVzZUVuY29kZWQiLCJiYXNpY0FscGhhYmV0IiwiYmFzaWNTaXplUGx1c09uZSIsImJpZ0FscGhhYmV0IiwiYmFzaWNBbHBoYWJldFNpemUiLCJiaWdBbHBoYWJldFNpemUiLCJiaWdBbHBoYWJldFNpemVQbHVzT25lIiwiZXh0cmFjdFN0YXJzIiwiZW5kc1dpdGgiLCJkZWNvZGVkIiwic3ViZG9tYWluIiwiY29kZSIsIm5leHRTdWJkb21haW4iLCJjb2RlMiIsIm11bHRpcGxpZXIiLCJibkluZGV4IiwibmV3aWQiLCJTdGFya25ldElkQ29udHJhY3QyIiwiZ2V0U3RhcmtOYW1lIiwicHJvdmlkZXIiLCJhZGRyZXNzIiwiZ2V0Q2hhaW5JZCIsImhleERvbWFpbiIsImNhbGxDb250cmFjdCIsImVudHJ5cG9pbnQiLCJkZWNpbWFsRG9tYWluIiwic3RyaW5nRG9tYWluIiwiZ2V0QWRkcmVzc0Zyb21TdGFya05hbWUiLCJhZGRyZXNzRGF0YSIsImRvbWFpbiIsInZhbGlkQmxvY2tUYWdzIiwiQmxvY2siLCJfaWRlbnRpZmllciIsIm51bWJlciIsInRhZyIsInZhbHVlT2YiLCJzZXRJZGVudGlmaWVyIiwiX19pZGVudGlmaWVyIiwicXVlcnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInNlcXVlbmNlcklkZW50aWZpZXIiLCJibG9ja0hhc2giLCJibG9ja051bWJlciIsImdldERlZmF1bHROb2RlVXJsIiwibmV0d29ya05hbWUiLCJtdXRlIiwiY29uc29sZSIsIndhcm4iLCJub2RlcyIsInJhbmRJZHgiLCJmbG9vciIsInJhbmRvbSIsImRlZmF1bHRPcHRpb25zIiwiaGVhZGVycyIsImJsb2NrSWRlbnRpZmllciIsInJldHJpZXMiLCJScGNQcm92aWRlciIsIm9wdGlvbnNPclByb3ZpZGVyIiwiZ2V0QmxvY2tIYXNoQW5kTnVtYmVyIiwiZ2V0QmxvY2tMYXRlc3RBY2NlcHRlZCIsImdldFN0YXRlVXBkYXRlIiwiZ2V0QmxvY2tTdGF0ZVVwZGF0ZSIsInRyYWNlQmxvY2tUcmFuc2FjdGlvbnMiLCJnZXRCbG9ja1RyYW5zYWN0aW9uc1RyYWNlcyIsImdldFRyYW5zYWN0aW9uQ291bnQiLCJnZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQiLCJ0cmFjZVRyYW5zYWN0aW9uIiwiZ2V0VHJhbnNhY3Rpb25UcmFjZSIsImdldFNpbXVsYXRlVHJhbnNhY3Rpb24iLCJzaW11bGF0ZVRyYW5zYWN0aW9uIiwibm9kZVVybCIsInBhcmFtcyIsImlkIiwicnBjUmVxdWVzdEJvZHkiLCJqc29ucnBjIiwiYm9keSIsImVycm9ySGFuZGxlciIsInJwY0Vycm9yIiwib3RoZXJFcnJvciIsImZldGNoRW5kcG9pbnQiLCJyYXdSZXN1bHQiLCJlcnJvciIsImdldFNwZWNWZXJzaW9uIiwiZ2V0Tm9uY2VGb3JBZGRyZXNzIiwiYmxvY2tfaWQiLCJnZXRCbG9jayIsImdldEJsb2NrV2l0aFR4SGFzaGVzIiwidGhlbiIsImdldEJsb2NrTnVtYmVyIiwiZ2V0QmxvY2tXaXRoVHhzIiwiZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyIsImdldFRyYW5zYWN0aW9uQnlIYXNoIiwiZ2V0VHJhbnNhY3Rpb24iLCJ0eEhhc2giLCJnZXRUcmFuc2FjdGlvbkJ5QmxvY2tJZEFuZEluZGV4IiwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0IiwiZ2V0VHJhbnNhY3Rpb25TdGF0dXMiLCJ0cmFuc2FjdGlvbkhhc2giLCJpbnZvY2F0aW9ucyIsInNraXBWYWxpZGF0ZSIsInNraXBGZWVDaGFyZ2UiLCJzaW11bGF0aW9uRmxhZ3MiLCJTS0lQX1ZBTElEQVRFIiwiU0tJUF9GRUVfQ0hBUkdFIiwiYnVpbGRUcmFuc2FjdGlvbiIsInNpbXVsYXRpb25fZmxhZ3MiLCJ3YWl0Rm9yVHJhbnNhY3Rpb24iLCJvcHRpb25zIiwib25jaGFpbiIsImlzRXJyb3JTdGF0ZSIsInJldHJ5SW50ZXJ2YWwiLCJlcnJvclN0YXRlcyIsIlJFSkVDVEVEIiwiUkVWRVJURUQiLCJzdWNjZXNzU3RhdGVzIiwiU1VDQ0VFREVEIiwiQUNDRVBURURfT05fTDIiLCJBQ0NFUFRFRF9PTl9MMSIsInR4U3RhdHVzIiwiZXhlY3V0aW9uU3RhdHVzIiwiZXhlY3V0aW9uX3N0YXR1cyIsImZpbmFsaXR5U3RhdHVzIiwiZmluYWxpdHlfc3RhdHVzIiwidHhSZWNlaXB0IiwiZ2V0U3RvcmFnZUF0IiwicGFyc2VkS2V5IiwiZ2V0Q2xhc3NIYXNoQXQiLCJnZXRDbGFzc0J5SGFzaCIsImdldENsYXNzIiwiY2xhc3NfaGFzaCIsImdldENsYXNzQXQiLCJnZXRDb2RlIiwiX2NvbnRyYWN0QWRkcmVzcyIsIl9ibG9ja0lkZW50aWZpZXIiLCJnZXRDb250cmFjdFZlcnNpb24iLCJhYmlUZXN0IiwiZ2V0RXN0aW1hdGVGZWUiLCJpbnZvY2F0aW9uIiwiaW52b2NhdGlvbkRldGFpbHMiLCJnZXRJbnZva2VFc3RpbWF0ZUZlZSIsInRyYW5zYWN0aW9uIiwicmVxdWVzdCIsImdldERlY2xhcmVFc3RpbWF0ZUZlZSIsImRldGFpbHMiLCJnZXREZXBsb3lBY2NvdW50RXN0aW1hdGVGZWUiLCJnZXRFc3RpbWF0ZUZlZUJ1bGsiLCJpbnZva2VGdW5jdGlvbiIsImZ1bmN0aW9uSW52b2NhdGlvbiIsImludm9rZV90cmFuc2FjdGlvbiIsIklOVk9LRSIsImRlY2xhcmVDb250cmFjdCIsImRlY2xhcmVfdHJhbnNhY3Rpb24iLCJERUNMQVJFIiwiY29udHJhY3RfY2xhc3MiLCJjb250cmFjdF9jbGFzc192ZXJzaW9uIiwiY29tcGlsZWRfY2xhc3NfaGFzaCIsImRlcGxveUFjY291bnRDb250cmFjdCIsImFkZHJlc3NTYWx0IiwiZGVwbG95X2FjY291bnRfdHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3Rvcl9jYWxsZGF0YSIsImNvbnRyYWN0X2FkZHJlc3Nfc2FsdCIsIkRFUExPWV9BQ0NPVU5UIiwiY2FsbCIsImVudHJ5X3BvaW50X3NlbGVjdG9yIiwiZXN0aW1hdGVNZXNzYWdlRmVlIiwiZnJvbV9hZGRyZXNzIiwidG9fYWRkcmVzcyIsImZvcm1hdHRlZE1lc3NhZ2UiLCJnZXRTeW5jaW5nU3RhdHMiLCJnZXRFdmVudHMiLCJldmVudEZpbHRlciIsImRlZmF1bHRWZXJzaW9ucyIsInVybGpvaW4yIiwiUmVzcG9uc2VQYXJzZXIiLCJTZXF1ZW5jZXJBUElSZXNwb25zZVBhcnNlciIsInN0YXRlX3Jvb3QiLCJwYXJlbnRfYmxvY2tfaGFzaCIsInBhcnNlR2V0VHJhbnNhY3Rpb25SZWNlaXB0UmVzcG9uc2UiLCJtZXNzYWdlc19zZW50IiwibDJfdG9fbDFfbWVzc2FnZXMiLCJyZXZlcnRfcmVhc29uIiwicmV2ZXJ0X2Vycm9yIiwiZ2FzSW5mbyIsImdhc191c2FnZSIsImFtb3VudCIsInRyYW5zYWN0aW9uX3RyYWNlIiwidHJhY2UiLCJwYXJzZUludm9rZUZ1bmN0aW9uUmVzcG9uc2UiLCJwYXJzZURlcGxveUNvbnRyYWN0UmVzcG9uc2UiLCJwYXJzZURlY2xhcmVDb250cmFjdFJlc3BvbnNlIiwicGFyc2VHZXRTdGF0ZVVwZGF0ZVJlc3BvbnNlIiwibm9uY2VzIiwic3RhdGVfZGlmZiIsInN0b3JhZ2VfZGlmZnMiLCJzdG9yYWdlX2VudHJpZXMiLCJ1cmxqb2luIiwicHJvdG9jb2xBbmREb21haW5SRSIsImxvY2FsaG9zdERvbWFpblJFIiwibm9uTG9jYWxob3N0RG9tYWluUkUiLCJpc1VybCIsImV2ZXJ5dGhpbmdBZnRlclByb3RvY29sIiwiYnVpbGRVcmwiLCJiYXNlVXJsIiwiZGVmYXVsdFBhdGgiLCJ1cmxPclBhdGgiLCJpc0VtcHR5UXVlcnlPYmplY3QiLCJldmVyeSIsImRlZmF1bHRPcHRpb25zMiIsIm5ldHdvcmsiLCJTZXF1ZW5jZXJQcm92aWRlciIsImdldE5ldHdvcmtGcm9tTmFtZSIsImZlZWRlckdhdGV3YXlVcmwiLCJnYXRld2F5VXJsIiwiZ2V0Q2hhaW5JZEZyb21CYXNlVXJsIiwidXJsIiwiVVJMIiwiaG9zdCIsImdldEZldGNoVXJsIiwiZW5kcG9pbnQiLCJnYXRld2F5VXJsRW5kcG9pbnRzIiwiZ2V0RmV0Y2hNZXRob2QiLCJwb3N0TWV0aG9kRW5kcG9pbnRzIiwiZ2V0UXVlcnlTdHJpbmciLCJxdWVyeSIsInF1ZXJ5U3RyaW5nIiwiYmxvY2siLCJnZXRIZWFkZXJzIiwidGV4dFJlc3BvbnNlIiwib2siLCJyZXNwb25zZUJvZHkiLCJzdGF0dXNUZXh0IiwicGFyc2VDaG9pY2UiLCJwYXJzZUFsd2F5c0FzQmlnSW50IiwicmVzb2x2ZSIsInR4SGFzaEhleCIsImdldENvbXBpbGVkQ2xhc3NCeUNsYXNzSGFzaCIsImNvbXBsZXRlZCIsInR4X2ZhaWx1cmVfcmVhc29uIiwidHhfc3RhdHVzIiwiZXJyb3JfbWVzc2FnZSIsInR4X3JldmVydF9yZWFzb24iLCJnZXRDb250cmFjdEFkZHJlc3NlcyIsInZhbGlkQ2FsbEwxSGFuZGxlciIsInNraXBFeGVjdXRlIiwiZ2V0QmxvY2tUcmFjZXMiLCJQcm92aWRlciIsInByb3ZpZGVyT3JPcHRpb25zIiwicnBjIiwic2VxdWVuY2VyIiwiaW52b2NhdGlvbldpdGhUeFR5cGUiLCJTaWduZXJJbnRlcmZhY2UiLCJ0cmFuc2FjdGlvbl9leHBvcnRzIiwiZnJvbUNhbGxzVG9FeGVjdXRlQ2FsbGRhdGEiLCJmcm9tQ2FsbHNUb0V4ZWN1dGVDYWxsZGF0YVdpdGhOb25jZSIsImZyb21DYWxsc1RvRXhlY3V0ZUNhbGxkYXRhX2NhaXJvMSIsImdldEV4ZWN1dGVDYWxsZGF0YSIsInRyYW5zZm9ybUNhbGxzVG9NdWx0aWNhbGxBcnJheXMiLCJ0cmFuc2Zvcm1DYWxsc1RvTXVsdGljYWxsQXJyYXlzX2NhaXJvMSIsImNhbGxzIiwidG8iLCJkYXRhX29mZnNldCIsImRhdGFfbGVuIiwiY29tcGlsZWRDYWxscyIsIm9yZGVyQ2FsbHMiLCJjYWlyb1ZlcnNpb24iLCJ0eXBlZERhdGFfZXhwb3J0cyIsImVuY29kZURhdGEiLCJlbmNvZGVUeXBlIiwiZW5jb2RlVmFsdWUiLCJnZXREZXBlbmRlbmNpZXMiLCJnZXRNZXNzYWdlSGFzaCIsImdldFN0cnVjdEhhc2giLCJnZXRUeXBlSGFzaCIsImlzTWVya2xlVHJlZVR5cGUiLCJwcmVwYXJlU2VsZWN0b3IiLCJtZXJrbGVfZXhwb3J0cyIsIk1lcmtsZVRyZWUiLCJwcm9vZk1lcmtsZVBhdGgiLCJsZWFmSGFzaGVzIiwiYnJhbmNoZXMiLCJsZWF2ZXMiLCJyb290IiwiYnVpbGQiLCJuZXdMZWF2ZXMiLCJhU29ydGVkIiwiYlNvcnRlZCIsInNvcnQiLCJnZXRQcm9vZiIsImxlYWYiLCJicmFuY2giLCJoYXNoUGF0aCIsImlzTGVmdCIsIm5lZWRlZEJyYW5jaCIsIm5ld0hhc2hQYXRoIiwiY3VycmVudEJyYW5jaExldmVsSW5kZXgiLCJuZXh0QnJhbmNoIiwicGF0aCIsInJlc3QiLCJnZXRIZXgiLCJ2YWxpZGF0ZVR5cGVkRGF0YSIsInR5cGVkRGF0YSIsInZhbGlkIiwidHlwZXMiLCJwcmltYXJ5VHlwZSIsImRlcGVuZGVuY2llcyIsInByZXZpb3VzIiwidCIsImRlcGVuZGVuY3kiLCJnZXRNZXJrbGVUcmVlVHlwZSIsImN0eCIsInBhcmVudCIsInBhcmVudFR5cGUiLCJtZXJrbGVUeXBlIiwiaXNNZXJrbGVUcmVlIiwiY29udGFpbnMiLCJwcmltYXJ5IiwibmV3VHlwZXMiLCJzdHJ1Y3RIYXNoZXMiLCJzdHJ1Y3QiLCJtZXJrbGVUcmVlVHlwZSIsInJldHVyblR5cGVzIiwidHMiLCJ2cyIsImZpZWxkIiwiZW5jb2RlZFZhbHVlIiwiYWNjb3VudCIsIlNpZ25lciIsInBrIiwiZ2V0UHViS2V5Iiwic2lnbk1lc3NhZ2UiLCJhY2NvdW50QWRkcmVzcyIsIm1zZ0hhc2giLCJzaWduIiwic2lnblRyYW5zYWN0aW9uIiwidHJhbnNhY3Rpb25zRGV0YWlsIiwiYWJpcyIsIndhbGxldEFkZHJlc3MiLCJzaWduRGVwbG95QWNjb3VudFRyYW5zYWN0aW9uIiwic2lnbkRlY2xhcmVUcmFuc2FjdGlvbiIsInBhcnNlVURDRXZlbnQiLCJldmVudHMiLCJldmVudCIsImRlcGxveWVyIiwidW5pcXVlIiwiY2FsbGRhdGFfbGVuIiwiQWNjb3VudCIsInBrT3JTaWduZXIiLCJkZXBsb3lTZWxmIiwiZGVwbG95QWNjb3VudCIsInNpZ25lciIsImdldE5vbmNlIiwiZ2V0Tm9uY2VTYWZlIiwiZ2V0Q2Fpcm9WZXJzaW9uIiwiZXN0aW1hdGVGZWUiLCJlc3RpbWF0ZUZlZURldGFpbHMiLCJlc3RpbWF0ZUludm9rZUZlZSIsInByb3ZpZGVkTm9uY2UiLCJzaWduZXJEZXRhaWxzIiwiYnVpbGRJbnZvY2F0aW9uIiwiZXN0aW1hdGVEZWNsYXJlRmVlIiwicHJvdmlkZWRDbGFzc0hhc2giLCJkZWNsYXJlQ29udHJhY3RUcmFuc2FjdGlvbiIsImJ1aWxkRGVjbGFyZVBheWxvYWQiLCJlc3RpbWF0ZUFjY291bnREZXBsb3lGZWUiLCJwcm92aWRlZENvbnRyYWN0QWRkcmVzcyIsImJ1aWxkQWNjb3VudERlcGxveVBheWxvYWQiLCJlc3RpbWF0ZURlcGxveUZlZSIsImJ1aWxkVURDQ29udHJhY3RQYXlsb2FkIiwiZXN0aW1hdGVGZWVCdWxrIiwiYWNjb3VudEludm9jYXRpb25zIiwiYWNjb3VudEludm9jYXRpb25zRmFjdG9yeSIsInZlcnNpb25zIiwiZWxlbSIsImV4ZWN1dGUiLCJnZXRTdWdnZXN0ZWRNYXhGZWUiLCJkZWNsYXJlSWZOb3QiLCJkZWNsYXJlQ29udHJhY3RQYXlsb2FkIiwiZGVjbGFyZSIsImRlcGxveSIsImNvbXBpbGVkQ29uc3RydWN0b3JDYWxsRGF0YSIsImRlcGxveVNhbHQiLCJhZGRyZXNzZXMiLCJpbnZva2VSZXNwb25zZSIsImRlcGxveUNvbnRyYWN0IiwiZGVwbG95VHgiLCJkZWNsYXJlQW5kRGVwbG95IiwidHgiLCJoYXNoTWVzc2FnZSIsInZlcmlmeU1lc3NhZ2VIYXNoIiwidmVyaWZ5TWVzc2FnZSIsImZlZUVzdGltYXRlIiwiY29tcHJlc3NlZENvbXBpbGVkQ29udHJhY3QiLCJzYWZlTm9uY2UiLCJ0eDBQYXlsb2FkIiwidHhQYXlsb2FkIiwiY29tbW9uIiwiUHJvdmlkZXJJbnRlcmZhY2UiLCJkZWZhdWx0UHJvdmlkZXIiLCJBY2NvdW50SW50ZXJmYWNlIiwiZXZlbnRzX2V4cG9ydHMiLCJnZXRBYmlFdmVudHMiLCJwYXJzZUV2ZW50cyIsInNpemUiLCJraW5kIiwiZW50cnlOYW1lIiwiYWJpRW50cnlNb2QiLCJwcm92aWRlclJlY2VpdmVkRXZlbnRzIiwiYWJpRXZlbnRzIiwiYWJpU3RydWN0cyIsImFiaUVudW1zIiwicmV0IiwicmVjRXZlbnQiLCJhYmlFdmVudCIsInBhcnNlZEV2ZW50Iiwia2V5c0l0ZXIiLCJkYXRhSXRlciIsImFiaUV2ZW50S2V5cyIsImFiaUV2ZW50RGF0YSIsInNwbGl0QXJnc0FuZE9wdGlvbnMiLCJsYXN0QXJnIiwic29tZSIsInBvcCIsImJ1aWxkQ2FsbCIsImZ1bmN0aW9uQWJpIiwicGFyc2VSZXF1ZXN0IiwicGFyc2VSZXNwb25zZSIsImJ1aWxkSW52b2tlIiwiaW52b2tlIiwiYnVpbGREZWZhdWx0IiwiYnVpbGRQb3B1bGF0ZSIsInBvcHVsYXRlIiwiYnVpbGRFc3RpbWF0ZSIsImVzdGltYXRlIiwiZ2V0Q2FsbGRhdGEiLCJjYWxsYmFjayIsIkNvbnRyYWN0IiwicHJvdmlkZXJPckFjY291bnQiLCJjYWxsRGF0YSIsImRlZmluZVByb3BlcnRpZXMiLCJmdW5jdGlvbnMiLCJjYWxsU3RhdGljIiwicG9wdWxhdGVUcmFuc2FjdGlvbiIsImFiaUVsZW1lbnQiLCJhdHRhY2giLCJjb25uZWN0IiwiZGVwbG95ZWQiLCJkZXBsb3lUcmFuc2FjdGlvbkhhc2giLCJmb3JtYXRSZXNwb25zZSIsInJlY2VpcHQiLCJpc0NhaXJvMSIsImdldFZlcnNpb24iLCJ0eXBlZCIsInRBYmkiLCJDb250cmFjdEludGVyZmFjZSIsIkNvbnRyYWN0RmFjdG9yeSIsImNvbnRyYWN0SW5zdGFuY2UiLCJoZXhUb0J5dGVzMiIsImFkZEFkZHJlc3NQYWRkaW5nIiwidmFsaWRhdGVBbmRQYXJzZUFkZHJlc3MiLCJnZXRDaGVja3N1bUFkZHJlc3MiLCJjaGFycyIsImhhc2hlZCIsInZhbGlkYXRlQ2hlY2tzdW1BZGRyZXNzIiwiY29uc3RhbnRzIiwiZWMiLCJtZXJrbGUiLCJzaG9ydFN0cmluZyIsInN0YXJrIiwic3RhcmtuZXRJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/dist/index.mjs\n");

/***/ })

};
;